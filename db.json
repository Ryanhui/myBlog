{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yiliaa/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/APlayer.min.js","path":"APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/assets/Wechat.jpeg","path":"assets/Wechat.jpeg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/assets/avatar.jpg","path":"assets/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/assets/Alipay.jpeg","path":"assets/Alipay.jpeg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yiliaa/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yiliaa/.DS_Store","hash":"abe82b9c960d9cac9e49fd5acd56bdb5e37d829a","modified":1534900598771},{"_id":"source/_posts/0-1-Knapsack-in-JavaScript.md","hash":"aed869b01094d7ab18c6a7ddb70c2678df942b49","modified":1545644096421},{"_id":"themes/yiliaa/_config.yml","hash":"eaed069a85648f7f807d3eb708a1a7ad3fb81b11","modified":1534900598771},{"_id":"source/_posts/CSS3方法均分div.md","hash":"7bc155c9979c2f9cd16447dc4fd91a97bb0cbce2","modified":1534812210227},{"_id":"source/_posts/CSS3媒体查询.md","hash":"de3557f7c959fad619aea924fe827312ec432b20","modified":1534812210226},{"_id":"source/_posts/JS弹球小游戏.md","hash":"c9b0f8711eb8b4e02d7c01a99cc273be3605fbec","modified":1534812210227},{"_id":"source/_posts/Hexo-安装需要sudo，permission-denied.md","hash":"160c998af8edd57de184b7c3887823745f5eed67","modified":1534812210227},{"_id":"source/_posts/JavaScript-模块详解：CommonJS-vs-AMD-vs-ES2015.md","hash":"9f9a9fb12212461d19b636cb8d69a505c02c8311","modified":1534812210228},{"_id":"source/_posts/JavaScript各种排序算法.md","hash":"15285f57cfbe5fe5335203b593f6bc87584184c4","modified":1534812210229},{"_id":"source/_posts/Promise的执行顺序.md","hash":"415b36a43f4a47f6c3b17e10d075f9e16b7eecb8","modified":1534812210230},{"_id":"source/_posts/ccap安装失败.md","hash":"815520bf7dcc1fb3d4d560f8f99da4579de57482","modified":1534812210230},{"_id":"source/_posts/github新手指南.md","hash":"bb85fff873358bf756ce840fd5cfd55382272410","modified":1534812210230},{"_id":"source/_posts/https发送post请求以及nodejs处理post.md","hash":"9c4aea5d84288dd59bbc2f19b2b1dca698c37e31","modified":1534812210231},{"_id":"source/_posts/javascript-迭代方法.md","hash":"1f17b0bc6300e798294621b5c48952ceb46d15d0","modified":1534812210231},{"_id":"source/_posts/js游戏-无尽的路.md","hash":"6ff588b3f659e475991dafd3a783e6129909e8d7","modified":1534812210232},{"_id":"source/_posts/Kong网关入门.md","hash":"1a39f93a1e3c390b7326aad8b3eead876942c911","modified":1537317786721},{"_id":"source/_posts/sublime-Text3-build-3134-注册码.md","hash":"26c5d45f7134cafa48b1f515f7844208cb263e43","modified":1534812210232},{"_id":"source/_posts/textarea高度自适应.md","hash":"1a508f3deff5ed632628c18d5cfa72396d8691a8","modified":1534812210232},{"_id":"source/_posts/世界尽头与冷酷仙境.md","hash":"f93857d5179e108d1f31b32fa41d68995155d968","modified":1534812210233},{"_id":"source/_posts/什么是科学.md","hash":"81ba98ea37ac1b39e9958440776b2682f5c629dc","modified":1534812210233},{"_id":"source/_posts/修改npm源.md","hash":"6397ac3e311f3be7441a3c0d6f110258c7363f0b","modified":1534812210234},{"_id":"source/_posts/加速命令行网络之方法.md","hash":"0a83cdf7fd771df28c1c19a7724c676cd5b1557c","modified":1534812210234},{"_id":"source/_posts/常用命令记录.md","hash":"73908434af58b6ee7ef4b9fb99420920c5aa0940","modified":1534812210234},{"_id":"source/_posts/搬运一些es6内容，以及在es5中的写法.md","hash":"356956917a6b6451596c08d456eedba04a93e096","modified":1534812210235},{"_id":"source/_posts/解决Safari无法播放B站直播.md","hash":"5ccaa4a8fcd107384656d0210552154b4fc497f0","modified":1534812210235},{"_id":"source/_posts/跨域访问中的withCredentials.md","hash":"06f24e8647c2294a47023ccfd27ef20b6eb696cc","modified":1534812210236},{"_id":"source/_posts/面试小记.md","hash":"d3fbd88d3be6a499234d052a91bc0e0aaa906e4b","modified":1534812210236},{"_id":"source/_posts/javascript-获取内外Ip.md","hash":"e4991c808c94b36dd214586acb12a28f67a86150","modified":1539068463424},{"_id":"source/_posts/p1.png","hash":"71462050a8b21670f69600e0e6d80267d30928c0","modified":1537266292510},{"_id":"themes/yiliaa/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1534900598802},{"_id":"source/_posts/package-lock-你想知道的一切.md","hash":"c1ba3c6e99e5451c568e60ec3d64d6c9d8a8c74b","modified":1534929487626},{"_id":"themes/yiliaa/source-src/.DS_Store","hash":"759e2be7083eade35ee9cc1d5432d47389093a8b","modified":1534900598802},{"_id":"themes/yiliaa/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1534900598865},{"_id":"themes/yiliaa/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534900598787},{"_id":"themes/yiliaa/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1534900598787},{"_id":"themes/yiliaa/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534900598787},{"_id":"themes/yiliaa/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534900598802},{"_id":"themes/yiliaa/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1534900598787},{"_id":"themes/yiliaa/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534900598802},{"_id":"themes/yiliaa/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534900598802},{"_id":"themes/yiliaa/layout/.DS_Store","hash":"4734045c20bc2c92e363b72d26dbb8425cc9e299","modified":1534900598787},{"_id":"themes/yiliaa/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1534900598771},{"_id":"themes/yiliaa/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1534900598771},{"_id":"themes/yiliaa/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1534900598771},{"_id":"themes/yiliaa/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1534900598771},{"_id":"themes/yiliaa/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1534900598771},{"_id":"themes/yiliaa/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1534900598771},{"_id":"themes/yiliaa/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1534900598787},{"_id":"source/_posts/Kong网关入门/p1.png","hash":"71462050a8b21670f69600e0e6d80267d30928c0","modified":1537266292510},{"_id":"themes/yiliaa/source/.DS_Store","hash":"0b78bc56b2217e45338f5d71e816fe58ae0c81dd","modified":1534900598865},{"_id":"themes/yiliaa/source/main.0cf68a.css","hash":"e769d3cdbbf804bc430c43d841e675cfaf53b819","modified":1534900598912},{"_id":"themes/yiliaa/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1534900598802},{"_id":"themes/yiliaa/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1534900598912},{"_id":"themes/yiliaa/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/.DS_Store","hash":"0876bcf3d89d000eee28e8bfaad770b26bacaa1c","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1534900598802},{"_id":"themes/yiliaa/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534900598787},{"_id":"themes/yiliaa/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/left.scss","hash":"ec049d84d486f39fc1212752bd6fcf751b42482c","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1534900598865},{"_id":"themes/yiliaa/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1534900598865},{"_id":"themes/yiliaa/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1534900598865},{"_id":"themes/yiliaa/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/report.js","hash":"21256959de7cbfe4edb11446f541781dfce9e1c4","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1534900598865},{"_id":"themes/yiliaa/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1534900598865},{"_id":"themes/yiliaa/source/main.0cf68a.js","hash":"31ecfedeff4af6f958e9461a9248af3aa09fd03e","modified":1534900598912},{"_id":"themes/yiliaa/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1534900598912},{"_id":"themes/yiliaa/source/APlayer.min.js","hash":"ca91e5d66489b4fa4e38577a7fafc432a3ff4d3c","modified":1534900598865},{"_id":"themes/yiliaa/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1534900598787},{"_id":"themes/yiliaa/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1534900598865},{"_id":"themes/yiliaa/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/article.ejs","hash":"f0c31cf33cfa60cc80adf86ebbd5ec6989e23e0e","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/footer.ejs","hash":"c07a7816edabb73fe8fd5cbd061bf762a240b27f","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/.DS_Store","hash":"834ba200113f44d63a3503c89e4c69670188ba29","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/left-col.ejs","hash":"f4f50625648596a2d828f0fc143e832404e5803a","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1534900598787},{"_id":"themes/yiliaa/source/assets/Wechat.jpeg","hash":"1074b3c38e242c8cc0c9aa4a3616df7e160ef276","modified":1534900598896},{"_id":"themes/yiliaa/source/assets/.DS_Store","hash":"5f3000bb4675e3d1e0a7e34c6b46e1ac1e7481b4","modified":1534900598865},{"_id":"themes/yiliaa/source/assets/favicon.ico","hash":"dbd4313e6883f6774956b51009f32bec72ea1af9","modified":1534900598912},{"_id":"themes/yiliaa/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534900598912},{"_id":"themes/yiliaa/source/assets/avatar.jpg","hash":"75d5c577571066dbcf0734eb18095745df596320","modified":1534900598896},{"_id":"themes/yiliaa/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534900598912},{"_id":"themes/yiliaa/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534900598912},{"_id":"themes/yiliaa/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1534900598802},{"_id":"themes/yiliaa/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534900598802},{"_id":"themes/yiliaa/source/assets/Alipay.jpeg","hash":"5ba6ef2fd4a38912c336d512928ad8269d3cefe4","modified":1534900598881},{"_id":"themes/yiliaa/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534900598834},{"_id":"themes/yiliaa/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534900598849},{"_id":"themes/yiliaa/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1534900598802},{"_id":"themes/yiliaa/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534900598912},{"_id":"themes/yiliaa/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534900598912},{"_id":"themes/yiliaa/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534900598834},{"_id":"themes/yiliaa/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534900598912},{"_id":"themes/yiliaa/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534900598912},{"_id":"themes/yiliaa/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534900598912},{"_id":"themes/yiliaa/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534900598912},{"_id":"themes/yiliaa/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1534900598787},{"_id":"themes/yiliaa/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1534900598787}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"CSS3方法均分div","date":"2017-09-11T06:04:15.000Z","_content":"### 这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\n\n父容器的样式\n\n    \t/*盒模型*/\n\t\tdisplay: -webkit-box;\n\t\tdisplay: -moz-box;\n\t\tdisplay: box;\n\n\t\t/*横向or纵向*/\n\t\t-webkit-box-orient: horizontal;   /*属性值：\t\t[horizontal]横向/[vertical]纵向*/\n\t\t-moz-box-orient: horizontal;\n\t\tbox-orient: horizontal;\n\t\t\n子容器样式\n    \t\n    \t/*占有比例*/\n\t\t-webkit-box-flex: 1;\n\t\t-moz-box-flex: 1;\n\t\tbox-flex: 1;","source":"_posts/CSS3方法均分div.md","raw":"---\ntitle: CSS3方法均分div\ndate: 2017-09-11 14:04:15\ntags: 前端\n---\n### 这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\n\n父容器的样式\n\n    \t/*盒模型*/\n\t\tdisplay: -webkit-box;\n\t\tdisplay: -moz-box;\n\t\tdisplay: box;\n\n\t\t/*横向or纵向*/\n\t\t-webkit-box-orient: horizontal;   /*属性值：\t\t[horizontal]横向/[vertical]纵向*/\n\t\t-moz-box-orient: horizontal;\n\t\tbox-orient: horizontal;\n\t\t\n子容器样式\n    \t\n    \t/*占有比例*/\n\t\t-webkit-box-flex: 1;\n\t\t-moz-box-flex: 1;\n\t\tbox-flex: 1;","slug":"CSS3方法均分div","published":1,"updated":"2018-08-21T00:43:30.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24ldx50000vcz1gny6pq9y","content":"<h3 id=\"这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\"><a href=\"#这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\" class=\"headerlink\" title=\"这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\"></a>这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。</h3><p>父容器的样式</p>\n<pre><code>/*盒模型*/\ndisplay: -webkit-box;\ndisplay: -moz-box;\ndisplay: box;\n\n/*横向or纵向*/\n-webkit-box-orient: horizontal;   /*属性值：        [horizontal]横向/[vertical]纵向*/\n-moz-box-orient: horizontal;\nbox-orient: horizontal;\n</code></pre><p>子容器样式</p>\n<pre><code>/*占有比例*/\n-webkit-box-flex: 1;\n-moz-box-flex: 1;\nbox-flex: 1;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\"><a href=\"#这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\" class=\"headerlink\" title=\"这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。\"></a>这个方法只能兼容比较新的谷歌火狐Safari和IE11以上的浏览器。</h3><p>父容器的样式</p>\n<pre><code>/*盒模型*/\ndisplay: -webkit-box;\ndisplay: -moz-box;\ndisplay: box;\n\n/*横向or纵向*/\n-webkit-box-orient: horizontal;   /*属性值：        [horizontal]横向/[vertical]纵向*/\n-moz-box-orient: horizontal;\nbox-orient: horizontal;\n</code></pre><p>子容器样式</p>\n<pre><code>/*占有比例*/\n-webkit-box-flex: 1;\n-moz-box-flex: 1;\nbox-flex: 1;\n</code></pre>"},{"title":"0/1 Knapsack in JavaScript","date":"2018-12-24T09:32:48.000Z","_content":"\n0/1背包问题的js实现\n\n```javascript\n\n// val => value\n// wt => weight\nlet val = [-1,100,20,60,40] \nlet wt = [-1,3,2,4,1] \n\n// total capacity of the knapsack\nlet W = 5;\n\n// total items\nlet n = 4;\n\n// create two dimensional array \nlet arr = new Array(n+1);\nfor (let i = 0; i <= n; i ++) {\n\tarr[i] = new Array(W+1);\n}\n\n// set first row and column to zero\nfor(let i = 0; i <= n; i++) {\n\tarr[i][0] = 0\n}\n\nfor(let i = 0; i <= W; i++ ){\n\tarr[0][i] = 0;\n}\n\n/*\n\tif wt[i] > w then\n\tV[i,w] = V[i-1,w]\n\n\telse if wt[i] <= w then\n\tV[i,w] = max( V[i-1,w], val[i] + V[i-1, w - wt[i]] )\n*/\nfor(let i = 1; i <= n; i++) {\n\tfor(let w = 1; w <= W; w++) {\n\t\tif (wt[i] > w) {\n\t\t\tarr[i][w] = arr[i-1][w];\n\t\t}else if (wt[i] <= w) {\n\t\t\tarr[i][w] = Math.max(arr[i-1][w], (arr[i-1][w - wt[i]] + val[i]));\n\t\t}\n\t}\n}\n\nconsole.table(arr)\n```\n\n","source":"_posts/0-1-Knapsack-in-JavaScript.md","raw":"---\ntitle: 0/1 Knapsack in JavaScript\ndate: 2018-12-24 17:32:48\ntags: 分享 算法\n\n---\n\n0/1背包问题的js实现\n\n```javascript\n\n// val => value\n// wt => weight\nlet val = [-1,100,20,60,40] \nlet wt = [-1,3,2,4,1] \n\n// total capacity of the knapsack\nlet W = 5;\n\n// total items\nlet n = 4;\n\n// create two dimensional array \nlet arr = new Array(n+1);\nfor (let i = 0; i <= n; i ++) {\n\tarr[i] = new Array(W+1);\n}\n\n// set first row and column to zero\nfor(let i = 0; i <= n; i++) {\n\tarr[i][0] = 0\n}\n\nfor(let i = 0; i <= W; i++ ){\n\tarr[0][i] = 0;\n}\n\n/*\n\tif wt[i] > w then\n\tV[i,w] = V[i-1,w]\n\n\telse if wt[i] <= w then\n\tV[i,w] = max( V[i-1,w], val[i] + V[i-1, w - wt[i]] )\n*/\nfor(let i = 1; i <= n; i++) {\n\tfor(let w = 1; w <= W; w++) {\n\t\tif (wt[i] > w) {\n\t\t\tarr[i][w] = arr[i-1][w];\n\t\t}else if (wt[i] <= w) {\n\t\t\tarr[i][w] = Math.max(arr[i-1][w], (arr[i-1][w - wt[i]] + val[i]));\n\t\t}\n\t}\n}\n\nconsole.table(arr)\n```\n\n","slug":"0-1-Knapsack-in-JavaScript","published":1,"updated":"2018-12-24T09:34:56.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24ldyo0001vcz1j0enkt3d","content":"<p>0/1背包问题的js实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// val =&gt; value</span></div><div class=\"line\"><span class=\"comment\">// wt =&gt; weight</span></div><div class=\"line\"><span class=\"keyword\">let</span> val = [<span class=\"number\">-1</span>,<span class=\"number\">100</span>,<span class=\"number\">20</span>,<span class=\"number\">60</span>,<span class=\"number\">40</span>] </div><div class=\"line\"><span class=\"keyword\">let</span> wt = [<span class=\"number\">-1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>] </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// total capacity of the knapsack</span></div><div class=\"line\"><span class=\"keyword\">let</span> W = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// total items</span></div><div class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create two dimensional array </span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= n; i ++) &#123;</div><div class=\"line\">\tarr[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(W+<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// set first row and column to zero</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\tarr[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= W; i++ )&#123;</div><div class=\"line\">\tarr[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\tif wt[i] &gt; w then</span></div><div class=\"line\"><span class=\"comment\">\tV[i,w] = V[i-1,w]</span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">\telse if wt[i] &lt;= w then</span></div><div class=\"line\"><span class=\"comment\">\tV[i,w] = max( V[i-1,w], val[i] + V[i-1, w - wt[i]] )</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> w = <span class=\"number\">1</span>; w &lt;= W; w++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (wt[i] &gt; w) &#123;</div><div class=\"line\">\t\t\tarr[i][w] = arr[i<span class=\"number\">-1</span>][w];</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wt[i] &lt;= w) &#123;</div><div class=\"line\">\t\t\tarr[i][w] = <span class=\"built_in\">Math</span>.max(arr[i<span class=\"number\">-1</span>][w], (arr[i<span class=\"number\">-1</span>][w - wt[i]] + val[i]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.table(arr)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>0/1背包问题的js实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// val =&gt; value</span></div><div class=\"line\"><span class=\"comment\">// wt =&gt; weight</span></div><div class=\"line\"><span class=\"keyword\">let</span> val = [<span class=\"number\">-1</span>,<span class=\"number\">100</span>,<span class=\"number\">20</span>,<span class=\"number\">60</span>,<span class=\"number\">40</span>] </div><div class=\"line\"><span class=\"keyword\">let</span> wt = [<span class=\"number\">-1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>] </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// total capacity of the knapsack</span></div><div class=\"line\"><span class=\"keyword\">let</span> W = <span class=\"number\">5</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// total items</span></div><div class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"number\">4</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// create two dimensional array </span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n+<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= n; i ++) &#123;</div><div class=\"line\">\tarr[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(W+<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// set first row and column to zero</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\tarr[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= W; i++ )&#123;</div><div class=\"line\">\tarr[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\tif wt[i] &gt; w then</span></div><div class=\"line\"><span class=\"comment\">\tV[i,w] = V[i-1,w]</span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">\telse if wt[i] &lt;= w then</span></div><div class=\"line\"><span class=\"comment\">\tV[i,w] = max( V[i-1,w], val[i] + V[i-1, w - wt[i]] )</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> w = <span class=\"number\">1</span>; w &lt;= W; w++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (wt[i] &gt; w) &#123;</div><div class=\"line\">\t\t\tarr[i][w] = arr[i<span class=\"number\">-1</span>][w];</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (wt[i] &lt;= w) &#123;</div><div class=\"line\">\t\t\tarr[i][w] = <span class=\"built_in\">Math</span>.max(arr[i<span class=\"number\">-1</span>][w], (arr[i<span class=\"number\">-1</span>][w - wt[i]] + val[i]));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.table(arr)</div></pre></td></tr></table></figure>\n"},{"title":"CSS3媒体查询","date":"2017-09-25T04:19:03.000Z","_content":"### CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。\n\n比如你可以用一套样式规则，一个适配电脑屏幕，一个适配打印机，一个适配手机，等等。\n\n### CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。\n\n媒体查询可以用来检查很多东西，比如：\n\n* 视窗的宽高\n* 设备的宽高（屏幕）\n* 方向（纵向模式还是横向模式）\n* 分辨率\n\n使用媒体查询是为桌面设备，苹果和安卓适配不同样式的流行做法。\n\n### 语法：\n\n一个媒体查询包含一个媒体类型和一个或多个判断真假的表达式。\n\n    @media not|only mediatype and (expressions) {\n   \t\t CSS-Code;\n\t}\n\t\n如果指定的媒体类型和设备正在显示的相同而且所有表达式为真，那么查询结果就是为真。\n\n你可以为不同的媒体设置不同的样式表：\n\n    <link rel=\"stylesheet\" media=\"mediatype and|not|only (expressions)\" href=\"print.css\">\n    \n \n### 媒体类型：\n\n* all ：用于所有媒体设备\n* pring： 用于打印机\n* screen： 用于电脑屏幕，平板，智能手机等\n* speech： 用于屏幕阅读器\n\n### 例子\n\n使用媒体查询的一种方法是在样式表中插入备用的CSS内容\n\n下面这个例子如果视窗大于480px，背景颜色就会变成lightgreen\n\n    @media screen and (min-width: 480px) {\n    body {\n         \t background-color: lightgreen;\n   \t\t }\n\t}\n\t\n下面这个例子，如果视窗大于等于480px，菜单就会做浮动\n\n    @media screen and (min-width: 480px) {\n        #leftsidebar {width: 200px; float: left;}\n        #main {margin-left:216px;}\n\t}\n\nDone.","source":"_posts/CSS3媒体查询.md","raw":"---\ntitle: CSS3媒体查询\ndate: 2017-09-25 12:19:03\ntags: 前端\n---\n### CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。\n\n比如你可以用一套样式规则，一个适配电脑屏幕，一个适配打印机，一个适配手机，等等。\n\n### CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。\n\n媒体查询可以用来检查很多东西，比如：\n\n* 视窗的宽高\n* 设备的宽高（屏幕）\n* 方向（纵向模式还是横向模式）\n* 分辨率\n\n使用媒体查询是为桌面设备，苹果和安卓适配不同样式的流行做法。\n\n### 语法：\n\n一个媒体查询包含一个媒体类型和一个或多个判断真假的表达式。\n\n    @media not|only mediatype and (expressions) {\n   \t\t CSS-Code;\n\t}\n\t\n如果指定的媒体类型和设备正在显示的相同而且所有表达式为真，那么查询结果就是为真。\n\n你可以为不同的媒体设置不同的样式表：\n\n    <link rel=\"stylesheet\" media=\"mediatype and|not|only (expressions)\" href=\"print.css\">\n    \n \n### 媒体类型：\n\n* all ：用于所有媒体设备\n* pring： 用于打印机\n* screen： 用于电脑屏幕，平板，智能手机等\n* speech： 用于屏幕阅读器\n\n### 例子\n\n使用媒体查询的一种方法是在样式表中插入备用的CSS内容\n\n下面这个例子如果视窗大于480px，背景颜色就会变成lightgreen\n\n    @media screen and (min-width: 480px) {\n    body {\n         \t background-color: lightgreen;\n   \t\t }\n\t}\n\t\n下面这个例子，如果视窗大于等于480px，菜单就会做浮动\n\n    @media screen and (min-width: 480px) {\n        #leftsidebar {width: 200px; float: left;}\n        #main {margin-left:216px;}\n\t}\n\nDone.","slug":"CSS3媒体查询","published":1,"updated":"2018-08-21T00:43:30.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24ldzj0006vcz1ffqnh280","content":"<h3 id=\"CSS2的-media-规则使得为不同媒体类型定义不同的样式规则成为可能。\"><a href=\"#CSS2的-media-规则使得为不同媒体类型定义不同的样式规则成为可能。\" class=\"headerlink\" title=\"CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。\"></a>CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。</h3><p>比如你可以用一套样式规则，一个适配电脑屏幕，一个适配打印机，一个适配手机，等等。</p>\n<h3 id=\"CSS3中的媒体查询延伸了CSS2中的媒体类型的想法：-不是查看设备类型，而是查看设备特性。\"><a href=\"#CSS3中的媒体查询延伸了CSS2中的媒体类型的想法：-不是查看设备类型，而是查看设备特性。\" class=\"headerlink\" title=\"CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。\"></a>CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。</h3><p>媒体查询可以用来检查很多东西，比如：</p>\n<ul>\n<li>视窗的宽高</li>\n<li>设备的宽高（屏幕）</li>\n<li>方向（纵向模式还是横向模式）</li>\n<li>分辨率</li>\n</ul>\n<p>使用媒体查询是为桌面设备，苹果和安卓适配不同样式的流行做法。</p>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><p>一个媒体查询包含一个媒体类型和一个或多个判断真假的表达式。</p>\n<pre><code>@media not|only mediatype and (expressions) {\n        CSS-Code;\n}\n</code></pre><p>如果指定的媒体类型和设备正在显示的相同而且所有表达式为真，那么查询结果就是为真。</p>\n<p>你可以为不同的媒体设置不同的样式表：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (expressions)&quot; href=&quot;print.css&quot;&gt;\n</code></pre><h3 id=\"媒体类型：\"><a href=\"#媒体类型：\" class=\"headerlink\" title=\"媒体类型：\"></a>媒体类型：</h3><ul>\n<li>all ：用于所有媒体设备</li>\n<li>pring： 用于打印机</li>\n<li>screen： 用于电脑屏幕，平板，智能手机等</li>\n<li>speech： 用于屏幕阅读器</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>使用媒体查询的一种方法是在样式表中插入备用的CSS内容</p>\n<p>下面这个例子如果视窗大于480px，背景颜色就会变成lightgreen</p>\n<pre><code>@media screen and (min-width: 480px) {\nbody {\n          background-color: lightgreen;\n        }\n}\n</code></pre><p>下面这个例子，如果视窗大于等于480px，菜单就会做浮动</p>\n<pre><code>@media screen and (min-width: 480px) {\n    #leftsidebar {width: 200px; float: left;}\n    #main {margin-left:216px;}\n}\n</code></pre><p>Done.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CSS2的-media-规则使得为不同媒体类型定义不同的样式规则成为可能。\"><a href=\"#CSS2的-media-规则使得为不同媒体类型定义不同的样式规则成为可能。\" class=\"headerlink\" title=\"CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。\"></a>CSS2的 @media 规则使得为不同媒体类型定义不同的样式规则成为可能。</h3><p>比如你可以用一套样式规则，一个适配电脑屏幕，一个适配打印机，一个适配手机，等等。</p>\n<h3 id=\"CSS3中的媒体查询延伸了CSS2中的媒体类型的想法：-不是查看设备类型，而是查看设备特性。\"><a href=\"#CSS3中的媒体查询延伸了CSS2中的媒体类型的想法：-不是查看设备类型，而是查看设备特性。\" class=\"headerlink\" title=\"CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。\"></a>CSS3中的媒体查询延伸了CSS2中的媒体类型的想法： 不是查看设备类型，而是查看设备特性。</h3><p>媒体查询可以用来检查很多东西，比如：</p>\n<ul>\n<li>视窗的宽高</li>\n<li>设备的宽高（屏幕）</li>\n<li>方向（纵向模式还是横向模式）</li>\n<li>分辨率</li>\n</ul>\n<p>使用媒体查询是为桌面设备，苹果和安卓适配不同样式的流行做法。</p>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><p>一个媒体查询包含一个媒体类型和一个或多个判断真假的表达式。</p>\n<pre><code>@media not|only mediatype and (expressions) {\n        CSS-Code;\n}\n</code></pre><p>如果指定的媒体类型和设备正在显示的相同而且所有表达式为真，那么查询结果就是为真。</p>\n<p>你可以为不同的媒体设置不同的样式表：</p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (expressions)&quot; href=&quot;print.css&quot;&gt;\n</code></pre><h3 id=\"媒体类型：\"><a href=\"#媒体类型：\" class=\"headerlink\" title=\"媒体类型：\"></a>媒体类型：</h3><ul>\n<li>all ：用于所有媒体设备</li>\n<li>pring： 用于打印机</li>\n<li>screen： 用于电脑屏幕，平板，智能手机等</li>\n<li>speech： 用于屏幕阅读器</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>使用媒体查询的一种方法是在样式表中插入备用的CSS内容</p>\n<p>下面这个例子如果视窗大于480px，背景颜色就会变成lightgreen</p>\n<pre><code>@media screen and (min-width: 480px) {\nbody {\n          background-color: lightgreen;\n        }\n}\n</code></pre><p>下面这个例子，如果视窗大于等于480px，菜单就会做浮动</p>\n<pre><code>@media screen and (min-width: 480px) {\n    #leftsidebar {width: 200px; float: left;}\n    #main {margin-left:216px;}\n}\n</code></pre><p>Done.</p>\n"},{"title":"JS弹球小游戏","date":"2018-02-01T02:52:58.000Z","_content":"\n不知道你有没有玩过这个打砖块的游戏，我模糊记得是在Windows 98上自带的游戏。\n\n在当时的我看来，画面极其科幻，游戏效果无与伦比。\n\n不过我谷歌了一圈也没发现与记忆里一模一样的画面，只找到了这个类似的游戏。\n\n![image](http://ww1.sinaimg.cn/large/6535481cly1fo0xe3iloqj20go09eteh.jpg)\n\n想想那时一个弹球游戏就能玩上整整一天，守着大屁股的显示器，几个伙伴轮流操作，真是让人怀念的年代。\n\n只是当时太过年幼，不知这是何种难得的幸福。\n\n技术发展的脚步飞快，JavaScript似乎已经无所不能，索性就实现了一个类似的小游戏。\n\n虽然物理部分简单，但是既然已有非常完善的物理引擎，何不站在巨人的肩头呢？\n\n## [matter.js](http://brm.io/matter-js/docs/index.html)\n\n一个用JavaScript编写的2D刚体物理引擎。\n\n在引擎中添加世界，在世界中添加物体，启动引擎，一切就动了起来，是不是让人兴奋？\n\n可以添加多个世界，可以添加多个物体，物体可以组合，可以添加事件，可以使用自己的渲染器，可以添加插件，全部随心所欲。\n\n[这里是官方demo](http://brm.io/matter-js/demo/#airFriction)\n\n同所有的引擎一样，在使用前要了解一下概念，比如engine，即引擎。引擎控制着对世界的模拟更新。或者composite，即合成，是物体的集合。一个世界就是一个composite体。等等。\n\n介绍完了matter.js引擎，下面是游戏部分。\n\n为了让游戏变得更有意思一点，我让球球每隔一段时间随机改变方向和速度，带来出其不意的惊喜。\n\n[游戏demo](http://www.boxgame.top/pinball/)\n\n![](http://ww1.sinaimg.cn/large/6535481cly1fo0xekjv13j21e60p1dgm.jpg)\n\n关键\n\n为了让球球持续运动，要使摩擦力，空气摩擦力，静摩擦力设置为0，为了能更好的反弹，要设置restitution（恢复力？）为1，同时密度要合适。\n\n为球体设置的属性这样：\n\n        density: 0.001,\n        friction: 0,\n        frictionStatic: 0,\n        frictionAir: 0,\n        restitution: 1\n\n墙体等属性主要是isStatic为true即可，目的是固定在空间上，否则会无限掉落。\n\n对于碰撞事件，我们要进行监听，实现消失，改变颜色，播放音效的功能。\n\n    /* 监控碰撞中事件 */\n\t Events.on(engine, 'collisionActive', function(event) {\n    \tlet pairs = event.pairs;\n\n    \tfor(let i = 0; i < pairs.length; i++) {\n        \tlet pair = pairs[i];\n        \tpair.bodyA.render.fillStyle = '#42f4b6';\n        \tpair.bodyB.render.fillStyle = '#41d9f4';\n    \t}\n\n    \tplaySound();\n\t});\n\n操作物体可以在帧前或者帧后，这样才会从下一帧开始应用改变。\n\n    Events.on(engine, 'beforeUpdate', beforeUpdateEvent);\n    \n    function beforeUpdateEvent(event) {\n    /* 球球的位置 */\n    var position = ball.position;\n\n    if(event.timestamp % 5100 < 50 && isMovingBall){\n        \n        var positionX = position.x,\n            positionY = position.y;\n\n        /* 如果球球的速度小于13，给球球加速 */\n        if(ball.speed < 20) {\n            Body.applyForce(ball, {x: positionX, y: positionY}, {x:  Math.random()/100, y: -Math.random()/100}); \n            console.log('speed up');\n        }\n    }\n\n    /* 球离开区域，游戏失败 */\n    if(position.y >= 900) {\n        \tisMovingBall = false;\n        \tisOver = true;\n        \tComposite.remove(world, [box, ball]);\n        \tEvents.off(engine, 'afterUpdate', afterUpdateEvent);\n        \tEvents.off(engine, 'beforeUpdate', beforeUpdateEvent);\n  \t\t\tcover.style.backgroundColor = 'rgba(0,0,0,0.7)';\n    \t}\n    }\n   \n每次游戏结束为了让物体回归原位，从世界移除物体及监听的事件，重新添加。\n\n这样就完成了一个弹球小游戏。\n\n以上\n\n\n","source":"_posts/JS弹球小游戏.md","raw":"---\ntitle: JS弹球小游戏\ndate: 2018-02-01 10:52:58\ntags: 前端\n---\n\n不知道你有没有玩过这个打砖块的游戏，我模糊记得是在Windows 98上自带的游戏。\n\n在当时的我看来，画面极其科幻，游戏效果无与伦比。\n\n不过我谷歌了一圈也没发现与记忆里一模一样的画面，只找到了这个类似的游戏。\n\n![image](http://ww1.sinaimg.cn/large/6535481cly1fo0xe3iloqj20go09eteh.jpg)\n\n想想那时一个弹球游戏就能玩上整整一天，守着大屁股的显示器，几个伙伴轮流操作，真是让人怀念的年代。\n\n只是当时太过年幼，不知这是何种难得的幸福。\n\n技术发展的脚步飞快，JavaScript似乎已经无所不能，索性就实现了一个类似的小游戏。\n\n虽然物理部分简单，但是既然已有非常完善的物理引擎，何不站在巨人的肩头呢？\n\n## [matter.js](http://brm.io/matter-js/docs/index.html)\n\n一个用JavaScript编写的2D刚体物理引擎。\n\n在引擎中添加世界，在世界中添加物体，启动引擎，一切就动了起来，是不是让人兴奋？\n\n可以添加多个世界，可以添加多个物体，物体可以组合，可以添加事件，可以使用自己的渲染器，可以添加插件，全部随心所欲。\n\n[这里是官方demo](http://brm.io/matter-js/demo/#airFriction)\n\n同所有的引擎一样，在使用前要了解一下概念，比如engine，即引擎。引擎控制着对世界的模拟更新。或者composite，即合成，是物体的集合。一个世界就是一个composite体。等等。\n\n介绍完了matter.js引擎，下面是游戏部分。\n\n为了让游戏变得更有意思一点，我让球球每隔一段时间随机改变方向和速度，带来出其不意的惊喜。\n\n[游戏demo](http://www.boxgame.top/pinball/)\n\n![](http://ww1.sinaimg.cn/large/6535481cly1fo0xekjv13j21e60p1dgm.jpg)\n\n关键\n\n为了让球球持续运动，要使摩擦力，空气摩擦力，静摩擦力设置为0，为了能更好的反弹，要设置restitution（恢复力？）为1，同时密度要合适。\n\n为球体设置的属性这样：\n\n        density: 0.001,\n        friction: 0,\n        frictionStatic: 0,\n        frictionAir: 0,\n        restitution: 1\n\n墙体等属性主要是isStatic为true即可，目的是固定在空间上，否则会无限掉落。\n\n对于碰撞事件，我们要进行监听，实现消失，改变颜色，播放音效的功能。\n\n    /* 监控碰撞中事件 */\n\t Events.on(engine, 'collisionActive', function(event) {\n    \tlet pairs = event.pairs;\n\n    \tfor(let i = 0; i < pairs.length; i++) {\n        \tlet pair = pairs[i];\n        \tpair.bodyA.render.fillStyle = '#42f4b6';\n        \tpair.bodyB.render.fillStyle = '#41d9f4';\n    \t}\n\n    \tplaySound();\n\t});\n\n操作物体可以在帧前或者帧后，这样才会从下一帧开始应用改变。\n\n    Events.on(engine, 'beforeUpdate', beforeUpdateEvent);\n    \n    function beforeUpdateEvent(event) {\n    /* 球球的位置 */\n    var position = ball.position;\n\n    if(event.timestamp % 5100 < 50 && isMovingBall){\n        \n        var positionX = position.x,\n            positionY = position.y;\n\n        /* 如果球球的速度小于13，给球球加速 */\n        if(ball.speed < 20) {\n            Body.applyForce(ball, {x: positionX, y: positionY}, {x:  Math.random()/100, y: -Math.random()/100}); \n            console.log('speed up');\n        }\n    }\n\n    /* 球离开区域，游戏失败 */\n    if(position.y >= 900) {\n        \tisMovingBall = false;\n        \tisOver = true;\n        \tComposite.remove(world, [box, ball]);\n        \tEvents.off(engine, 'afterUpdate', afterUpdateEvent);\n        \tEvents.off(engine, 'beforeUpdate', beforeUpdateEvent);\n  \t\t\tcover.style.backgroundColor = 'rgba(0,0,0,0.7)';\n    \t}\n    }\n   \n每次游戏结束为了让物体回归原位，从世界移除物体及监听的事件，重新添加。\n\n这样就完成了一个弹球小游戏。\n\n以上\n\n\n","slug":"JS弹球小游戏","published":1,"updated":"2018-08-21T00:43:30.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24ldzl0007vcz1zg4ozhf6","content":"<p>不知道你有没有玩过这个打砖块的游戏，我模糊记得是在Windows 98上自带的游戏。</p>\n<p>在当时的我看来，画面极其科幻，游戏效果无与伦比。</p>\n<p>不过我谷歌了一圈也没发现与记忆里一模一样的画面，只找到了这个类似的游戏。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/6535481cly1fo0xe3iloqj20go09eteh.jpg\" alt=\"image\"></p>\n<p>想想那时一个弹球游戏就能玩上整整一天，守着大屁股的显示器，几个伙伴轮流操作，真是让人怀念的年代。</p>\n<p>只是当时太过年幼，不知这是何种难得的幸福。</p>\n<p>技术发展的脚步飞快，JavaScript似乎已经无所不能，索性就实现了一个类似的小游戏。</p>\n<p>虽然物理部分简单，但是既然已有非常完善的物理引擎，何不站在巨人的肩头呢？</p>\n<h2 id=\"matter-js\"><a href=\"#matter-js\" class=\"headerlink\" title=\"matter.js\"></a><a href=\"http://brm.io/matter-js/docs/index.html\" target=\"_blank\" rel=\"external\">matter.js</a></h2><p>一个用JavaScript编写的2D刚体物理引擎。</p>\n<p>在引擎中添加世界，在世界中添加物体，启动引擎，一切就动了起来，是不是让人兴奋？</p>\n<p>可以添加多个世界，可以添加多个物体，物体可以组合，可以添加事件，可以使用自己的渲染器，可以添加插件，全部随心所欲。</p>\n<p><a href=\"http://brm.io/matter-js/demo/#airFriction\" target=\"_blank\" rel=\"external\">这里是官方demo</a></p>\n<p>同所有的引擎一样，在使用前要了解一下概念，比如engine，即引擎。引擎控制着对世界的模拟更新。或者composite，即合成，是物体的集合。一个世界就是一个composite体。等等。</p>\n<p>介绍完了matter.js引擎，下面是游戏部分。</p>\n<p>为了让游戏变得更有意思一点，我让球球每隔一段时间随机改变方向和速度，带来出其不意的惊喜。</p>\n<p><a href=\"http://www.boxgame.top/pinball/\" target=\"_blank\" rel=\"external\">游戏demo</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/6535481cly1fo0xekjv13j21e60p1dgm.jpg\" alt=\"\"></p>\n<p>关键</p>\n<p>为了让球球持续运动，要使摩擦力，空气摩擦力，静摩擦力设置为0，为了能更好的反弹，要设置restitution（恢复力？）为1，同时密度要合适。</p>\n<p>为球体设置的属性这样：</p>\n<pre><code>density: 0.001,\nfriction: 0,\nfrictionStatic: 0,\nfrictionAir: 0,\nrestitution: 1\n</code></pre><p>墙体等属性主要是isStatic为true即可，目的是固定在空间上，否则会无限掉落。</p>\n<p>对于碰撞事件，我们要进行监听，实现消失，改变颜色，播放音效的功能。</p>\n<pre><code>/* 监控碰撞中事件 */\n Events.on(engine, &apos;collisionActive&apos;, function(event) {\n    let pairs = event.pairs;\n\n    for(let i = 0; i &lt; pairs.length; i++) {\n        let pair = pairs[i];\n        pair.bodyA.render.fillStyle = &apos;#42f4b6&apos;;\n        pair.bodyB.render.fillStyle = &apos;#41d9f4&apos;;\n    }\n\n    playSound();\n});\n</code></pre><p>操作物体可以在帧前或者帧后，这样才会从下一帧开始应用改变。</p>\n<pre><code>Events.on(engine, &apos;beforeUpdate&apos;, beforeUpdateEvent);\n\nfunction beforeUpdateEvent(event) {\n/* 球球的位置 */\nvar position = ball.position;\n\nif(event.timestamp % 5100 &lt; 50 &amp;&amp; isMovingBall){\n\n    var positionX = position.x,\n        positionY = position.y;\n\n    /* 如果球球的速度小于13，给球球加速 */\n    if(ball.speed &lt; 20) {\n        Body.applyForce(ball, {x: positionX, y: positionY}, {x:  Math.random()/100, y: -Math.random()/100}); \n        console.log(&apos;speed up&apos;);\n    }\n}\n\n/* 球离开区域，游戏失败 */\nif(position.y &gt;= 900) {\n        isMovingBall = false;\n        isOver = true;\n        Composite.remove(world, [box, ball]);\n        Events.off(engine, &apos;afterUpdate&apos;, afterUpdateEvent);\n        Events.off(engine, &apos;beforeUpdate&apos;, beforeUpdateEvent);\n          cover.style.backgroundColor = &apos;rgba(0,0,0,0.7)&apos;;\n    }\n}\n</code></pre><p>每次游戏结束为了让物体回归原位，从世界移除物体及监听的事件，重新添加。</p>\n<p>这样就完成了一个弹球小游戏。</p>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知道你有没有玩过这个打砖块的游戏，我模糊记得是在Windows 98上自带的游戏。</p>\n<p>在当时的我看来，画面极其科幻，游戏效果无与伦比。</p>\n<p>不过我谷歌了一圈也没发现与记忆里一模一样的画面，只找到了这个类似的游戏。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/6535481cly1fo0xe3iloqj20go09eteh.jpg\" alt=\"image\"></p>\n<p>想想那时一个弹球游戏就能玩上整整一天，守着大屁股的显示器，几个伙伴轮流操作，真是让人怀念的年代。</p>\n<p>只是当时太过年幼，不知这是何种难得的幸福。</p>\n<p>技术发展的脚步飞快，JavaScript似乎已经无所不能，索性就实现了一个类似的小游戏。</p>\n<p>虽然物理部分简单，但是既然已有非常完善的物理引擎，何不站在巨人的肩头呢？</p>\n<h2 id=\"matter-js\"><a href=\"#matter-js\" class=\"headerlink\" title=\"matter.js\"></a><a href=\"http://brm.io/matter-js/docs/index.html\" target=\"_blank\" rel=\"external\">matter.js</a></h2><p>一个用JavaScript编写的2D刚体物理引擎。</p>\n<p>在引擎中添加世界，在世界中添加物体，启动引擎，一切就动了起来，是不是让人兴奋？</p>\n<p>可以添加多个世界，可以添加多个物体，物体可以组合，可以添加事件，可以使用自己的渲染器，可以添加插件，全部随心所欲。</p>\n<p><a href=\"http://brm.io/matter-js/demo/#airFriction\" target=\"_blank\" rel=\"external\">这里是官方demo</a></p>\n<p>同所有的引擎一样，在使用前要了解一下概念，比如engine，即引擎。引擎控制着对世界的模拟更新。或者composite，即合成，是物体的集合。一个世界就是一个composite体。等等。</p>\n<p>介绍完了matter.js引擎，下面是游戏部分。</p>\n<p>为了让游戏变得更有意思一点，我让球球每隔一段时间随机改变方向和速度，带来出其不意的惊喜。</p>\n<p><a href=\"http://www.boxgame.top/pinball/\" target=\"_blank\" rel=\"external\">游戏demo</a></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/6535481cly1fo0xekjv13j21e60p1dgm.jpg\" alt=\"\"></p>\n<p>关键</p>\n<p>为了让球球持续运动，要使摩擦力，空气摩擦力，静摩擦力设置为0，为了能更好的反弹，要设置restitution（恢复力？）为1，同时密度要合适。</p>\n<p>为球体设置的属性这样：</p>\n<pre><code>density: 0.001,\nfriction: 0,\nfrictionStatic: 0,\nfrictionAir: 0,\nrestitution: 1\n</code></pre><p>墙体等属性主要是isStatic为true即可，目的是固定在空间上，否则会无限掉落。</p>\n<p>对于碰撞事件，我们要进行监听，实现消失，改变颜色，播放音效的功能。</p>\n<pre><code>/* 监控碰撞中事件 */\n Events.on(engine, &apos;collisionActive&apos;, function(event) {\n    let pairs = event.pairs;\n\n    for(let i = 0; i &lt; pairs.length; i++) {\n        let pair = pairs[i];\n        pair.bodyA.render.fillStyle = &apos;#42f4b6&apos;;\n        pair.bodyB.render.fillStyle = &apos;#41d9f4&apos;;\n    }\n\n    playSound();\n});\n</code></pre><p>操作物体可以在帧前或者帧后，这样才会从下一帧开始应用改变。</p>\n<pre><code>Events.on(engine, &apos;beforeUpdate&apos;, beforeUpdateEvent);\n\nfunction beforeUpdateEvent(event) {\n/* 球球的位置 */\nvar position = ball.position;\n\nif(event.timestamp % 5100 &lt; 50 &amp;&amp; isMovingBall){\n\n    var positionX = position.x,\n        positionY = position.y;\n\n    /* 如果球球的速度小于13，给球球加速 */\n    if(ball.speed &lt; 20) {\n        Body.applyForce(ball, {x: positionX, y: positionY}, {x:  Math.random()/100, y: -Math.random()/100}); \n        console.log(&apos;speed up&apos;);\n    }\n}\n\n/* 球离开区域，游戏失败 */\nif(position.y &gt;= 900) {\n        isMovingBall = false;\n        isOver = true;\n        Composite.remove(world, [box, ball]);\n        Events.off(engine, &apos;afterUpdate&apos;, afterUpdateEvent);\n        Events.off(engine, &apos;beforeUpdate&apos;, beforeUpdateEvent);\n          cover.style.backgroundColor = &apos;rgba(0,0,0,0.7)&apos;;\n    }\n}\n</code></pre><p>每次游戏结束为了让物体回归原位，从世界移除物体及监听的事件，重新添加。</p>\n<p>这样就完成了一个弹球小游戏。</p>\n<p>以上</p>\n"},{"title":"Hexo 安装需要sudo，permission denied","date":"2017-09-08T10:39:55.000Z","_content":"环境是 MacBook Sierra 10.12.6 \n因为之前安装好了node和git，并且一直在使用，安装方式是官网下的pkg，所以跳过Hexo文档里前面的部分直接安装：\n    \t\n    \tnpm install -g hexo-cli\n\n但是会出现premission问题，按照常规方法sudo解决。虽然安装成功，但是出现了可怕的问题，所有跟Hexo有关的操作都必须要用root权限。\n\n后来谷歌了下，原因应该出在了npm上，权限问题的源头。最彻底的解决办法是彻底删除node和npm，全新安装。\n\n    \tsudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}\n    \tsudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules\n    \t\n以上两行命令彻底删除node及npm，然后根据Hexo官网安装node：\n    \t\n    \tcurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\n    \tnvm install stable\n以及Hexo：\n\n    \tnpm install -g hexo-cli\n\n问题解决。\n\n\n    \t\n\n","source":"_posts/Hexo-安装需要sudo，permission-denied.md","raw":"---\ntitle: Hexo 安装需要sudo，permission denied\ndate: 2017-09-08 18:39:55\ntags:\n---\n环境是 MacBook Sierra 10.12.6 \n因为之前安装好了node和git，并且一直在使用，安装方式是官网下的pkg，所以跳过Hexo文档里前面的部分直接安装：\n    \t\n    \tnpm install -g hexo-cli\n\n但是会出现premission问题，按照常规方法sudo解决。虽然安装成功，但是出现了可怕的问题，所有跟Hexo有关的操作都必须要用root权限。\n\n后来谷歌了下，原因应该出在了npm上，权限问题的源头。最彻底的解决办法是彻底删除node和npm，全新安装。\n\n    \tsudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}\n    \tsudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules\n    \t\n以上两行命令彻底删除node及npm，然后根据Hexo官网安装node：\n    \t\n    \tcurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\n    \tnvm install stable\n以及Hexo：\n\n    \tnpm install -g hexo-cli\n\n问题解决。\n\n\n    \t\n\n","slug":"Hexo-安装需要sudo，permission-denied","published":1,"updated":"2018-08-21T00:43:30.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24ldzn0009vcz1p7ylw30e","content":"<p>环境是 MacBook Sierra 10.12.6<br>因为之前安装好了node和git，并且一直在使用，安装方式是官网下的pkg，所以跳过Hexo文档里前面的部分直接安装：</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><p>但是会出现premission问题，按照常规方法sudo解决。虽然安装成功，但是出现了可怕的问题，所有跟Hexo有关的操作都必须要用root权限。</p>\n<p>后来谷歌了下，原因应该出在了npm上，权限问题的源头。最彻底的解决办法是彻底删除node和npm，全新安装。</p>\n<pre><code>sudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}\nsudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules\n</code></pre><p>以上两行命令彻底删除node及npm，然后根据Hexo官网安装node：</p>\n<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\nnvm install stable\n</code></pre><p>以及Hexo：</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><p>问题解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>环境是 MacBook Sierra 10.12.6<br>因为之前安装好了node和git，并且一直在使用，安装方式是官网下的pkg，所以跳过Hexo文档里前面的部分直接安装：</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><p>但是会出现premission问题，按照常规方法sudo解决。虽然安装成功，但是出现了可怕的问题，所有跟Hexo有关的操作都必须要用root权限。</p>\n<p>后来谷歌了下，原因应该出在了npm上，权限问题的源头。最彻底的解决办法是彻底删除node和npm，全新安装。</p>\n<pre><code>sudo rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/{npm*,node*,man1/node*}\nsudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules\n</code></pre><p>以上两行命令彻底删除node及npm，然后根据Hexo官网安装node：</p>\n<pre><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash\nnvm install stable\n</code></pre><p>以及Hexo：</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><p>问题解决。</p>\n"},{"title":"JavaScript各种排序算法","date":"2017-09-30T00:48:13.000Z","_content":"## 快速排序\n\n### 套路：\n\n（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。\n\n（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n\n（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n\n    var quicksort = function(arr){\n\tif(arr.length <= 1){return arr;}\n\n\tvar pivotIndex = Math.floor(arr.length / 2); #取得一个中间值\n\n\tvar pivot = arr.splice(pivotIndex, 1)[0]; #大于这个中间值的放在右边，小于的放在左边。\n\n\tvar left = [];\n\tvar right = [];\n\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] < pivot){\n\t\t\tleft.push(arr[i]);\n\t\t}else{\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\n\treturn quicksort(left).concat([pivot], quicksort(right)); #递归这个函数即可\n\t}\n\n\tarr = [1,6,3,6,8,3,2,1,9,0,5,34,56];\n\n\tconsole.log(quicksort(arr))\n\n## 冒泡排序\n\n### 套路 \n\n遍历要排序的数列，比较相邻两个元素，如果他们的顺序和我们想要的不一致，就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。冒泡排序的做法有小数上浮 或者 大数下沉两种 ，这里只提及大数下沉的实现。\n\n    var popsort = function(arr){\n\tfor(let i = 0; i < arr.length ; i++){\n\t\tfor(let j = 0; j < arr.length - i; j++){\n\t\t\tif(arr[j] > arr[j+1]){\n\t\t\t\tlet temp = arr[j];\n\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\tarr[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\treturn arr;\n\t}\n\n\n## 插入排序\n\n### 套路\n\n* <1>.从第一个元素开始，该元素可以认为已经被排序；\n* <2>.取出下一个元素，在已经排序的元素序列中从后向前扫描；\n* <3>.如果该元素（已排序）大于新元素，将该元素移到下一位置；\n* <4>.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n* <5>.将新元素插入到该位置后；\n* <6>.重复步骤2~5。\n\n    \tvar insertionSort = function(arr){\n\n\t\tfor(let i = 1; i < arr.length; i++){\n\t\tlet key = arr[i];\n\t\tlet j = i - 1;\n\t\twhile(j >= 0 && arr[j] > key){\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\t\tarr[j + 1] = key;\n\t\t}\n\t\t\treturn arr;\n\t\t}","source":"_posts/JavaScript各种排序算法.md","raw":"---\ntitle: JavaScript各种排序算法\ndate: 2017-09-30 08:48:13\ntags:\n---\n## 快速排序\n\n### 套路：\n\n（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。\n\n（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n\n（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n\n\n    var quicksort = function(arr){\n\tif(arr.length <= 1){return arr;}\n\n\tvar pivotIndex = Math.floor(arr.length / 2); #取得一个中间值\n\n\tvar pivot = arr.splice(pivotIndex, 1)[0]; #大于这个中间值的放在右边，小于的放在左边。\n\n\tvar left = [];\n\tvar right = [];\n\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] < pivot){\n\t\t\tleft.push(arr[i]);\n\t\t}else{\n\t\t\tright.push(arr[i]);\n\t\t}\n\t}\n\n\treturn quicksort(left).concat([pivot], quicksort(right)); #递归这个函数即可\n\t}\n\n\tarr = [1,6,3,6,8,3,2,1,9,0,5,34,56];\n\n\tconsole.log(quicksort(arr))\n\n## 冒泡排序\n\n### 套路 \n\n遍历要排序的数列，比较相邻两个元素，如果他们的顺序和我们想要的不一致，就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。冒泡排序的做法有小数上浮 或者 大数下沉两种 ，这里只提及大数下沉的实现。\n\n    var popsort = function(arr){\n\tfor(let i = 0; i < arr.length ; i++){\n\t\tfor(let j = 0; j < arr.length - i; j++){\n\t\t\tif(arr[j] > arr[j+1]){\n\t\t\t\tlet temp = arr[j];\n\t\t\t\tarr[j] = arr[j+1];\n\t\t\t\tarr[j+1] = temp;\n\t\t\t}\n\t\t}\n\t}\n\t\treturn arr;\n\t}\n\n\n## 插入排序\n\n### 套路\n\n* <1>.从第一个元素开始，该元素可以认为已经被排序；\n* <2>.取出下一个元素，在已经排序的元素序列中从后向前扫描；\n* <3>.如果该元素（已排序）大于新元素，将该元素移到下一位置；\n* <4>.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n* <5>.将新元素插入到该位置后；\n* <6>.重复步骤2~5。\n\n    \tvar insertionSort = function(arr){\n\n\t\tfor(let i = 1; i < arr.length; i++){\n\t\tlet key = arr[i];\n\t\tlet j = i - 1;\n\t\twhile(j >= 0 && arr[j] > key){\n\t\t\tarr[j + 1] = arr[j];\n\t\t\tj--;\n\t\t}\n\t\t\tarr[j + 1] = key;\n\t\t}\n\t\t\treturn arr;\n\t\t}","slug":"JavaScript各种排序算法","published":1,"updated":"2018-08-21T00:43:30.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le0x000bvcz1yof7w13h","content":"<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"套路：\"><a href=\"#套路：\" class=\"headerlink\" title=\"套路：\"></a>套路：</h3><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。</p>\n<p>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</p>\n<p>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n<pre><code>var quicksort = function(arr){\nif(arr.length &lt;= 1){return arr;}\n\nvar pivotIndex = Math.floor(arr.length / 2); #取得一个中间值\n\nvar pivot = arr.splice(pivotIndex, 1)[0]; #大于这个中间值的放在右边，小于的放在左边。\n\nvar left = [];\nvar right = [];\n\nfor(let i = 0; i &lt; arr.length; i++){\n    if(arr[i] &lt; pivot){\n        left.push(arr[i]);\n    }else{\n        right.push(arr[i]);\n    }\n}\n\nreturn quicksort(left).concat([pivot], quicksort(right)); #递归这个函数即可\n}\n\narr = [1,6,3,6,8,3,2,1,9,0,5,34,56];\n\nconsole.log(quicksort(arr))\n</code></pre><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"套路\"><a href=\"#套路\" class=\"headerlink\" title=\"套路\"></a>套路</h3><p>遍历要排序的数列，比较相邻两个元素，如果他们的顺序和我们想要的不一致，就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。冒泡排序的做法有小数上浮 或者 大数下沉两种 ，这里只提及大数下沉的实现。</p>\n<pre><code>var popsort = function(arr){\nfor(let i = 0; i &lt; arr.length ; i++){\n    for(let j = 0; j &lt; arr.length - i; j++){\n        if(arr[j] &gt; arr[j+1]){\n            let temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n        }\n    }\n}\n    return arr;\n}\n</code></pre><h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"套路-1\"><a href=\"#套路-1\" class=\"headerlink\" title=\"套路\"></a>套路</h3><ul>\n<li><1>.从第一个元素开始，该元素可以认为已经被排序；</1></li>\n<li><2>.取出下一个元素，在已经排序的元素序列中从后向前扫描；</2></li>\n<li><3>.如果该元素（已排序）大于新元素，将该元素移到下一位置；</3></li>\n<li><4>.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</4></li>\n<li><5>.将新元素插入到该位置后；</5></li>\n<li><p><6>.重复步骤2~5。</6></p>\n<pre><code>var insertionSort = function(arr){\n\nfor(let i = 1; i &lt; arr.length; i++){\nlet key = arr[i];\nlet j = i - 1;\nwhile(j &gt;= 0 &amp;&amp; arr[j] &gt; key){\n    arr[j + 1] = arr[j];\n    j--;\n}\n    arr[j + 1] = key;\n}\n    return arr;\n}\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"套路：\"><a href=\"#套路：\" class=\"headerlink\" title=\"套路：\"></a>套路：</h3><p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。</p>\n<p>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</p>\n<p>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>\n<pre><code>var quicksort = function(arr){\nif(arr.length &lt;= 1){return arr;}\n\nvar pivotIndex = Math.floor(arr.length / 2); #取得一个中间值\n\nvar pivot = arr.splice(pivotIndex, 1)[0]; #大于这个中间值的放在右边，小于的放在左边。\n\nvar left = [];\nvar right = [];\n\nfor(let i = 0; i &lt; arr.length; i++){\n    if(arr[i] &lt; pivot){\n        left.push(arr[i]);\n    }else{\n        right.push(arr[i]);\n    }\n}\n\nreturn quicksort(left).concat([pivot], quicksort(right)); #递归这个函数即可\n}\n\narr = [1,6,3,6,8,3,2,1,9,0,5,34,56];\n\nconsole.log(quicksort(arr))\n</code></pre><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"套路\"><a href=\"#套路\" class=\"headerlink\" title=\"套路\"></a>套路</h3><p>遍历要排序的数列，比较相邻两个元素，如果他们的顺序和我们想要的不一致，就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。冒泡排序的做法有小数上浮 或者 大数下沉两种 ，这里只提及大数下沉的实现。</p>\n<pre><code>var popsort = function(arr){\nfor(let i = 0; i &lt; arr.length ; i++){\n    for(let j = 0; j &lt; arr.length - i; j++){\n        if(arr[j] &gt; arr[j+1]){\n            let temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n        }\n    }\n}\n    return arr;\n}\n</code></pre><h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"套路-1\"><a href=\"#套路-1\" class=\"headerlink\" title=\"套路\"></a>套路</h3><ul>\n<li><1>.从第一个元素开始，该元素可以认为已经被排序；</1></li>\n<li><2>.取出下一个元素，在已经排序的元素序列中从后向前扫描；</2></li>\n<li><3>.如果该元素（已排序）大于新元素，将该元素移到下一位置；</3></li>\n<li><4>.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</4></li>\n<li><5>.将新元素插入到该位置后；</5></li>\n<li><p><6>.重复步骤2~5。</6></p>\n<pre><code>var insertionSort = function(arr){\n\nfor(let i = 1; i &lt; arr.length; i++){\nlet key = arr[i];\nlet j = i - 1;\nwhile(j &gt;= 0 &amp;&amp; arr[j] &gt; key){\n    arr[j + 1] = arr[j];\n    j--;\n}\n    arr[j + 1] = key;\n}\n    return arr;\n}\n</code></pre></li>\n</ul>\n"},{"title":"Promise的执行顺序","date":"2018-02-14T00:23:03.000Z","_content":"\n下面这个问题，考虑一下输出结果是怎样的\n\n    new Promise(resolve => {\n    \tresolve(1);\n    \tPromise.resolve().then(() => console.log(2));\n    \tconsole.log(4);\n\t}).then( t => console.log(t) );\n\tconsole.log(3);\n\n正确的结果为\n\n\t4 3 2 1\n\t\nMDN中有如下解释：\n\n> new Promise( /* executor */ function(resolve, reject) { ... } );\n> \n> The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). \n\n即\n\n> 在New一个Promiese的时候，其中的executor函数立即执行，传递resolve函数和reject函数（executor会在Promise构造函数返回构造的对象前调用）。\n\n第一行：代码从第一行开始运行，resolve内代码立即执行。\n\n第二行：resolve(1) 作为promise的resolve，在then函数中赋值1给t，没有输出。\n\n第三行：另一个promise，异步处理，代码向第四行继续执行。没有输出。\n\n第四行：输出4，这是第一个输出。\n\n第五行：同步执行，输出 3\n\n第二个promise输出 2\n\n第一个promise的resolve执行完毕，then输出 1","source":"_posts/Promise的执行顺序.md","raw":"---\ntitle: Promise的执行顺序\ndate: 2018-02-14 08:23:03\ntags: 前端\n---\n\n下面这个问题，考虑一下输出结果是怎样的\n\n    new Promise(resolve => {\n    \tresolve(1);\n    \tPromise.resolve().then(() => console.log(2));\n    \tconsole.log(4);\n\t}).then( t => console.log(t) );\n\tconsole.log(3);\n\n正确的结果为\n\n\t4 3 2 1\n\t\nMDN中有如下解释：\n\n> new Promise( /* executor */ function(resolve, reject) { ... } );\n> \n> The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). \n\n即\n\n> 在New一个Promiese的时候，其中的executor函数立即执行，传递resolve函数和reject函数（executor会在Promise构造函数返回构造的对象前调用）。\n\n第一行：代码从第一行开始运行，resolve内代码立即执行。\n\n第二行：resolve(1) 作为promise的resolve，在then函数中赋值1给t，没有输出。\n\n第三行：另一个promise，异步处理，代码向第四行继续执行。没有输出。\n\n第四行：输出4，这是第一个输出。\n\n第五行：同步执行，输出 3\n\n第二个promise输出 2\n\n第一个promise的resolve执行完毕，then输出 1","slug":"Promise的执行顺序","published":1,"updated":"2018-08-21T00:43:30.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le11000cvcz1t3m0edxe","content":"<p>下面这个问题，考虑一下输出结果是怎样的</p>\n<pre><code>new Promise(resolve =&gt; {\n    resolve(1);\n    Promise.resolve().then(() =&gt; console.log(2));\n    console.log(4);\n}).then( t =&gt; console.log(t) );\nconsole.log(3);\n</code></pre><p>正确的结果为</p>\n<pre><code>4 3 2 1\n</code></pre><p>MDN中有如下解释：</p>\n<blockquote>\n<p>new Promise( /<em> executor </em>/ function(resolve, reject) { … } );</p>\n<p>The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). </p>\n</blockquote>\n<p>即</p>\n<blockquote>\n<p>在New一个Promiese的时候，其中的executor函数立即执行，传递resolve函数和reject函数（executor会在Promise构造函数返回构造的对象前调用）。</p>\n</blockquote>\n<p>第一行：代码从第一行开始运行，resolve内代码立即执行。</p>\n<p>第二行：resolve(1) 作为promise的resolve，在then函数中赋值1给t，没有输出。</p>\n<p>第三行：另一个promise，异步处理，代码向第四行继续执行。没有输出。</p>\n<p>第四行：输出4，这是第一个输出。</p>\n<p>第五行：同步执行，输出 3</p>\n<p>第二个promise输出 2</p>\n<p>第一个promise的resolve执行完毕，then输出 1</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下面这个问题，考虑一下输出结果是怎样的</p>\n<pre><code>new Promise(resolve =&gt; {\n    resolve(1);\n    Promise.resolve().then(() =&gt; console.log(2));\n    console.log(4);\n}).then( t =&gt; console.log(t) );\nconsole.log(3);\n</code></pre><p>正确的结果为</p>\n<pre><code>4 3 2 1\n</code></pre><p>MDN中有如下解释：</p>\n<blockquote>\n<p>new Promise( /<em> executor </em>/ function(resolve, reject) { … } );</p>\n<p>The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). </p>\n</blockquote>\n<p>即</p>\n<blockquote>\n<p>在New一个Promiese的时候，其中的executor函数立即执行，传递resolve函数和reject函数（executor会在Promise构造函数返回构造的对象前调用）。</p>\n</blockquote>\n<p>第一行：代码从第一行开始运行，resolve内代码立即执行。</p>\n<p>第二行：resolve(1) 作为promise的resolve，在then函数中赋值1给t，没有输出。</p>\n<p>第三行：另一个promise，异步处理，代码向第四行继续执行。没有输出。</p>\n<p>第四行：输出4，这是第一个输出。</p>\n<p>第五行：同步执行，输出 3</p>\n<p>第二个promise输出 2</p>\n<p>第一个promise的resolve执行完毕，then输出 1</p>\n"},{"title":"ccap安装失败","date":"2017-09-13T05:59:07.000Z","_content":"ccap是一个nodejs用的验证码模块，centos7下安装报错\n\n    `sh \"-c\" \"node-gyp rebuild\"` failed\n\n仔细看了下依赖\n\n    npm install ccap (new version, need node 0.12.x and 4.x.x and 6.x.x, on linux need gcc v4.8+)\n    \n原来需要gcc\n\n    sudo yum install gcc gcc-c++\n    \n之后安装正确版本nodejs\n\n然后安装node-gyp\n\n    cnpm install node-gyp -g\n    \nccap\n\n\tcnpm install ccap\n\t\n版本匹配很重要","source":"_posts/ccap安装失败.md","raw":"---\ntitle: ccap安装失败\ndate: 2017-09-13 13:59:07\ntags:\n---\nccap是一个nodejs用的验证码模块，centos7下安装报错\n\n    `sh \"-c\" \"node-gyp rebuild\"` failed\n\n仔细看了下依赖\n\n    npm install ccap (new version, need node 0.12.x and 4.x.x and 6.x.x, on linux need gcc v4.8+)\n    \n原来需要gcc\n\n    sudo yum install gcc gcc-c++\n    \n之后安装正确版本nodejs\n\n然后安装node-gyp\n\n    cnpm install node-gyp -g\n    \nccap\n\n\tcnpm install ccap\n\t\n版本匹配很重要","slug":"ccap安装失败","published":1,"updated":"2018-08-21T00:43:30.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le18000dvcz1sem57tf9","content":"<p>ccap是一个nodejs用的验证码模块，centos7下安装报错</p>\n<pre><code>`sh &quot;-c&quot; &quot;node-gyp rebuild&quot;` failed\n</code></pre><p>仔细看了下依赖</p>\n<pre><code>npm install ccap (new version, need node 0.12.x and 4.x.x and 6.x.x, on linux need gcc v4.8+)\n</code></pre><p>原来需要gcc</p>\n<pre><code>sudo yum install gcc gcc-c++\n</code></pre><p>之后安装正确版本nodejs</p>\n<p>然后安装node-gyp</p>\n<pre><code>cnpm install node-gyp -g\n</code></pre><p>ccap</p>\n<pre><code>cnpm install ccap\n</code></pre><p>版本匹配很重要</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ccap是一个nodejs用的验证码模块，centos7下安装报错</p>\n<pre><code>`sh &quot;-c&quot; &quot;node-gyp rebuild&quot;` failed\n</code></pre><p>仔细看了下依赖</p>\n<pre><code>npm install ccap (new version, need node 0.12.x and 4.x.x and 6.x.x, on linux need gcc v4.8+)\n</code></pre><p>原来需要gcc</p>\n<pre><code>sudo yum install gcc gcc-c++\n</code></pre><p>之后安装正确版本nodejs</p>\n<p>然后安装node-gyp</p>\n<pre><code>cnpm install node-gyp -g\n</code></pre><p>ccap</p>\n<pre><code>cnpm install ccap\n</code></pre><p>版本匹配很重要</p>\n"},{"title":"github新手指南","date":"2017-12-24T07:48:55.000Z","_content":"\n# 目标\n\n本地项目文件夹推送到自己的github\n\n# 方法\n### （1） 先从github创建一个空的仓库\n\n先从github创建一个空的仓库，并复制链接地址\n\n### （2）初始化本地仓库，并提交内容到本地\n\n1. touch README.md\n2. git init\n3. git add .\n4. git commit -m ‘提交说明’\n\n### （3）连接到远程仓库，并将代码同步到远程仓库\n\n1. git remote add origin 远程仓库地址\n2. git push -u origin master\n\n### （4）继续修改本地代码，然后提交并推送到github\n\n1. git add .\n2. git commit -m ‘提交说明’\n3. git pull\n4. git push\n\n[转载地址及详细内容](https://www.jianshu.com/p/6f3324e4f335)\n \n ","source":"_posts/github新手指南.md","raw":"---\ntitle: github新手指南\ndate: 2017-12-24 15:48:55\ntags: 分享\n---\n\n# 目标\n\n本地项目文件夹推送到自己的github\n\n# 方法\n### （1） 先从github创建一个空的仓库\n\n先从github创建一个空的仓库，并复制链接地址\n\n### （2）初始化本地仓库，并提交内容到本地\n\n1. touch README.md\n2. git init\n3. git add .\n4. git commit -m ‘提交说明’\n\n### （3）连接到远程仓库，并将代码同步到远程仓库\n\n1. git remote add origin 远程仓库地址\n2. git push -u origin master\n\n### （4）继续修改本地代码，然后提交并推送到github\n\n1. git add .\n2. git commit -m ‘提交说明’\n3. git pull\n4. git push\n\n[转载地址及详细内容](https://www.jianshu.com/p/6f3324e4f335)\n \n ","slug":"github新手指南","published":1,"updated":"2018-08-21T00:43:30.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le1d000fvcz1fzjbrxue","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>本地项目文件夹推送到自己的github</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h3 id=\"（1）-先从github创建一个空的仓库\"><a href=\"#（1）-先从github创建一个空的仓库\" class=\"headerlink\" title=\"（1） 先从github创建一个空的仓库\"></a>（1） 先从github创建一个空的仓库</h3><p>先从github创建一个空的仓库，并复制链接地址</p>\n<h3 id=\"（2）初始化本地仓库，并提交内容到本地\"><a href=\"#（2）初始化本地仓库，并提交内容到本地\" class=\"headerlink\" title=\"（2）初始化本地仓库，并提交内容到本地\"></a>（2）初始化本地仓库，并提交内容到本地</h3><ol>\n<li>touch README.md</li>\n<li>git init</li>\n<li>git add .</li>\n<li>git commit -m ‘提交说明’</li>\n</ol>\n<h3 id=\"（3）连接到远程仓库，并将代码同步到远程仓库\"><a href=\"#（3）连接到远程仓库，并将代码同步到远程仓库\" class=\"headerlink\" title=\"（3）连接到远程仓库，并将代码同步到远程仓库\"></a>（3）连接到远程仓库，并将代码同步到远程仓库</h3><ol>\n<li>git remote add origin 远程仓库地址</li>\n<li>git push -u origin master</li>\n</ol>\n<h3 id=\"（4）继续修改本地代码，然后提交并推送到github\"><a href=\"#（4）继续修改本地代码，然后提交并推送到github\" class=\"headerlink\" title=\"（4）继续修改本地代码，然后提交并推送到github\"></a>（4）继续修改本地代码，然后提交并推送到github</h3><ol>\n<li>git add .</li>\n<li>git commit -m ‘提交说明’</li>\n<li>git pull</li>\n<li>git push</li>\n</ol>\n<p><a href=\"https://www.jianshu.com/p/6f3324e4f335\" target=\"_blank\" rel=\"external\">转载地址及详细内容</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><p>本地项目文件夹推送到自己的github</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h3 id=\"（1）-先从github创建一个空的仓库\"><a href=\"#（1）-先从github创建一个空的仓库\" class=\"headerlink\" title=\"（1） 先从github创建一个空的仓库\"></a>（1） 先从github创建一个空的仓库</h3><p>先从github创建一个空的仓库，并复制链接地址</p>\n<h3 id=\"（2）初始化本地仓库，并提交内容到本地\"><a href=\"#（2）初始化本地仓库，并提交内容到本地\" class=\"headerlink\" title=\"（2）初始化本地仓库，并提交内容到本地\"></a>（2）初始化本地仓库，并提交内容到本地</h3><ol>\n<li>touch README.md</li>\n<li>git init</li>\n<li>git add .</li>\n<li>git commit -m ‘提交说明’</li>\n</ol>\n<h3 id=\"（3）连接到远程仓库，并将代码同步到远程仓库\"><a href=\"#（3）连接到远程仓库，并将代码同步到远程仓库\" class=\"headerlink\" title=\"（3）连接到远程仓库，并将代码同步到远程仓库\"></a>（3）连接到远程仓库，并将代码同步到远程仓库</h3><ol>\n<li>git remote add origin 远程仓库地址</li>\n<li>git push -u origin master</li>\n</ol>\n<h3 id=\"（4）继续修改本地代码，然后提交并推送到github\"><a href=\"#（4）继续修改本地代码，然后提交并推送到github\" class=\"headerlink\" title=\"（4）继续修改本地代码，然后提交并推送到github\"></a>（4）继续修改本地代码，然后提交并推送到github</h3><ol>\n<li>git add .</li>\n<li>git commit -m ‘提交说明’</li>\n<li>git pull</li>\n<li>git push</li>\n</ol>\n<p><a href=\"https://www.jianshu.com/p/6f3324e4f335\" target=\"_blank\" rel=\"external\">转载地址及详细内容</a></p>\n"},{"title":"https发送post请求以及nodejs处理post","date":"2017-09-14T05:45:23.000Z","_content":"### 客户端发送post请求：\n\n    sendPost: function(){\n\t\t\t\tvar querystring = require('querystring');\n\t\t\t\tvar httpRequest;\n\n\t\t\t\tvar bodyString = {\n\t\t\t\t\tname: 'me',\n\t\t\t\t\tid: 2223,\n\t\t\t\t\tpassword: 'indinf'\n\t\t\t\t};\n\n\t\t\t\tvar postStr = querystring.stringify(bodyString);\n\n\t\t\t\thttpRequest = new XMLHttpRequest();\n\t\t\t\tif(!httpRequest) {\n\t\t\t\t\talert('这里有一点错误！');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\thttpRequest.onreadystatechange = function(){\n\t\t\t\t\tif(httpRequest.readyState === XMLHttpRequest.DONE){\n\t\t\t\t\t\tif(httpRequest.status === 200) {\n\t\t\t\t\t\t\talert(httpRequest.responseText);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\talert('呀！网络错误！');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\n\t\t\t\thttpRequest.open('POST','https://example.com/');\n\t\t\t\thttpRequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\t\t\t\thttpRequest.send(postStr);\n\t}\n\t\n### Node.js端接收处理post请求\n\n    \tconst https = require('https');\n\t\tconst fs = require('fs');\n\n\t\tconst options = {\n\t\t\tkey: fs.readFileSync('key/example.key'), //这里是你的key和证书的位置\n\t\t\tcert: fs.readFileSync('key/example.crt')\n\t\t};\n\n\t\thttps.createServer(options,(req, res) => {\n\t\tres.setHeader('Access-Control-Allow-Origin','*');\n\n\t\tif(req.method == 'POST') {\n\t\t\tconsole.log(\"POST\");\n\t\t\tvar body = \"\";\n\t\t\treq.on('data', function(data) {\n\t\t\t\tbody += data;\n\t\t\t})\n\t\t\treq.on('end', function(){\n\t\t\t\tconsole.log(body);\n\t\t\t})\n\t\t\tres.writeHead(200,{'Content-Type': 'text/html'});\n\t\t\tres.end('post received');\n\t\t}else{\n\t\t\tconsole.log('GET');\n\t\t\tres.writeHead(200,{'Content-Type':'text/html'});\n\t\t\tres.end('hello');\n\t\t}\n\n\t\t}).listen(2323);\n\n\t\tconsole.log('Server running at https://www.example.cn:2323/');\n\t\t\n\n","source":"_posts/https发送post请求以及nodejs处理post.md","raw":"---\ntitle: https发送post请求以及nodejs处理post\ndate: 2017-09-14 13:45:23\ntags:\n---\n### 客户端发送post请求：\n\n    sendPost: function(){\n\t\t\t\tvar querystring = require('querystring');\n\t\t\t\tvar httpRequest;\n\n\t\t\t\tvar bodyString = {\n\t\t\t\t\tname: 'me',\n\t\t\t\t\tid: 2223,\n\t\t\t\t\tpassword: 'indinf'\n\t\t\t\t};\n\n\t\t\t\tvar postStr = querystring.stringify(bodyString);\n\n\t\t\t\thttpRequest = new XMLHttpRequest();\n\t\t\t\tif(!httpRequest) {\n\t\t\t\t\talert('这里有一点错误！');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\thttpRequest.onreadystatechange = function(){\n\t\t\t\t\tif(httpRequest.readyState === XMLHttpRequest.DONE){\n\t\t\t\t\t\tif(httpRequest.status === 200) {\n\t\t\t\t\t\t\talert(httpRequest.responseText);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\talert('呀！网络错误！');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\n\t\t\t\thttpRequest.open('POST','https://example.com/');\n\t\t\t\thttpRequest.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\t\t\t\thttpRequest.send(postStr);\n\t}\n\t\n### Node.js端接收处理post请求\n\n    \tconst https = require('https');\n\t\tconst fs = require('fs');\n\n\t\tconst options = {\n\t\t\tkey: fs.readFileSync('key/example.key'), //这里是你的key和证书的位置\n\t\t\tcert: fs.readFileSync('key/example.crt')\n\t\t};\n\n\t\thttps.createServer(options,(req, res) => {\n\t\tres.setHeader('Access-Control-Allow-Origin','*');\n\n\t\tif(req.method == 'POST') {\n\t\t\tconsole.log(\"POST\");\n\t\t\tvar body = \"\";\n\t\t\treq.on('data', function(data) {\n\t\t\t\tbody += data;\n\t\t\t})\n\t\t\treq.on('end', function(){\n\t\t\t\tconsole.log(body);\n\t\t\t})\n\t\t\tres.writeHead(200,{'Content-Type': 'text/html'});\n\t\t\tres.end('post received');\n\t\t}else{\n\t\t\tconsole.log('GET');\n\t\t\tres.writeHead(200,{'Content-Type':'text/html'});\n\t\t\tres.end('hello');\n\t\t}\n\n\t\t}).listen(2323);\n\n\t\tconsole.log('Server running at https://www.example.cn:2323/');\n\t\t\n\n","slug":"https发送post请求以及nodejs处理post","published":1,"updated":"2018-08-21T00:43:30.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le1h000gvcz1wgnq1qnc","content":"<h3 id=\"客户端发送post请求：\"><a href=\"#客户端发送post请求：\" class=\"headerlink\" title=\"客户端发送post请求：\"></a>客户端发送post请求：</h3><pre><code>sendPost: function(){\n            var querystring = require(&apos;querystring&apos;);\n            var httpRequest;\n\n            var bodyString = {\n                name: &apos;me&apos;,\n                id: 2223,\n                password: &apos;indinf&apos;\n            };\n\n            var postStr = querystring.stringify(bodyString);\n\n            httpRequest = new XMLHttpRequest();\n            if(!httpRequest) {\n                alert(&apos;这里有一点错误！&apos;);\n                return false;\n            }\n            httpRequest.onreadystatechange = function(){\n                if(httpRequest.readyState === XMLHttpRequest.DONE){\n                    if(httpRequest.status === 200) {\n                        alert(httpRequest.responseText);\n                    }else{\n                        alert(&apos;呀！网络错误！&apos;);\n                    }\n                }\n            };\n\n            httpRequest.open(&apos;POST&apos;,&apos;https://example.com/&apos;);\n            httpRequest.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            httpRequest.send(postStr);\n}\n</code></pre><h3 id=\"Node-js端接收处理post请求\"><a href=\"#Node-js端接收处理post请求\" class=\"headerlink\" title=\"Node.js端接收处理post请求\"></a>Node.js端接收处理post请求</h3><pre><code>const https = require(&apos;https&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n    key: fs.readFileSync(&apos;key/example.key&apos;), //这里是你的key和证书的位置\n    cert: fs.readFileSync(&apos;key/example.crt&apos;)\n};\n\nhttps.createServer(options,(req, res) =&gt; {\nres.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;*&apos;);\n\nif(req.method == &apos;POST&apos;) {\n    console.log(&quot;POST&quot;);\n    var body = &quot;&quot;;\n    req.on(&apos;data&apos;, function(data) {\n        body += data;\n    })\n    req.on(&apos;end&apos;, function(){\n        console.log(body);\n    })\n    res.writeHead(200,{&apos;Content-Type&apos;: &apos;text/html&apos;});\n    res.end(&apos;post received&apos;);\n}else{\n    console.log(&apos;GET&apos;);\n    res.writeHead(200,{&apos;Content-Type&apos;:&apos;text/html&apos;});\n    res.end(&apos;hello&apos;);\n}\n\n}).listen(2323);\n\nconsole.log(&apos;Server running at https://www.example.cn:2323/&apos;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"客户端发送post请求：\"><a href=\"#客户端发送post请求：\" class=\"headerlink\" title=\"客户端发送post请求：\"></a>客户端发送post请求：</h3><pre><code>sendPost: function(){\n            var querystring = require(&apos;querystring&apos;);\n            var httpRequest;\n\n            var bodyString = {\n                name: &apos;me&apos;,\n                id: 2223,\n                password: &apos;indinf&apos;\n            };\n\n            var postStr = querystring.stringify(bodyString);\n\n            httpRequest = new XMLHttpRequest();\n            if(!httpRequest) {\n                alert(&apos;这里有一点错误！&apos;);\n                return false;\n            }\n            httpRequest.onreadystatechange = function(){\n                if(httpRequest.readyState === XMLHttpRequest.DONE){\n                    if(httpRequest.status === 200) {\n                        alert(httpRequest.responseText);\n                    }else{\n                        alert(&apos;呀！网络错误！&apos;);\n                    }\n                }\n            };\n\n            httpRequest.open(&apos;POST&apos;,&apos;https://example.com/&apos;);\n            httpRequest.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            httpRequest.send(postStr);\n}\n</code></pre><h3 id=\"Node-js端接收处理post请求\"><a href=\"#Node-js端接收处理post请求\" class=\"headerlink\" title=\"Node.js端接收处理post请求\"></a>Node.js端接收处理post请求</h3><pre><code>const https = require(&apos;https&apos;);\nconst fs = require(&apos;fs&apos;);\n\nconst options = {\n    key: fs.readFileSync(&apos;key/example.key&apos;), //这里是你的key和证书的位置\n    cert: fs.readFileSync(&apos;key/example.crt&apos;)\n};\n\nhttps.createServer(options,(req, res) =&gt; {\nres.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;*&apos;);\n\nif(req.method == &apos;POST&apos;) {\n    console.log(&quot;POST&quot;);\n    var body = &quot;&quot;;\n    req.on(&apos;data&apos;, function(data) {\n        body += data;\n    })\n    req.on(&apos;end&apos;, function(){\n        console.log(body);\n    })\n    res.writeHead(200,{&apos;Content-Type&apos;: &apos;text/html&apos;});\n    res.end(&apos;post received&apos;);\n}else{\n    console.log(&apos;GET&apos;);\n    res.writeHead(200,{&apos;Content-Type&apos;:&apos;text/html&apos;});\n    res.end(&apos;hello&apos;);\n}\n\n}).listen(2323);\n\nconsole.log(&apos;Server running at https://www.example.cn:2323/&apos;);\n</code></pre>"},{"title":"javascript 迭代方法","date":"2017-09-20T02:10:03.000Z","_content":"\n#### ES5中定义了5种迭代方法：\nevery() filter() forEach() map() some()\n\n每个方法都接受两个参数：要在每一项上运行的函数和（可选）运行该函数的作用域对象（影响this的值）。\n\n传入这些方法中的函数接受三个参数：数组项的值、该项在数组中的位置、数组对象本身。\n\nevery():对数组中的每一项运行函数，如果每一项都反回true，则返回true。\n\nfilter()：对数组中的每一项运行函数，返回该函数会返回true的项组成的数组。\n\nforEach(): 对数组中的每一项运行函数，无返回。\n\nmap(): 对数组中的每一项运行函数，返回每次函数调用结果组成的数组。\n\nsome():对数组中的每一项运行函数，如果该函数对人一项返回true，则返回true。\n\n以上方法都不会修改数组中包含的值。\n\n### for-of是ES6中的新语法，用来配合迭代器。\n\n    for (var key of table) {\n \t\t console.log(key + ' = ' + table[key]);\n\t }\n\n### 迭代器\n\n    table[Symbol.iterator] = function () {\n  \t\tvar keys = Object.keys(this).sort();\n  \t\tvar index = 0;\n\n  \t\treturn {\n    \t\tnext: function () {\n      \t\t\treturn {\n        \t\t\tvalue: keys[index], done: index++ >= keys.length\n      \t\t\t\t};\n    \t\t\t}\n  \t\t\t}\n\t\t}\n\t\n其实并不是很懂2333","source":"_posts/javascript-迭代方法.md","raw":"---\ntitle: javascript 迭代方法\ndate: 2017-09-20 10:10:03\ntags:\n---\n\n#### ES5中定义了5种迭代方法：\nevery() filter() forEach() map() some()\n\n每个方法都接受两个参数：要在每一项上运行的函数和（可选）运行该函数的作用域对象（影响this的值）。\n\n传入这些方法中的函数接受三个参数：数组项的值、该项在数组中的位置、数组对象本身。\n\nevery():对数组中的每一项运行函数，如果每一项都反回true，则返回true。\n\nfilter()：对数组中的每一项运行函数，返回该函数会返回true的项组成的数组。\n\nforEach(): 对数组中的每一项运行函数，无返回。\n\nmap(): 对数组中的每一项运行函数，返回每次函数调用结果组成的数组。\n\nsome():对数组中的每一项运行函数，如果该函数对人一项返回true，则返回true。\n\n以上方法都不会修改数组中包含的值。\n\n### for-of是ES6中的新语法，用来配合迭代器。\n\n    for (var key of table) {\n \t\t console.log(key + ' = ' + table[key]);\n\t }\n\n### 迭代器\n\n    table[Symbol.iterator] = function () {\n  \t\tvar keys = Object.keys(this).sort();\n  \t\tvar index = 0;\n\n  \t\treturn {\n    \t\tnext: function () {\n      \t\t\treturn {\n        \t\t\tvalue: keys[index], done: index++ >= keys.length\n      \t\t\t\t};\n    \t\t\t}\n  \t\t\t}\n\t\t}\n\t\n其实并不是很懂2333","slug":"javascript-迭代方法","published":1,"updated":"2018-08-21T00:43:30.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le1n000ivcz12eo0to7n","content":"<h4 id=\"ES5中定义了5种迭代方法：\"><a href=\"#ES5中定义了5种迭代方法：\" class=\"headerlink\" title=\"ES5中定义了5种迭代方法：\"></a>ES5中定义了5种迭代方法：</h4><p>every() filter() forEach() map() some()</p>\n<p>每个方法都接受两个参数：要在每一项上运行的函数和（可选）运行该函数的作用域对象（影响this的值）。</p>\n<p>传入这些方法中的函数接受三个参数：数组项的值、该项在数组中的位置、数组对象本身。</p>\n<p>every():对数组中的每一项运行函数，如果每一项都反回true，则返回true。</p>\n<p>filter()：对数组中的每一项运行函数，返回该函数会返回true的项组成的数组。</p>\n<p>forEach(): 对数组中的每一项运行函数，无返回。</p>\n<p>map(): 对数组中的每一项运行函数，返回每次函数调用结果组成的数组。</p>\n<p>some():对数组中的每一项运行函数，如果该函数对人一项返回true，则返回true。</p>\n<p>以上方法都不会修改数组中包含的值。</p>\n<h3 id=\"for-of是ES6中的新语法，用来配合迭代器。\"><a href=\"#for-of是ES6中的新语法，用来配合迭代器。\" class=\"headerlink\" title=\"for-of是ES6中的新语法，用来配合迭代器。\"></a>for-of是ES6中的新语法，用来配合迭代器。</h3><pre><code>for (var key of table) {\n      console.log(key + &apos; = &apos; + table[key]);\n }\n</code></pre><h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><pre><code>table[Symbol.iterator] = function () {\n      var keys = Object.keys(this).sort();\n      var index = 0;\n\n      return {\n        next: function () {\n              return {\n                value: keys[index], done: index++ &gt;= keys.length\n                  };\n            }\n          }\n    }\n</code></pre><p>其实并不是很懂2333</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"ES5中定义了5种迭代方法：\"><a href=\"#ES5中定义了5种迭代方法：\" class=\"headerlink\" title=\"ES5中定义了5种迭代方法：\"></a>ES5中定义了5种迭代方法：</h4><p>every() filter() forEach() map() some()</p>\n<p>每个方法都接受两个参数：要在每一项上运行的函数和（可选）运行该函数的作用域对象（影响this的值）。</p>\n<p>传入这些方法中的函数接受三个参数：数组项的值、该项在数组中的位置、数组对象本身。</p>\n<p>every():对数组中的每一项运行函数，如果每一项都反回true，则返回true。</p>\n<p>filter()：对数组中的每一项运行函数，返回该函数会返回true的项组成的数组。</p>\n<p>forEach(): 对数组中的每一项运行函数，无返回。</p>\n<p>map(): 对数组中的每一项运行函数，返回每次函数调用结果组成的数组。</p>\n<p>some():对数组中的每一项运行函数，如果该函数对人一项返回true，则返回true。</p>\n<p>以上方法都不会修改数组中包含的值。</p>\n<h3 id=\"for-of是ES6中的新语法，用来配合迭代器。\"><a href=\"#for-of是ES6中的新语法，用来配合迭代器。\" class=\"headerlink\" title=\"for-of是ES6中的新语法，用来配合迭代器。\"></a>for-of是ES6中的新语法，用来配合迭代器。</h3><pre><code>for (var key of table) {\n      console.log(key + &apos; = &apos; + table[key]);\n }\n</code></pre><h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><pre><code>table[Symbol.iterator] = function () {\n      var keys = Object.keys(this).sort();\n      var index = 0;\n\n      return {\n        next: function () {\n              return {\n                value: keys[index], done: index++ &gt;= keys.length\n                  };\n            }\n          }\n    }\n</code></pre><p>其实并不是很懂2333</p>\n"},{"title":"js游戏-无尽的路","date":"2018-02-22T02:05:26.000Z","_content":"### [在线地址](http://www.boxgame.top/jumpman/)\n\n一个用Matter.js完成的跳跃小游戏。无尽的路，永不停歇的跳跃。\n\n![截图](http://ww1.sinaimg.cn/mw690/6535481cly1fop0awf1k3j21yy0ysn2d.jpg)\n\n利用matter.js引擎模拟了重力，使跳跃的动作更加真实。自己手动画了一些奔跑的动作，其实一共就只有4帧。js代码一共500行左右。\n","source":"_posts/js游戏-无尽的路.md","raw":"---\ntitle: js游戏-无尽的路\ndate: 2018-02-22 10:05:26\ntags: 前端\n---\n### [在线地址](http://www.boxgame.top/jumpman/)\n\n一个用Matter.js完成的跳跃小游戏。无尽的路，永不停歇的跳跃。\n\n![截图](http://ww1.sinaimg.cn/mw690/6535481cly1fop0awf1k3j21yy0ysn2d.jpg)\n\n利用matter.js引擎模拟了重力，使跳跃的动作更加真实。自己手动画了一些奔跑的动作，其实一共就只有4帧。js代码一共500行左右。\n","slug":"js游戏-无尽的路","published":1,"updated":"2018-08-21T00:43:30.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le1r000jvcz1492t0jup","content":"<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a><a href=\"http://www.boxgame.top/jumpman/\" target=\"_blank\" rel=\"external\">在线地址</a></h3><p>一个用Matter.js完成的跳跃小游戏。无尽的路，永不停歇的跳跃。</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/6535481cly1fop0awf1k3j21yy0ysn2d.jpg\" alt=\"截图\"></p>\n<p>利用matter.js引擎模拟了重力，使跳跃的动作更加真实。自己手动画了一些奔跑的动作，其实一共就只有4帧。js代码一共500行左右。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"在线地址\"><a href=\"#在线地址\" class=\"headerlink\" title=\"在线地址\"></a><a href=\"http://www.boxgame.top/jumpman/\" target=\"_blank\" rel=\"external\">在线地址</a></h3><p>一个用Matter.js完成的跳跃小游戏。无尽的路，永不停歇的跳跃。</p>\n<p><img src=\"http://ww1.sinaimg.cn/mw690/6535481cly1fop0awf1k3j21yy0ysn2d.jpg\" alt=\"截图\"></p>\n<p>利用matter.js引擎模拟了重力，使跳跃的动作更加真实。自己手动画了一些奔跑的动作，其实一共就只有4帧。js代码一共500行左右。</p>\n"},{"title":"Kong网关入门","date":"2018-09-18T10:10:09.000Z","_content":"\n## 前言\n\n一个典型的使用Kong网关的请求遵循以下流程。\n\n![图解](p1.png)\n\n每一个请求API的访问首先会访问Kong，之后被代理到最终的API上。在请求和响应中间，Kong可以根据用户的需要执行很多插件，使其功能更加强大。Kong可以有效的成为每一个API请求的入口。\n\n## 使用\n\n当Kong成功启动以后，默认的，Kong会监听以下端口:\n\n:8000  Kong监听来自HTTP请求的端口，转发到上游服务。\n:8443  Kong监听来自HTTPS请求的端口，除了只接受HTTPS请求外，其他行为和8000端口一致，这个端口可以在配置文件中禁用。\n:8001  Kong的配置管理接口，即Admin API，通过访问此端口配置Kong。\n:8444  Admin API 用来监听HTTPS请求的。\n\n理解8001端口尤为重要，在Kong中，所有的配置都是通过Get、Post、Patch等请求完成的。通过命令行的curl命令，或者postman等其他能发送http请求的工具将需要的配置信息按照Kong的API发送到8001端口即可更改配置，如添加服务，增加API，安装插件等操作。\n\n例如，一个添加服务的命令如下：\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=example-service' \\\n--data 'url=http://mockbin.org'\n\n```\n\n#### 快速使用\n\n这一节，我们要添加一个API到Kong上，为了实现这个目的，我们首先要添加一个服务名称，Kong用这个名称来指代它管理的上游API和微服务。\n\n##### 1.使用Admin API 添加服务\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=example-service' \\\n--data 'url=http://mockbin.org'\n\n```\n\n如果命令正确，将会打印如下结果\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n   \"host\":\"mockbin.org\",\n   \"created_at\":1519130509,\n   \"connect_timeout\":60000,\n   \"id\":\"92956672-f5ea-4e9a-b096-667bf55bc40c\",\n   \"protocol\":\"http\",\n   \"name\":\"example-service\",\n   \"read_timeout\":60000,\n   \"port\":80,\n   \"path\":null,\n   \"updated_at\":1519130509,\n   \"retries\":5,\n   \"write_timeout\":60000\n}\n\n```\n\n##### 2.为服务添加路由\n\nhosts[]=example.com 代表来自example.com主机的请求会被转发到此路由。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/example-service/routes \\\n--data 'hosts[]=example.com'\n\n```\n\n##### 如果命令正确，会打印如下结果\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n   \"created_at\":1519131139,\n   \"strip_path\":true,\n   \"hosts\":[\n      \"example.com\"\n   ],\n   \"preserve_host\":false,\n   \"regex_priority\":0,\n   \"updated_at\":1519131139,\n   \"paths\":null,\n   \"service\":{\n      \"id\":\"79d7ee6e-9fc7-4b95-aa3b-61d2e17e7516\"\n   },\n   \"methods\":null,\n   \"protocols\":[\n      \"http\",\n      \"https\"\n   ],\n   \"id\":\"f9ce2ed7-c06e-4e16-bd5d-3a82daef3f9d\"\n}\n\n```\n\n##### 3.测试请求是否被成功从Kong转发到上游服务\n\n以下命令模拟一个get请求到Kong，如果配置正确，Kong应该将请求转发到<http://mockbin.org>，如果你还记得，这是我们在创建服务的时候指定的上游服务。\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000/ \\\n--header 'Host: example.com'\n\n```\n\n至此，我们已经建立了一个最简单的Kong实例，监听来自8000端口的请求，如果请求的header为example.com，Kong会转发到mockbin.org，再把响应返回给我们。\n\n## 启用插件\n\n这里，我们要配置Kong插件，Kong的一个核心原则是通过插件扩展功能。\n\n接下来我们配置key-auth插件，用来进行身份验证。在添加此插件以前，所有的请求都会被代理到上游。启用此插件以后，只有携带正确API key的请求会被代理，借此可以保护上游服务。\n\n##### 1.为之前配置的服务增加key-auth插件\n\n输入以下命令\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/example-service/plugins/ \\\n--data 'name=key-auth'\n\n```\n\n这个插件也支持config.key_names参数，默认值是['apikey']。这是一个包含apikey的headers和parameters名的列表。\n\n##### 2.\t验证插件已经正确配置\n\n```bash\ncurl -i -X GET \\\n  --url http://localhost:8000/ \\\n--header 'Host: example.com'\n\n```\n\n因为还没有指定要求的apikey或者参数，响应应该是401 unauthorized：\n\n```bash\nHTTP/1.1 401 Unauthorized\n...\n\n{\n  \"message\": \"No API key found in request\"\n}\n\n```\n\n如果想继续正常代理，就要为服务添加用户。\n\n## 添加用户\n\n在此，我们为Kong实例添加一个用户，用户是使用你API的独立个体，可以被追踪，进行访问管理等。\n\n##### 1.\t使用RESTful创建用户\n\n假设我们的用户叫Jason\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/consumers/ \\\n--data \"username=Jason\"\n\n```\n\n你应该看到如下信息\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n  \"username\": \"Jason\",\n  \"created_at\": 1428555626000,\n  \"id\": \"bbdf1c48-19dc-4ab7-cae0-ff4f59d87dc9\"\n}\n\n```\n\n##### 2.\t为你的用户设置key\n\n把ENTER_KEY_HERE替换为想要设置的Key\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/consumers/Jason/key-auth/ \\\n--data 'key=ENTER_KEY_HERE'\n\n```\n\n##### 3.\t验证\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000 \\\n  --header \"Host: example.com\" \\\n--header \"apikey: ENTER_KEY_HERE\"\n\n```\n\n至此，我们已经完整添加了一个带鉴权的服务。","source":"_posts/Kong网关入门.md","raw":"---\ntitle: Kong网关入门\ndate: 2018-09-18 18:10:09\ntags: 分享\n\n---\n\n## 前言\n\n一个典型的使用Kong网关的请求遵循以下流程。\n\n![图解](p1.png)\n\n每一个请求API的访问首先会访问Kong，之后被代理到最终的API上。在请求和响应中间，Kong可以根据用户的需要执行很多插件，使其功能更加强大。Kong可以有效的成为每一个API请求的入口。\n\n## 使用\n\n当Kong成功启动以后，默认的，Kong会监听以下端口:\n\n:8000  Kong监听来自HTTP请求的端口，转发到上游服务。\n:8443  Kong监听来自HTTPS请求的端口，除了只接受HTTPS请求外，其他行为和8000端口一致，这个端口可以在配置文件中禁用。\n:8001  Kong的配置管理接口，即Admin API，通过访问此端口配置Kong。\n:8444  Admin API 用来监听HTTPS请求的。\n\n理解8001端口尤为重要，在Kong中，所有的配置都是通过Get、Post、Patch等请求完成的。通过命令行的curl命令，或者postman等其他能发送http请求的工具将需要的配置信息按照Kong的API发送到8001端口即可更改配置，如添加服务，增加API，安装插件等操作。\n\n例如，一个添加服务的命令如下：\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=example-service' \\\n--data 'url=http://mockbin.org'\n\n```\n\n#### 快速使用\n\n这一节，我们要添加一个API到Kong上，为了实现这个目的，我们首先要添加一个服务名称，Kong用这个名称来指代它管理的上游API和微服务。\n\n##### 1.使用Admin API 添加服务\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/ \\\n  --data 'name=example-service' \\\n--data 'url=http://mockbin.org'\n\n```\n\n如果命令正确，将会打印如下结果\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n   \"host\":\"mockbin.org\",\n   \"created_at\":1519130509,\n   \"connect_timeout\":60000,\n   \"id\":\"92956672-f5ea-4e9a-b096-667bf55bc40c\",\n   \"protocol\":\"http\",\n   \"name\":\"example-service\",\n   \"read_timeout\":60000,\n   \"port\":80,\n   \"path\":null,\n   \"updated_at\":1519130509,\n   \"retries\":5,\n   \"write_timeout\":60000\n}\n\n```\n\n##### 2.为服务添加路由\n\nhosts[]=example.com 代表来自example.com主机的请求会被转发到此路由。\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/example-service/routes \\\n--data 'hosts[]=example.com'\n\n```\n\n##### 如果命令正确，会打印如下结果\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n   \"created_at\":1519131139,\n   \"strip_path\":true,\n   \"hosts\":[\n      \"example.com\"\n   ],\n   \"preserve_host\":false,\n   \"regex_priority\":0,\n   \"updated_at\":1519131139,\n   \"paths\":null,\n   \"service\":{\n      \"id\":\"79d7ee6e-9fc7-4b95-aa3b-61d2e17e7516\"\n   },\n   \"methods\":null,\n   \"protocols\":[\n      \"http\",\n      \"https\"\n   ],\n   \"id\":\"f9ce2ed7-c06e-4e16-bd5d-3a82daef3f9d\"\n}\n\n```\n\n##### 3.测试请求是否被成功从Kong转发到上游服务\n\n以下命令模拟一个get请求到Kong，如果配置正确，Kong应该将请求转发到<http://mockbin.org>，如果你还记得，这是我们在创建服务的时候指定的上游服务。\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000/ \\\n--header 'Host: example.com'\n\n```\n\n至此，我们已经建立了一个最简单的Kong实例，监听来自8000端口的请求，如果请求的header为example.com，Kong会转发到mockbin.org，再把响应返回给我们。\n\n## 启用插件\n\n这里，我们要配置Kong插件，Kong的一个核心原则是通过插件扩展功能。\n\n接下来我们配置key-auth插件，用来进行身份验证。在添加此插件以前，所有的请求都会被代理到上游。启用此插件以后，只有携带正确API key的请求会被代理，借此可以保护上游服务。\n\n##### 1.为之前配置的服务增加key-auth插件\n\n输入以下命令\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/services/example-service/plugins/ \\\n--data 'name=key-auth'\n\n```\n\n这个插件也支持config.key_names参数，默认值是['apikey']。这是一个包含apikey的headers和parameters名的列表。\n\n##### 2.\t验证插件已经正确配置\n\n```bash\ncurl -i -X GET \\\n  --url http://localhost:8000/ \\\n--header 'Host: example.com'\n\n```\n\n因为还没有指定要求的apikey或者参数，响应应该是401 unauthorized：\n\n```bash\nHTTP/1.1 401 Unauthorized\n...\n\n{\n  \"message\": \"No API key found in request\"\n}\n\n```\n\n如果想继续正常代理，就要为服务添加用户。\n\n## 添加用户\n\n在此，我们为Kong实例添加一个用户，用户是使用你API的独立个体，可以被追踪，进行访问管理等。\n\n##### 1.\t使用RESTful创建用户\n\n假设我们的用户叫Jason\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/consumers/ \\\n--data \"username=Jason\"\n\n```\n\n你应该看到如下信息\n\n```bash\nHTTP/1.1 201 Created\nContent-Type: application/json\nConnection: keep-alive\n\n{\n  \"username\": \"Jason\",\n  \"created_at\": 1428555626000,\n  \"id\": \"bbdf1c48-19dc-4ab7-cae0-ff4f59d87dc9\"\n}\n\n```\n\n##### 2.\t为你的用户设置key\n\n把ENTER_KEY_HERE替换为想要设置的Key\n\n```bash\n$ curl -i -X POST \\\n  --url http://localhost:8001/consumers/Jason/key-auth/ \\\n--data 'key=ENTER_KEY_HERE'\n\n```\n\n##### 3.\t验证\n\n```bash\n$ curl -i -X GET \\\n  --url http://localhost:8000 \\\n  --header \"Host: example.com\" \\\n--header \"apikey: ENTER_KEY_HERE\"\n\n```\n\n至此，我们已经完整添加了一个带鉴权的服务。","slug":"Kong网关入门","published":1,"updated":"2018-09-19T00:43:06.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le1v000kvcz1369suqvl","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个典型的使用Kong网关的请求遵循以下流程。</p>\n<p><img src=\"/2018/09/18/Kong网关入门/p1.png\" alt=\"图解\"></p>\n<p>每一个请求API的访问首先会访问Kong，之后被代理到最终的API上。在请求和响应中间，Kong可以根据用户的需要执行很多插件，使其功能更加强大。Kong可以有效的成为每一个API请求的入口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>当Kong成功启动以后，默认的，Kong会监听以下端口:</p>\n<p>:8000  Kong监听来自HTTP请求的端口，转发到上游服务。<br>:8443  Kong监听来自HTTPS请求的端口，除了只接受HTTPS请求外，其他行为和8000端口一致，这个端口可以在配置文件中禁用。<br>:8001  Kong的配置管理接口，即Admin API，通过访问此端口配置Kong。<br>:8444  Admin API 用来监听HTTPS请求的。</p>\n<p>理解8001端口尤为重要，在Kong中，所有的配置都是通过Get、Post、Patch等请求完成的。通过命令行的curl命令，或者postman等其他能发送http请求的工具将需要的配置信息按照Kong的API发送到8001端口即可更改配置，如添加服务，增加API，安装插件等操作。</p>\n<p>例如，一个添加服务的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/ \\</div><div class=\"line\">  --data <span class=\"string\">'name=example-service'</span> \\</div><div class=\"line\">--data <span class=\"string\">'url=http://mockbin.org'</span></div></pre></td></tr></table></figure>\n<h4 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h4><p>这一节，我们要添加一个API到Kong上，为了实现这个目的，我们首先要添加一个服务名称，Kong用这个名称来指代它管理的上游API和微服务。</p>\n<h5 id=\"1-使用Admin-API-添加服务\"><a href=\"#1-使用Admin-API-添加服务\" class=\"headerlink\" title=\"1.使用Admin API 添加服务\"></a>1.使用Admin API 添加服务</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/ \\</div><div class=\"line\">  --data <span class=\"string\">'name=example-service'</span> \\</div><div class=\"line\">--data <span class=\"string\">'url=http://mockbin.org'</span></div></pre></td></tr></table></figure>\n<p>如果命令正确，将会打印如下结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"host\"</span>:<span class=\"string\">\"mockbin.org\"</span>,</div><div class=\"line\">   <span class=\"string\">\"created_at\"</span>:1519130509,</div><div class=\"line\">   <span class=\"string\">\"connect_timeout\"</span>:60000,</div><div class=\"line\">   <span class=\"string\">\"id\"</span>:<span class=\"string\">\"92956672-f5ea-4e9a-b096-667bf55bc40c\"</span>,</div><div class=\"line\">   <span class=\"string\">\"protocol\"</span>:<span class=\"string\">\"http\"</span>,</div><div class=\"line\">   <span class=\"string\">\"name\"</span>:<span class=\"string\">\"example-service\"</span>,</div><div class=\"line\">   <span class=\"string\">\"read_timeout\"</span>:60000,</div><div class=\"line\">   <span class=\"string\">\"port\"</span>:80,</div><div class=\"line\">   <span class=\"string\">\"path\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"updated_at\"</span>:1519130509,</div><div class=\"line\">   <span class=\"string\">\"retries\"</span>:5,</div><div class=\"line\">   <span class=\"string\">\"write_timeout\"</span>:60000</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-为服务添加路由\"><a href=\"#2-为服务添加路由\" class=\"headerlink\" title=\"2.为服务添加路由\"></a>2.为服务添加路由</h5><p>hosts[]=example.com 代表来自example.com主机的请求会被转发到此路由。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/example-service/routes \\</div><div class=\"line\">--data <span class=\"string\">'hosts[]=example.com'</span></div></pre></td></tr></table></figure>\n<h5 id=\"如果命令正确，会打印如下结果\"><a href=\"#如果命令正确，会打印如下结果\" class=\"headerlink\" title=\"如果命令正确，会打印如下结果\"></a>如果命令正确，会打印如下结果</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"created_at\"</span>:1519131139,</div><div class=\"line\">   <span class=\"string\">\"strip_path\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">   <span class=\"string\">\"hosts\"</span>:[</div><div class=\"line\">      <span class=\"string\">\"example.com\"</span></div><div class=\"line\">   ],</div><div class=\"line\">   <span class=\"string\">\"preserve_host\"</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">   <span class=\"string\">\"regex_priority\"</span>:0,</div><div class=\"line\">   <span class=\"string\">\"updated_at\"</span>:1519131139,</div><div class=\"line\">   <span class=\"string\">\"paths\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"service\"</span>:&#123;</div><div class=\"line\">      <span class=\"string\">\"id\"</span>:<span class=\"string\">\"79d7ee6e-9fc7-4b95-aa3b-61d2e17e7516\"</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"string\">\"methods\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"protocols\"</span>:[</div><div class=\"line\">      <span class=\"string\">\"http\"</span>,</div><div class=\"line\">      <span class=\"string\">\"https\"</span></div><div class=\"line\">   ],</div><div class=\"line\">   <span class=\"string\">\"id\"</span>:<span class=\"string\">\"f9ce2ed7-c06e-4e16-bd5d-3a82daef3f9d\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3-测试请求是否被成功从Kong转发到上游服务\"><a href=\"#3-测试请求是否被成功从Kong转发到上游服务\" class=\"headerlink\" title=\"3.测试请求是否被成功从Kong转发到上游服务\"></a>3.测试请求是否被成功从Kong转发到上游服务</h5><p>以下命令模拟一个get请求到Kong，如果配置正确，Kong应该将请求转发到<a href=\"http://mockbin.org\" target=\"_blank\" rel=\"external\">http://mockbin.org</a>，如果你还记得，这是我们在创建服务的时候指定的上游服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000/ \\</div><div class=\"line\">--header <span class=\"string\">'Host: example.com'</span></div></pre></td></tr></table></figure>\n<p>至此，我们已经建立了一个最简单的Kong实例，监听来自8000端口的请求，如果请求的header为example.com，Kong会转发到mockbin.org，再把响应返回给我们。</p>\n<h2 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h2><p>这里，我们要配置Kong插件，Kong的一个核心原则是通过插件扩展功能。</p>\n<p>接下来我们配置key-auth插件，用来进行身份验证。在添加此插件以前，所有的请求都会被代理到上游。启用此插件以后，只有携带正确API key的请求会被代理，借此可以保护上游服务。</p>\n<h5 id=\"1-为之前配置的服务增加key-auth插件\"><a href=\"#1-为之前配置的服务增加key-auth插件\" class=\"headerlink\" title=\"1.为之前配置的服务增加key-auth插件\"></a>1.为之前配置的服务增加key-auth插件</h5><p>输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/example-service/plugins/ \\</div><div class=\"line\">--data <span class=\"string\">'name=key-auth'</span></div></pre></td></tr></table></figure>\n<p>这个插件也支持config.key_names参数，默认值是[‘apikey’]。这是一个包含apikey的headers和parameters名的列表。</p>\n<h5 id=\"2-验证插件已经正确配置\"><a href=\"#2-验证插件已经正确配置\" class=\"headerlink\" title=\"2.    验证插件已经正确配置\"></a>2.    验证插件已经正确配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000/ \\</div><div class=\"line\">--header <span class=\"string\">'Host: example.com'</span></div></pre></td></tr></table></figure>\n<p>因为还没有指定要求的apikey或者参数，响应应该是401 unauthorized：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 401 Unauthorized</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"message\"</span>: <span class=\"string\">\"No API key found in request\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果想继续正常代理，就要为服务添加用户。</p>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><p>在此，我们为Kong实例添加一个用户，用户是使用你API的独立个体，可以被追踪，进行访问管理等。</p>\n<h5 id=\"1-使用RESTful创建用户\"><a href=\"#1-使用RESTful创建用户\" class=\"headerlink\" title=\"1.    使用RESTful创建用户\"></a>1.    使用RESTful创建用户</h5><p>假设我们的用户叫Jason</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/consumers/ \\</div><div class=\"line\">--data <span class=\"string\">\"username=Jason\"</span></div></pre></td></tr></table></figure>\n<p>你应该看到如下信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"Jason\"</span>,</div><div class=\"line\">  <span class=\"string\">\"created_at\"</span>: 1428555626000,</div><div class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"bbdf1c48-19dc-4ab7-cae0-ff4f59d87dc9\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-为你的用户设置key\"><a href=\"#2-为你的用户设置key\" class=\"headerlink\" title=\"2.    为你的用户设置key\"></a>2.    为你的用户设置key</h5><p>把ENTER_KEY_HERE替换为想要设置的Key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/consumers/Jason/key-auth/ \\</div><div class=\"line\">--data <span class=\"string\">'key=ENTER_KEY_HERE'</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-验证\"><a href=\"#3-验证\" class=\"headerlink\" title=\"3.    验证\"></a>3.    验证</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000 \\</div><div class=\"line\">  --header <span class=\"string\">\"Host: example.com\"</span> \\</div><div class=\"line\">--header <span class=\"string\">\"apikey: ENTER_KEY_HERE\"</span></div></pre></td></tr></table></figure>\n<p>至此，我们已经完整添加了一个带鉴权的服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个典型的使用Kong网关的请求遵循以下流程。</p>\n<p><img src=\"/2018/09/18/Kong网关入门/p1.png\" alt=\"图解\"></p>\n<p>每一个请求API的访问首先会访问Kong，之后被代理到最终的API上。在请求和响应中间，Kong可以根据用户的需要执行很多插件，使其功能更加强大。Kong可以有效的成为每一个API请求的入口。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>当Kong成功启动以后，默认的，Kong会监听以下端口:</p>\n<p>:8000  Kong监听来自HTTP请求的端口，转发到上游服务。<br>:8443  Kong监听来自HTTPS请求的端口，除了只接受HTTPS请求外，其他行为和8000端口一致，这个端口可以在配置文件中禁用。<br>:8001  Kong的配置管理接口，即Admin API，通过访问此端口配置Kong。<br>:8444  Admin API 用来监听HTTPS请求的。</p>\n<p>理解8001端口尤为重要，在Kong中，所有的配置都是通过Get、Post、Patch等请求完成的。通过命令行的curl命令，或者postman等其他能发送http请求的工具将需要的配置信息按照Kong的API发送到8001端口即可更改配置，如添加服务，增加API，安装插件等操作。</p>\n<p>例如，一个添加服务的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/ \\</div><div class=\"line\">  --data <span class=\"string\">'name=example-service'</span> \\</div><div class=\"line\">--data <span class=\"string\">'url=http://mockbin.org'</span></div></pre></td></tr></table></figure>\n<h4 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h4><p>这一节，我们要添加一个API到Kong上，为了实现这个目的，我们首先要添加一个服务名称，Kong用这个名称来指代它管理的上游API和微服务。</p>\n<h5 id=\"1-使用Admin-API-添加服务\"><a href=\"#1-使用Admin-API-添加服务\" class=\"headerlink\" title=\"1.使用Admin API 添加服务\"></a>1.使用Admin API 添加服务</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/ \\</div><div class=\"line\">  --data <span class=\"string\">'name=example-service'</span> \\</div><div class=\"line\">--data <span class=\"string\">'url=http://mockbin.org'</span></div></pre></td></tr></table></figure>\n<p>如果命令正确，将会打印如下结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"host\"</span>:<span class=\"string\">\"mockbin.org\"</span>,</div><div class=\"line\">   <span class=\"string\">\"created_at\"</span>:1519130509,</div><div class=\"line\">   <span class=\"string\">\"connect_timeout\"</span>:60000,</div><div class=\"line\">   <span class=\"string\">\"id\"</span>:<span class=\"string\">\"92956672-f5ea-4e9a-b096-667bf55bc40c\"</span>,</div><div class=\"line\">   <span class=\"string\">\"protocol\"</span>:<span class=\"string\">\"http\"</span>,</div><div class=\"line\">   <span class=\"string\">\"name\"</span>:<span class=\"string\">\"example-service\"</span>,</div><div class=\"line\">   <span class=\"string\">\"read_timeout\"</span>:60000,</div><div class=\"line\">   <span class=\"string\">\"port\"</span>:80,</div><div class=\"line\">   <span class=\"string\">\"path\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"updated_at\"</span>:1519130509,</div><div class=\"line\">   <span class=\"string\">\"retries\"</span>:5,</div><div class=\"line\">   <span class=\"string\">\"write_timeout\"</span>:60000</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-为服务添加路由\"><a href=\"#2-为服务添加路由\" class=\"headerlink\" title=\"2.为服务添加路由\"></a>2.为服务添加路由</h5><p>hosts[]=example.com 代表来自example.com主机的请求会被转发到此路由。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/example-service/routes \\</div><div class=\"line\">--data <span class=\"string\">'hosts[]=example.com'</span></div></pre></td></tr></table></figure>\n<h5 id=\"如果命令正确，会打印如下结果\"><a href=\"#如果命令正确，会打印如下结果\" class=\"headerlink\" title=\"如果命令正确，会打印如下结果\"></a>如果命令正确，会打印如下结果</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"string\">\"created_at\"</span>:1519131139,</div><div class=\"line\">   <span class=\"string\">\"strip_path\"</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">   <span class=\"string\">\"hosts\"</span>:[</div><div class=\"line\">      <span class=\"string\">\"example.com\"</span></div><div class=\"line\">   ],</div><div class=\"line\">   <span class=\"string\">\"preserve_host\"</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">   <span class=\"string\">\"regex_priority\"</span>:0,</div><div class=\"line\">   <span class=\"string\">\"updated_at\"</span>:1519131139,</div><div class=\"line\">   <span class=\"string\">\"paths\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"service\"</span>:&#123;</div><div class=\"line\">      <span class=\"string\">\"id\"</span>:<span class=\"string\">\"79d7ee6e-9fc7-4b95-aa3b-61d2e17e7516\"</span></div><div class=\"line\">   &#125;,</div><div class=\"line\">   <span class=\"string\">\"methods\"</span>:null,</div><div class=\"line\">   <span class=\"string\">\"protocols\"</span>:[</div><div class=\"line\">      <span class=\"string\">\"http\"</span>,</div><div class=\"line\">      <span class=\"string\">\"https\"</span></div><div class=\"line\">   ],</div><div class=\"line\">   <span class=\"string\">\"id\"</span>:<span class=\"string\">\"f9ce2ed7-c06e-4e16-bd5d-3a82daef3f9d\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3-测试请求是否被成功从Kong转发到上游服务\"><a href=\"#3-测试请求是否被成功从Kong转发到上游服务\" class=\"headerlink\" title=\"3.测试请求是否被成功从Kong转发到上游服务\"></a>3.测试请求是否被成功从Kong转发到上游服务</h5><p>以下命令模拟一个get请求到Kong，如果配置正确，Kong应该将请求转发到<a href=\"http://mockbin.org\" target=\"_blank\" rel=\"external\">http://mockbin.org</a>，如果你还记得，这是我们在创建服务的时候指定的上游服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000/ \\</div><div class=\"line\">--header <span class=\"string\">'Host: example.com'</span></div></pre></td></tr></table></figure>\n<p>至此，我们已经建立了一个最简单的Kong实例，监听来自8000端口的请求，如果请求的header为example.com，Kong会转发到mockbin.org，再把响应返回给我们。</p>\n<h2 id=\"启用插件\"><a href=\"#启用插件\" class=\"headerlink\" title=\"启用插件\"></a>启用插件</h2><p>这里，我们要配置Kong插件，Kong的一个核心原则是通过插件扩展功能。</p>\n<p>接下来我们配置key-auth插件，用来进行身份验证。在添加此插件以前，所有的请求都会被代理到上游。启用此插件以后，只有携带正确API key的请求会被代理，借此可以保护上游服务。</p>\n<h5 id=\"1-为之前配置的服务增加key-auth插件\"><a href=\"#1-为之前配置的服务增加key-auth插件\" class=\"headerlink\" title=\"1.为之前配置的服务增加key-auth插件\"></a>1.为之前配置的服务增加key-auth插件</h5><p>输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/services/example-service/plugins/ \\</div><div class=\"line\">--data <span class=\"string\">'name=key-auth'</span></div></pre></td></tr></table></figure>\n<p>这个插件也支持config.key_names参数，默认值是[‘apikey’]。这是一个包含apikey的headers和parameters名的列表。</p>\n<h5 id=\"2-验证插件已经正确配置\"><a href=\"#2-验证插件已经正确配置\" class=\"headerlink\" title=\"2.    验证插件已经正确配置\"></a>2.    验证插件已经正确配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000/ \\</div><div class=\"line\">--header <span class=\"string\">'Host: example.com'</span></div></pre></td></tr></table></figure>\n<p>因为还没有指定要求的apikey或者参数，响应应该是401 unauthorized：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 401 Unauthorized</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"message\"</span>: <span class=\"string\">\"No API key found in request\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果想继续正常代理，就要为服务添加用户。</p>\n<h2 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h2><p>在此，我们为Kong实例添加一个用户，用户是使用你API的独立个体，可以被追踪，进行访问管理等。</p>\n<h5 id=\"1-使用RESTful创建用户\"><a href=\"#1-使用RESTful创建用户\" class=\"headerlink\" title=\"1.    使用RESTful创建用户\"></a>1.    使用RESTful创建用户</h5><p>假设我们的用户叫Jason</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/consumers/ \\</div><div class=\"line\">--data <span class=\"string\">\"username=Jason\"</span></div></pre></td></tr></table></figure>\n<p>你应该看到如下信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 201 Created</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Connection: keep-alive</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"Jason\"</span>,</div><div class=\"line\">  <span class=\"string\">\"created_at\"</span>: 1428555626000,</div><div class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"bbdf1c48-19dc-4ab7-cae0-ff4f59d87dc9\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-为你的用户设置key\"><a href=\"#2-为你的用户设置key\" class=\"headerlink\" title=\"2.    为你的用户设置key\"></a>2.    为你的用户设置key</h5><p>把ENTER_KEY_HERE替换为想要设置的Key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X POST \\</div><div class=\"line\">  --url http://localhost:8001/consumers/Jason/key-auth/ \\</div><div class=\"line\">--data <span class=\"string\">'key=ENTER_KEY_HERE'</span></div></pre></td></tr></table></figure>\n<h5 id=\"3-验证\"><a href=\"#3-验证\" class=\"headerlink\" title=\"3.    验证\"></a>3.    验证</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -i -X GET \\</div><div class=\"line\">  --url http://localhost:8000 \\</div><div class=\"line\">  --header <span class=\"string\">\"Host: example.com\"</span> \\</div><div class=\"line\">--header <span class=\"string\">\"apikey: ENTER_KEY_HERE\"</span></div></pre></td></tr></table></figure>\n<p>至此，我们已经完整添加了一个带鉴权的服务。</p>\n"},{"title":"sublime Text3 build 3134 注册码","date":"2017-10-17T03:17:48.000Z","_content":"\n    —– BEGIN LICENSE —–\n\tTwitterInc\n\t200 User License\n\tEA7E-890007\n\t1D77F72E 390CDD93 4DCBA022 FAF60790\n\t61AA12C0 A37081C5 D0316412 4584D136\n\t94D7F7D4 95BC8C1C 527DA828 560BB037\n\tD1EDDD8C AE7B379F 50C9D69D B35179EF\n\t2FE898C4 8E4277A8 555CE714 E1FB0E43\n\tD5D52613 C3D12E98 BC49967F 7652EED2\n\t9D2D2E61 67610860 6D338B72 5CF95C69\n\tE36B85CC 84991F19 7575D828 470A92AB\n\t—— END LICENSE ——","source":"_posts/sublime-Text3-build-3134-注册码.md","raw":"---\ntitle: sublime Text3 build 3134 注册码\ndate: 2017-10-17 11:17:48\ntags: 分享\n---\n\n    —– BEGIN LICENSE —–\n\tTwitterInc\n\t200 User License\n\tEA7E-890007\n\t1D77F72E 390CDD93 4DCBA022 FAF60790\n\t61AA12C0 A37081C5 D0316412 4584D136\n\t94D7F7D4 95BC8C1C 527DA828 560BB037\n\tD1EDDD8C AE7B379F 50C9D69D B35179EF\n\t2FE898C4 8E4277A8 555CE714 E1FB0E43\n\tD5D52613 C3D12E98 BC49967F 7652EED2\n\t9D2D2E61 67610860 6D338B72 5CF95C69\n\tE36B85CC 84991F19 7575D828 470A92AB\n\t—— END LICENSE ——","slug":"sublime-Text3-build-3134-注册码","published":1,"updated":"2018-08-21T00:43:30.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le21000mvcz15e5c5nj6","content":"<pre><code>—– BEGIN LICENSE —–\nTwitterInc\n200 User License\nEA7E-890007\n1D77F72E 390CDD93 4DCBA022 FAF60790\n61AA12C0 A37081C5 D0316412 4584D136\n94D7F7D4 95BC8C1C 527DA828 560BB037\nD1EDDD8C AE7B379F 50C9D69D B35179EF\n2FE898C4 8E4277A8 555CE714 E1FB0E43\nD5D52613 C3D12E98 BC49967F 7652EED2\n9D2D2E61 67610860 6D338B72 5CF95C69\nE36B85CC 84991F19 7575D828 470A92AB\n—— END LICENSE ——\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>—– BEGIN LICENSE —–\nTwitterInc\n200 User License\nEA7E-890007\n1D77F72E 390CDD93 4DCBA022 FAF60790\n61AA12C0 A37081C5 D0316412 4584D136\n94D7F7D4 95BC8C1C 527DA828 560BB037\nD1EDDD8C AE7B379F 50C9D69D B35179EF\n2FE898C4 8E4277A8 555CE714 E1FB0E43\nD5D52613 C3D12E98 BC49967F 7652EED2\n9D2D2E61 67610860 6D338B72 5CF95C69\nE36B85CC 84991F19 7575D828 470A92AB\n—— END LICENSE ——\n</code></pre>"},{"title":"Textarea高度自适应","date":"2017-09-25T11:56:27.000Z","_content":"纯JavaScript代码\n\nscript\n\n    function auto_grow(element) {\n   \t\t element.style.height = \"5px\";\n    \t element.style.height = (element.scrollHeight)+\"px\";\n\t}\n\t\nCSS\n   \n    textarea {\n  \t  \tresize: none;\n    \toverflow: hidden;\n    \tmin-height: 50px;\n    \tmax-height: 100px;\n\t}\n\nhtml\n\n    <textarea onkeyup=\"auto_grow(this)\"></textarea>","source":"_posts/textarea高度自适应.md","raw":"---\ntitle: Textarea高度自适应\ndate: 2017-09-25 19:56:27\ntags: 前端\n---\n纯JavaScript代码\n\nscript\n\n    function auto_grow(element) {\n   \t\t element.style.height = \"5px\";\n    \t element.style.height = (element.scrollHeight)+\"px\";\n\t}\n\t\nCSS\n   \n    textarea {\n  \t  \tresize: none;\n    \toverflow: hidden;\n    \tmin-height: 50px;\n    \tmax-height: 100px;\n\t}\n\nhtml\n\n    <textarea onkeyup=\"auto_grow(this)\"></textarea>","slug":"textarea高度自适应","published":1,"updated":"2018-08-21T00:43:30.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le24000ovcz1g9gjy4ck","content":"<p>纯JavaScript代码</p>\n<p>script</p>\n<pre><code>function auto_grow(element) {\n        element.style.height = &quot;5px&quot;;\n     element.style.height = (element.scrollHeight)+&quot;px&quot;;\n}\n</code></pre><p>CSS</p>\n<pre><code>textarea {\n        resize: none;\n    overflow: hidden;\n    min-height: 50px;\n    max-height: 100px;\n}\n</code></pre><p>html</p>\n<pre><code>&lt;textarea onkeyup=&quot;auto_grow(this)&quot;&gt;&lt;/textarea&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>纯JavaScript代码</p>\n<p>script</p>\n<pre><code>function auto_grow(element) {\n        element.style.height = &quot;5px&quot;;\n     element.style.height = (element.scrollHeight)+&quot;px&quot;;\n}\n</code></pre><p>CSS</p>\n<pre><code>textarea {\n        resize: none;\n    overflow: hidden;\n    min-height: 50px;\n    max-height: 100px;\n}\n</code></pre><p>html</p>\n<pre><code>&lt;textarea onkeyup=&quot;auto_grow(this)&quot;&gt;&lt;/textarea&gt;\n</code></pre>"},{"title":"世界尽头与冷酷仙境","date":"2018-02-02T14:12:05.000Z","_content":"\n鲍勃·迪伦的声音怎么样？ 像一个小男孩定定的注视下雨一样。\n\n失去影子，使我觉得自己恍惚置身于世界的边缘。我再也无处可去，也无处可归。此处是世界的尽头，而世界的尽头不通往任何地方。世界在这里终止，悄然止住脚步。\n","source":"_posts/世界尽头与冷酷仙境.md","raw":"---\ntitle: 世界尽头与冷酷仙境\ndate: 2018-02-02 22:12:05\ntags: 随笔\n---\n\n鲍勃·迪伦的声音怎么样？ 像一个小男孩定定的注视下雨一样。\n\n失去影子，使我觉得自己恍惚置身于世界的边缘。我再也无处可去，也无处可归。此处是世界的尽头，而世界的尽头不通往任何地方。世界在这里终止，悄然止住脚步。\n","slug":"世界尽头与冷酷仙境","published":1,"updated":"2018-08-21T00:43:30.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le26000qvcz1wi5v1vk3","content":"<p>鲍勃·迪伦的声音怎么样？ 像一个小男孩定定的注视下雨一样。</p>\n<p>失去影子，使我觉得自己恍惚置身于世界的边缘。我再也无处可去，也无处可归。此处是世界的尽头，而世界的尽头不通往任何地方。世界在这里终止，悄然止住脚步。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>鲍勃·迪伦的声音怎么样？ 像一个小男孩定定的注视下雨一样。</p>\n<p>失去影子，使我觉得自己恍惚置身于世界的边缘。我再也无处可去，也无处可归。此处是世界的尽头，而世界的尽头不通往任何地方。世界在这里终止，悄然止住脚步。</p>\n"},{"title":"加速命令行网络之方法","date":"2018-07-15T04:40:48.000Z","_content":"# 针对mac\n## 其一\n当前运行的终端有效\n\n`export ALL_PROXY=socks5://127.0.0.1:1080\n`\n\n## 其二\n在~/.curlrc文件中输入代理地址\n\n`socks5 = \"127.0.0.1:1086\"`\n\n","source":"_posts/加速命令行网络之方法.md","raw":"---\ntitle: 加速命令行网络之方法\ndate: 2018-07-15 12:40:48\ntags: 分享\n---\n# 针对mac\n## 其一\n当前运行的终端有效\n\n`export ALL_PROXY=socks5://127.0.0.1:1080\n`\n\n## 其二\n在~/.curlrc文件中输入代理地址\n\n`socks5 = \"127.0.0.1:1086\"`\n\n","slug":"加速命令行网络之方法","published":1,"updated":"2018-08-21T00:43:30.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le29000svcz1g1k7ofkr","content":"<h1 id=\"针对mac\"><a href=\"#针对mac\" class=\"headerlink\" title=\"针对mac\"></a>针对mac</h1><h2 id=\"其一\"><a href=\"#其一\" class=\"headerlink\" title=\"其一\"></a>其一</h2><p>当前运行的终端有效</p>\n<p><code>export ALL_PROXY=socks5://127.0.0.1:1080</code></p>\n<h2 id=\"其二\"><a href=\"#其二\" class=\"headerlink\" title=\"其二\"></a>其二</h2><p>在~/.curlrc文件中输入代理地址</p>\n<p><code>socks5 = &quot;127.0.0.1:1086&quot;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"针对mac\"><a href=\"#针对mac\" class=\"headerlink\" title=\"针对mac\"></a>针对mac</h1><h2 id=\"其一\"><a href=\"#其一\" class=\"headerlink\" title=\"其一\"></a>其一</h2><p>当前运行的终端有效</p>\n<p><code>export ALL_PROXY=socks5://127.0.0.1:1080</code></p>\n<h2 id=\"其二\"><a href=\"#其二\" class=\"headerlink\" title=\"其二\"></a>其二</h2><p>在~/.curlrc文件中输入代理地址</p>\n<p><code>socks5 = &quot;127.0.0.1:1086&quot;</code></p>\n"},{"title":"修改npm源","date":"2017-12-04T09:05:17.000Z","_content":"修改npm源镜像为淘宝镜像\n\n发布自己的包时要还原为官方源\n\n### 修改为淘宝源\n\n    npm config set registry http://registry.npm.taobao.org/\n\n### 修改为官方源\n\n    npm config set registry https://registry.npmjs.org/","source":"_posts/修改npm源.md","raw":"---\ntitle: 修改npm源\ndate: 2017-12-04 17:05:17\ntags: 笔记本本\n---\n修改npm源镜像为淘宝镜像\n\n发布自己的包时要还原为官方源\n\n### 修改为淘宝源\n\n    npm config set registry http://registry.npm.taobao.org/\n\n### 修改为官方源\n\n    npm config set registry https://registry.npmjs.org/","slug":"修改npm源","published":1,"updated":"2018-08-21T00:43:30.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2b000vvcz1rzgns86z","content":"<p>修改npm源镜像为淘宝镜像</p>\n<p>发布自己的包时要还原为官方源</p>\n<h3 id=\"修改为淘宝源\"><a href=\"#修改为淘宝源\" class=\"headerlink\" title=\"修改为淘宝源\"></a>修改为淘宝源</h3><pre><code>npm config set registry http://registry.npm.taobao.org/\n</code></pre><h3 id=\"修改为官方源\"><a href=\"#修改为官方源\" class=\"headerlink\" title=\"修改为官方源\"></a>修改为官方源</h3><pre><code>npm config set registry https://registry.npmjs.org/\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>修改npm源镜像为淘宝镜像</p>\n<p>发布自己的包时要还原为官方源</p>\n<h3 id=\"修改为淘宝源\"><a href=\"#修改为淘宝源\" class=\"headerlink\" title=\"修改为淘宝源\"></a>修改为淘宝源</h3><pre><code>npm config set registry http://registry.npm.taobao.org/\n</code></pre><h3 id=\"修改为官方源\"><a href=\"#修改为官方源\" class=\"headerlink\" title=\"修改为官方源\"></a>修改为官方源</h3><pre><code>npm config set registry https://registry.npmjs.org/\n</code></pre>"},{"title":"解决Safari无法播放B站直播","date":"2017-10-15T08:01:33.000Z","_content":"Mac更新了以后发现B站直播无法看，缓冲的小圈圈一直转。\n\n想起来新的Safair有阻止自动播放的功能，看了下果然是阻止了\n\n> 解决方法：\n>\n>Sarfai > 偏好设置 > 网站 > 自动播放 > live.bilibili.com > 允许全部自动播放\n\n\n\n","source":"_posts/解决Safari无法播放B站直播.md","raw":"---\ntitle: 解决Safari无法播放B站直播\ndate: 2017-10-15 16:01:33\ntags:\n---\nMac更新了以后发现B站直播无法看，缓冲的小圈圈一直转。\n\n想起来新的Safair有阻止自动播放的功能，看了下果然是阻止了\n\n> 解决方法：\n>\n>Sarfai > 偏好设置 > 网站 > 自动播放 > live.bilibili.com > 允许全部自动播放\n\n\n\n","slug":"解决Safari无法播放B站直播","published":1,"updated":"2018-08-21T00:43:30.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2d000xvcz1k6ktnat3","content":"<p>Mac更新了以后发现B站直播无法看，缓冲的小圈圈一直转。</p>\n<p>想起来新的Safair有阻止自动播放的功能，看了下果然是阻止了</p>\n<blockquote>\n<p>解决方法：</p>\n<p>Sarfai &gt; 偏好设置 &gt; 网站 &gt; 自动播放 &gt; live.bilibili.com &gt; 允许全部自动播放</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Mac更新了以后发现B站直播无法看，缓冲的小圈圈一直转。</p>\n<p>想起来新的Safair有阻止自动播放的功能，看了下果然是阻止了</p>\n<blockquote>\n<p>解决方法：</p>\n<p>Sarfai &gt; 偏好设置 &gt; 网站 &gt; 自动播放 &gt; live.bilibili.com &gt; 允许全部自动播放</p>\n</blockquote>\n"},{"title":"常用命令记录","date":"2017-09-17T12:26:11.000Z","_content":"### Centos7中删除/var/log/message后如何重新记录日志\n\n重启rsyslog \n\n    systemctl stop rsyslog.service  \n    systemctl start rsyslog.service  \n\n","source":"_posts/常用命令记录.md","raw":"---\ntitle: 常用命令记录\ndate: 2017-09-17 20:26:11\ntags: 分享\n---\n### Centos7中删除/var/log/message后如何重新记录日志\n\n重启rsyslog \n\n    systemctl stop rsyslog.service  \n    systemctl start rsyslog.service  \n\n","slug":"常用命令记录","published":1,"updated":"2018-08-21T00:43:30.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2f000yvcz1owes0erh","content":"<h3 id=\"Centos7中删除-var-log-message后如何重新记录日志\"><a href=\"#Centos7中删除-var-log-message后如何重新记录日志\" class=\"headerlink\" title=\"Centos7中删除/var/log/message后如何重新记录日志\"></a>Centos7中删除/var/log/message后如何重新记录日志</h3><p>重启rsyslog </p>\n<pre><code>systemctl stop rsyslog.service  \nsystemctl start rsyslog.service  \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Centos7中删除-var-log-message后如何重新记录日志\"><a href=\"#Centos7中删除-var-log-message后如何重新记录日志\" class=\"headerlink\" title=\"Centos7中删除/var/log/message后如何重新记录日志\"></a>Centos7中删除/var/log/message后如何重新记录日志</h3><p>重启rsyslog </p>\n<pre><code>systemctl stop rsyslog.service  \nsystemctl start rsyslog.service  \n</code></pre>"},{"title":"跨域访问中的withCredentials","date":"2017-12-02T06:23:23.000Z","_content":"\nXMLHttpRequest.withCredentials属性是一个布尔值，用来表明在进行跨站的Access-Control 请求时是否使用证书类信息，例如cookies，授权的头文件或者TSL客户端证书。在同一个站点下使用withCredentials属性是无效的。\n\n如果在发送来自其他域的XMLHttpRequest请求之前，未设置withCredentials 为true，那么就不能为它自己的域设置cookie值。而通过设置withCredentials 为true获得的第三方cookies，将会依旧享受同源策略，因此不能被通过document.cookie或者从头部相应请求的脚本等访问。\n\n原生ajax请求中\n\n    var xhr = new XMLHttpRequest();\n\txhr.open('GET', 'http://example.com/', true);\n\txhr.withCredentials = true;\n\txhr.send(null);\n\n在 fetch 方法中，要想发送 Credentials ，则需要设置为“include”\n\n    fetch(url, {\n  \t\tcredentials: 'include'\n\t})\n\n在 jquery 的 ajax 中,将 xhrFields 中的 withCredentials 设置为 true\n\n    $.ajax({\n    url: a_cross_domain_url,\n    xhrFields: {\n      \t\twithCredentials: true\n   \t \t}\n\t});","source":"_posts/跨域访问中的withCredentials.md","raw":"---\ntitle: 跨域访问中的withCredentials\ndate: 2017-12-02 14:23:23\ntags: 前端\n---\n\nXMLHttpRequest.withCredentials属性是一个布尔值，用来表明在进行跨站的Access-Control 请求时是否使用证书类信息，例如cookies，授权的头文件或者TSL客户端证书。在同一个站点下使用withCredentials属性是无效的。\n\n如果在发送来自其他域的XMLHttpRequest请求之前，未设置withCredentials 为true，那么就不能为它自己的域设置cookie值。而通过设置withCredentials 为true获得的第三方cookies，将会依旧享受同源策略，因此不能被通过document.cookie或者从头部相应请求的脚本等访问。\n\n原生ajax请求中\n\n    var xhr = new XMLHttpRequest();\n\txhr.open('GET', 'http://example.com/', true);\n\txhr.withCredentials = true;\n\txhr.send(null);\n\n在 fetch 方法中，要想发送 Credentials ，则需要设置为“include”\n\n    fetch(url, {\n  \t\tcredentials: 'include'\n\t})\n\n在 jquery 的 ajax 中,将 xhrFields 中的 withCredentials 设置为 true\n\n    $.ajax({\n    url: a_cross_domain_url,\n    xhrFields: {\n      \t\twithCredentials: true\n   \t \t}\n\t});","slug":"跨域访问中的withCredentials","published":1,"updated":"2018-08-21T00:43:30.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2i0011vcz1jizwlcxn","content":"<p>XMLHttpRequest.withCredentials属性是一个布尔值，用来表明在进行跨站的Access-Control 请求时是否使用证书类信息，例如cookies，授权的头文件或者TSL客户端证书。在同一个站点下使用withCredentials属性是无效的。</p>\n<p>如果在发送来自其他域的XMLHttpRequest请求之前，未设置withCredentials 为true，那么就不能为它自己的域设置cookie值。而通过设置withCredentials 为true获得的第三方cookies，将会依旧享受同源策略，因此不能被通过document.cookie或者从头部相应请求的脚本等访问。</p>\n<p>原生ajax请求中</p>\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.open(&apos;GET&apos;, &apos;http://example.com/&apos;, true);\nxhr.withCredentials = true;\nxhr.send(null);\n</code></pre><p>在 fetch 方法中，要想发送 Credentials ，则需要设置为“include”</p>\n<pre><code>fetch(url, {\n      credentials: &apos;include&apos;\n})\n</code></pre><p>在 jquery 的 ajax 中,将 xhrFields 中的 withCredentials 设置为 true</p>\n<pre><code>$.ajax({\nurl: a_cross_domain_url,\nxhrFields: {\n          withCredentials: true\n        }\n});\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>XMLHttpRequest.withCredentials属性是一个布尔值，用来表明在进行跨站的Access-Control 请求时是否使用证书类信息，例如cookies，授权的头文件或者TSL客户端证书。在同一个站点下使用withCredentials属性是无效的。</p>\n<p>如果在发送来自其他域的XMLHttpRequest请求之前，未设置withCredentials 为true，那么就不能为它自己的域设置cookie值。而通过设置withCredentials 为true获得的第三方cookies，将会依旧享受同源策略，因此不能被通过document.cookie或者从头部相应请求的脚本等访问。</p>\n<p>原生ajax请求中</p>\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.open(&apos;GET&apos;, &apos;http://example.com/&apos;, true);\nxhr.withCredentials = true;\nxhr.send(null);\n</code></pre><p>在 fetch 方法中，要想发送 Credentials ，则需要设置为“include”</p>\n<pre><code>fetch(url, {\n      credentials: &apos;include&apos;\n})\n</code></pre><p>在 jquery 的 ajax 中,将 xhrFields 中的 withCredentials 设置为 true</p>\n<pre><code>$.ajax({\nurl: a_cross_domain_url,\nxhrFields: {\n          withCredentials: true\n        }\n});\n</code></pre>"},{"title":"面试小记","date":"2018-02-26T02:09:17.000Z","_content":"## 1. 清除浮动的几种方式，及各自应用的场景\n1. 利用空标签清除浮动 `clear: both`\n\n\t原理：添加一个空div，利用css的`clear: both`清除浮动，让父级div能自动获取到高度\n\t\n\t优点：通俗易懂，容易掌握\n\n\t缺点：会添加很多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦\n\n\t建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法\n\n2. 父级div定义 `overflow: hidden`\n\t原理：必须定义`width`或`zoom:1`，同时不能定义`height`，使用`overflow: hidden`时，浏览器会自动检查浮动区域的高度\n\n\t优点：简单，代码少，浏览器支持好\n\n\t缺点：不能和`position`配合使用，因为超出的尺寸的会被隐藏\n\n\t建议：只推荐没有使用`position`或对`overflow:hidden`理解比较深的朋友使用\n\n3. 父级div定义伪类`:after`和`zoom`(用于非IE浏览器)\n\n\t原理：IE8以上和非IE浏览器才支持:after，原理和方法1有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题\n\n\t优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）。\n\n\t缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持\n\n\t建议：推荐使用，建议定义公共类，以减少CSS代码\n`<div class = \"clearFloat\">\n   <div class = \"left\"> Left </div>\n   <div class = \"right\"> right </right>\n</div>`\n`.clearFloat:after{\n   display: block;\n   clear: both;\n\tcontent: '';\n   visibility: hidden;\n   height: 0;\n}`\n`.clearFloat{\n   *zoom:1\n}`\n`.left{\n   float: left;\n}`\n`right{\n   float: right;\n}`\n\n\t1) `display: block` 使生成的元素以块级元素显示,占满剩余空间;\n\n\t2) `height: 0` 避免生成内容破坏原有布局的高度。\n\n\t3) `visibility: hidden` 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;\n\n\t4）通过 `content: \".\"`生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 `content: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"`，有些版本可能content 里面内容为空，不推荐这样做的，firefox直到7.0 `content:\"\"` 仍然会产生额外的空隙；\n\n\t5）`zoom：1` 触发IE hasLayout。\n\t\n4. 父级div定义`height`\n\n\t原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。\n\n\t优点：简单，代码少，容易掌握\n\n\t缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题\n\t\n5. 父级div定义`overflow:auto`\n\n\t原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度\n\n\t优点：简单，代码少，浏览器支持好\n\n\t缺点：内部宽高超过父级div时，会出现滚动条。\n\n\t建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。\n\n\n## 2. JS的继承方式\n\n[JavaScript继承方式详解](https://segmentfault.com/a/1190000002440502)\n\n## 3. 请求中的超时处理\n\n## 4. git基本操作\n[菜鸟教程git](http://www.runoob.com/git/git-basic-operations.html)\n\n\n## 5. html5 新特性\n\n[新增特性](https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/what-is-html5.html)\n\n## 6. CSS3 新特性\n\n[CSS3 新特性](https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html)","source":"_posts/面试小记.md","raw":"---\ntitle: 面试小记\ndate: 2018-02-26 10:09:17\ntags: 前端\n---\n## 1. 清除浮动的几种方式，及各自应用的场景\n1. 利用空标签清除浮动 `clear: both`\n\n\t原理：添加一个空div，利用css的`clear: both`清除浮动，让父级div能自动获取到高度\n\t\n\t优点：通俗易懂，容易掌握\n\n\t缺点：会添加很多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦\n\n\t建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法\n\n2. 父级div定义 `overflow: hidden`\n\t原理：必须定义`width`或`zoom:1`，同时不能定义`height`，使用`overflow: hidden`时，浏览器会自动检查浮动区域的高度\n\n\t优点：简单，代码少，浏览器支持好\n\n\t缺点：不能和`position`配合使用，因为超出的尺寸的会被隐藏\n\n\t建议：只推荐没有使用`position`或对`overflow:hidden`理解比较深的朋友使用\n\n3. 父级div定义伪类`:after`和`zoom`(用于非IE浏览器)\n\n\t原理：IE8以上和非IE浏览器才支持:after，原理和方法1有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题\n\n\t优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）。\n\n\t缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持\n\n\t建议：推荐使用，建议定义公共类，以减少CSS代码\n`<div class = \"clearFloat\">\n   <div class = \"left\"> Left </div>\n   <div class = \"right\"> right </right>\n</div>`\n`.clearFloat:after{\n   display: block;\n   clear: both;\n\tcontent: '';\n   visibility: hidden;\n   height: 0;\n}`\n`.clearFloat{\n   *zoom:1\n}`\n`.left{\n   float: left;\n}`\n`right{\n   float: right;\n}`\n\n\t1) `display: block` 使生成的元素以块级元素显示,占满剩余空间;\n\n\t2) `height: 0` 避免生成内容破坏原有布局的高度。\n\n\t3) `visibility: hidden` 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;\n\n\t4）通过 `content: \".\"`生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 `content: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"`，有些版本可能content 里面内容为空，不推荐这样做的，firefox直到7.0 `content:\"\"` 仍然会产生额外的空隙；\n\n\t5）`zoom：1` 触发IE hasLayout。\n\t\n4. 父级div定义`height`\n\n\t原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。\n\n\t优点：简单，代码少，容易掌握\n\n\t缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题\n\t\n5. 父级div定义`overflow:auto`\n\n\t原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度\n\n\t优点：简单，代码少，浏览器支持好\n\n\t缺点：内部宽高超过父级div时，会出现滚动条。\n\n\t建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。\n\n\n## 2. JS的继承方式\n\n[JavaScript继承方式详解](https://segmentfault.com/a/1190000002440502)\n\n## 3. 请求中的超时处理\n\n## 4. git基本操作\n[菜鸟教程git](http://www.runoob.com/git/git-basic-operations.html)\n\n\n## 5. html5 新特性\n\n[新增特性](https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/what-is-html5.html)\n\n## 6. CSS3 新特性\n\n[CSS3 新特性](https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html)","slug":"面试小记","published":1,"updated":"2018-08-21T00:43:30.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2k0013vcz11nyxe8t0","content":"<h2 id=\"1-清除浮动的几种方式，及各自应用的场景\"><a href=\"#1-清除浮动的几种方式，及各自应用的场景\" class=\"headerlink\" title=\"1. 清除浮动的几种方式，及各自应用的场景\"></a>1. 清除浮动的几种方式，及各自应用的场景</h2><ol>\n<li><p>利用空标签清除浮动 <code>clear: both</code></p>\n<p> 原理：添加一个空div，利用css的<code>clear: both</code>清除浮动，让父级div能自动获取到高度</p>\n<p> 优点：通俗易懂，容易掌握</p>\n<p> 缺点：会添加很多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</p>\n<p> 建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法</p>\n</li>\n<li><p>父级div定义 <code>overflow: hidden</code><br> 原理：必须定义<code>width</code>或<code>zoom:1</code>，同时不能定义<code>height</code>，使用<code>overflow: hidden</code>时，浏览器会自动检查浮动区域的高度</p>\n<p> 优点：简单，代码少，浏览器支持好</p>\n<p> 缺点：不能和<code>position</code>配合使用，因为超出的尺寸的会被隐藏</p>\n<p> 建议：只推荐没有使用<code>position</code>或对<code>overflow:hidden</code>理解比较深的朋友使用</p>\n</li>\n<li><p>父级div定义伪类<code>:after</code>和<code>zoom</code>(用于非IE浏览器)</p>\n<p> 原理：IE8以上和非IE浏览器才支持:after，原理和方法1有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</p>\n<p> 优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）。</p>\n<p> 缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持</p>\n<p> 建议：推荐使用，建议定义公共类，以减少CSS代码<br><code>&lt;div class = &quot;clearFloat&quot;&gt;\n&lt;div class = &quot;left&quot;&gt; Left &lt;/div&gt;\n&lt;div class = &quot;right&quot;&gt; right &lt;/right&gt;\n&lt;/div&gt;</code><br><code>.clearFloat:after{\ndisplay: block;\nclear: both;\n content: &#39;&#39;;\nvisibility: hidden;\nheight: 0;\n}</code><br><code>.clearFloat{\n*zoom:1\n}</code><br><code>.left{\nfloat: left;\n}</code><br><code>right{\nfloat: right;\n}</code></p>\n<p> 1) <code>display: block</code> 使生成的元素以块级元素显示,占满剩余空间;</p>\n<p> 2) <code>height: 0</code> 避免生成内容破坏原有布局的高度。</p>\n<p> 3) <code>visibility: hidden</code> 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</p>\n<p> 4）通过 <code>content: &quot;.&quot;</code>生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 <code>content: &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</code>，有些版本可能content 里面内容为空，不推荐这样做的，firefox直到7.0 <code>content:&quot;&quot;</code> 仍然会产生额外的空隙；</p>\n<p> 5）<code>zoom：1</code> 触发IE hasLayout。</p>\n</li>\n<li><p>父级div定义<code>height</code></p>\n<p> 原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。</p>\n<p> 优点：简单，代码少，容易掌握</p>\n<p> 缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题</p>\n</li>\n<li><p>父级div定义<code>overflow:auto</code></p>\n<p> 原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度</p>\n<p> 优点：简单，代码少，浏览器支持好</p>\n<p> 缺点：内部宽高超过父级div时，会出现滚动条。</p>\n<p> 建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</p>\n</li>\n</ol>\n<h2 id=\"2-JS的继承方式\"><a href=\"#2-JS的继承方式\" class=\"headerlink\" title=\"2. JS的继承方式\"></a>2. JS的继承方式</h2><p><a href=\"https://segmentfault.com/a/1190000002440502\" target=\"_blank\" rel=\"external\">JavaScript继承方式详解</a></p>\n<h2 id=\"3-请求中的超时处理\"><a href=\"#3-请求中的超时处理\" class=\"headerlink\" title=\"3. 请求中的超时处理\"></a>3. 请求中的超时处理</h2><h2 id=\"4-git基本操作\"><a href=\"#4-git基本操作\" class=\"headerlink\" title=\"4. git基本操作\"></a>4. git基本操作</h2><p><a href=\"http://www.runoob.com/git/git-basic-operations.html\" target=\"_blank\" rel=\"external\">菜鸟教程git</a></p>\n<h2 id=\"5-html5-新特性\"><a href=\"#5-html5-新特性\" class=\"headerlink\" title=\"5. html5 新特性\"></a>5. html5 新特性</h2><p><a href=\"https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/what-is-html5.html\" target=\"_blank\" rel=\"external\">新增特性</a></p>\n<h2 id=\"6-CSS3-新特性\"><a href=\"#6-CSS3-新特性\" class=\"headerlink\" title=\"6. CSS3 新特性\"></a>6. CSS3 新特性</h2><p><a href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html\" target=\"_blank\" rel=\"external\">CSS3 新特性</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-清除浮动的几种方式，及各自应用的场景\"><a href=\"#1-清除浮动的几种方式，及各自应用的场景\" class=\"headerlink\" title=\"1. 清除浮动的几种方式，及各自应用的场景\"></a>1. 清除浮动的几种方式，及各自应用的场景</h2><ol>\n<li><p>利用空标签清除浮动 <code>clear: both</code></p>\n<p> 原理：添加一个空div，利用css的<code>clear: both</code>清除浮动，让父级div能自动获取到高度</p>\n<p> 优点：通俗易懂，容易掌握</p>\n<p> 缺点：会添加很多无意义的空标签，有违结构与表现的分离，在后期维护中将是噩梦</p>\n<p> 建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法</p>\n</li>\n<li><p>父级div定义 <code>overflow: hidden</code><br> 原理：必须定义<code>width</code>或<code>zoom:1</code>，同时不能定义<code>height</code>，使用<code>overflow: hidden</code>时，浏览器会自动检查浮动区域的高度</p>\n<p> 优点：简单，代码少，浏览器支持好</p>\n<p> 缺点：不能和<code>position</code>配合使用，因为超出的尺寸的会被隐藏</p>\n<p> 建议：只推荐没有使用<code>position</code>或对<code>overflow:hidden</code>理解比较深的朋友使用</p>\n</li>\n<li><p>父级div定义伪类<code>:after</code>和<code>zoom</code>(用于非IE浏览器)</p>\n<p> 原理：IE8以上和非IE浏览器才支持:after，原理和方法1有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题</p>\n<p> 优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）。</p>\n<p> 缺点：代码多，要两句代码结合使用，才能让主流浏览器都支持</p>\n<p> 建议：推荐使用，建议定义公共类，以减少CSS代码<br><code>&lt;div class = &quot;clearFloat&quot;&gt;\n&lt;div class = &quot;left&quot;&gt; Left &lt;/div&gt;\n&lt;div class = &quot;right&quot;&gt; right &lt;/right&gt;\n&lt;/div&gt;</code><br><code>.clearFloat:after{\ndisplay: block;\nclear: both;\n content: &#39;&#39;;\nvisibility: hidden;\nheight: 0;\n}</code><br><code>.clearFloat{\n*zoom:1\n}</code><br><code>.left{\nfloat: left;\n}</code><br><code>right{\nfloat: right;\n}</code></p>\n<p> 1) <code>display: block</code> 使生成的元素以块级元素显示,占满剩余空间;</p>\n<p> 2) <code>height: 0</code> 避免生成内容破坏原有布局的高度。</p>\n<p> 3) <code>visibility: hidden</code> 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</p>\n<p> 4）通过 <code>content: &quot;.&quot;</code>生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 <code>content: &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</code>，有些版本可能content 里面内容为空，不推荐这样做的，firefox直到7.0 <code>content:&quot;&quot;</code> 仍然会产生额外的空隙；</p>\n<p> 5）<code>zoom：1</code> 触发IE hasLayout。</p>\n</li>\n<li><p>父级div定义<code>height</code></p>\n<p> 原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。</p>\n<p> 优点：简单，代码少，容易掌握</p>\n<p> 缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题</p>\n</li>\n<li><p>父级div定义<code>overflow:auto</code></p>\n<p> 原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度</p>\n<p> 优点：简单，代码少，浏览器支持好</p>\n<p> 缺点：内部宽高超过父级div时，会出现滚动条。</p>\n<p> 建议：不推荐使用，如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</p>\n</li>\n</ol>\n<h2 id=\"2-JS的继承方式\"><a href=\"#2-JS的继承方式\" class=\"headerlink\" title=\"2. JS的继承方式\"></a>2. JS的继承方式</h2><p><a href=\"https://segmentfault.com/a/1190000002440502\" target=\"_blank\" rel=\"external\">JavaScript继承方式详解</a></p>\n<h2 id=\"3-请求中的超时处理\"><a href=\"#3-请求中的超时处理\" class=\"headerlink\" title=\"3. 请求中的超时处理\"></a>3. 请求中的超时处理</h2><h2 id=\"4-git基本操作\"><a href=\"#4-git基本操作\" class=\"headerlink\" title=\"4. git基本操作\"></a>4. git基本操作</h2><p><a href=\"http://www.runoob.com/git/git-basic-operations.html\" target=\"_blank\" rel=\"external\">菜鸟教程git</a></p>\n<h2 id=\"5-html5-新特性\"><a href=\"#5-html5-新特性\" class=\"headerlink\" title=\"5. html5 新特性\"></a>5. html5 新特性</h2><p><a href=\"https://leohxj.gitbooks.io/front-end-database/html-and-css-basic/what-is-html5.html\" target=\"_blank\" rel=\"external\">新增特性</a></p>\n<h2 id=\"6-CSS3-新特性\"><a href=\"#6-CSS3-新特性\" class=\"headerlink\" title=\"6. CSS3 新特性\"></a>6. CSS3 新特性</h2><p><a href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html\" target=\"_blank\" rel=\"external\">CSS3 新特性</a></p>\n"},{"title":"javascript 获取内外Ip","date":"2018-10-09T06:54:04.000Z","_content":"\n此方法不支持IE\n\n```javascript\n/**\n * Get the user IP throught the webkitRTCPeerConnection\n * @param onNewIP {Function} listener function to expose the IP locally\n * @return undefined\n */\nfunction getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs\n    //compatibility for firefox and chrome\n    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n    var pc = new myPeerConnection({\n        iceServers: []\n    }),\n    noop = function() {},\n    localIPs = {},\n    ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,\n    key;\n\n    function iterateIP(ip) {\n        if (!localIPs[ip]) onNewIP(ip);\n        localIPs[ip] = true;\n    }\n\n     //create a bogus data channel\n    pc.createDataChannel(\"\");\n\n    // create offer and set local description\n    pc.createOffer().then(function(sdp) {\n        sdp.sdp.split('\\n').forEach(function(line) {\n            if (line.indexOf('candidate') < 0) return;\n            line.match(ipRegex).forEach(iterateIP);\n        });\n        \n        pc.setLocalDescription(sdp, noop, noop);\n    }).catch(function(reason) {\n        // An error occurred, so handle the failure to connect\n    });\n\n    //listen for candidate events\n    pc.onicecandidate = function(ice) {\n        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;\n        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\n    };\n}\n\n// Usage\n\ngetUserIP(function(ip){\n    alert(\"Got IP! :\" + ip);\n});\n```\n\n[参考](https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only)","source":"_posts/javascript-获取内外Ip.md","raw":"---\ntitle: javascript 获取内外Ip\ndate: 2018-10-09 14:54:04\ntags: 前端\n\n---\n\n此方法不支持IE\n\n```javascript\n/**\n * Get the user IP throught the webkitRTCPeerConnection\n * @param onNewIP {Function} listener function to expose the IP locally\n * @return undefined\n */\nfunction getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs\n    //compatibility for firefox and chrome\n    var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n    var pc = new myPeerConnection({\n        iceServers: []\n    }),\n    noop = function() {},\n    localIPs = {},\n    ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,\n    key;\n\n    function iterateIP(ip) {\n        if (!localIPs[ip]) onNewIP(ip);\n        localIPs[ip] = true;\n    }\n\n     //create a bogus data channel\n    pc.createDataChannel(\"\");\n\n    // create offer and set local description\n    pc.createOffer().then(function(sdp) {\n        sdp.sdp.split('\\n').forEach(function(line) {\n            if (line.indexOf('candidate') < 0) return;\n            line.match(ipRegex).forEach(iterateIP);\n        });\n        \n        pc.setLocalDescription(sdp, noop, noop);\n    }).catch(function(reason) {\n        // An error occurred, so handle the failure to connect\n    });\n\n    //listen for candidate events\n    pc.onicecandidate = function(ice) {\n        if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;\n        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);\n    };\n}\n\n// Usage\n\ngetUserIP(function(ip){\n    alert(\"Got IP! :\" + ip);\n});\n```\n\n[参考](https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only)","slug":"javascript-获取内外Ip","published":1,"updated":"2018-10-09T07:01:03.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le2m0015vcz1cq9omljt","content":"<p>此方法不支持IE</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Get the user IP throught the webkitRTCPeerConnection</span></div><div class=\"line\"><span class=\"comment\"> * @param onNewIP &#123;Function&#125; listener function to expose the IP locally</span></div><div class=\"line\"><span class=\"comment\"> * @return undefined</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserIP</span>(<span class=\"params\">onNewIP</span>) </span>&#123; <span class=\"comment\">//  onNewIp - your listener function for new IPs</span></div><div class=\"line\">    <span class=\"comment\">//compatibility for firefox and chrome</span></div><div class=\"line\">    <span class=\"keyword\">var</span> myPeerConnection = <span class=\"built_in\">window</span>.RTCPeerConnection || <span class=\"built_in\">window</span>.mozRTCPeerConnection || <span class=\"built_in\">window</span>.webkitRTCPeerConnection;</div><div class=\"line\">    <span class=\"keyword\">var</span> pc = <span class=\"keyword\">new</span> myPeerConnection(&#123;</div><div class=\"line\">        iceServers: []</div><div class=\"line\">    &#125;),</div><div class=\"line\">    noop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">    localIPs = &#123;&#125;,</div><div class=\"line\">    ipRegex = <span class=\"regexp\">/([0-9]&#123;1,3&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/g</span>,</div><div class=\"line\">    key;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterateIP</span>(<span class=\"params\">ip</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!localIPs[ip]) onNewIP(ip);</div><div class=\"line\">        localIPs[ip] = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//create a bogus data channel</span></div><div class=\"line\">    pc.createDataChannel(<span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create offer and set local description</span></div><div class=\"line\">    pc.createOffer().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sdp</span>) </span>&#123;</div><div class=\"line\">        sdp.sdp.split(<span class=\"string\">'\\n'</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">line</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (line.indexOf(<span class=\"string\">'candidate'</span>) &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">            line.match(ipRegex).forEach(iterateIP);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        pc.setLocalDescription(sdp, noop, noop);</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// An error occurred, so handle the failure to connect</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//listen for candidate events</span></div><div class=\"line\">    pc.onicecandidate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ice</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) <span class=\"keyword\">return</span>;</div><div class=\"line\">        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Usage</span></div><div class=\"line\"></div><div class=\"line\">getUserIP(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ip</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Got IP! :\"</span> + ip);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><a href=\"https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only\" target=\"_blank\" rel=\"external\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>此方法不支持IE</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Get the user IP throught the webkitRTCPeerConnection</span></div><div class=\"line\"><span class=\"comment\"> * @param onNewIP &#123;Function&#125; listener function to expose the IP locally</span></div><div class=\"line\"><span class=\"comment\"> * @return undefined</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserIP</span>(<span class=\"params\">onNewIP</span>) </span>&#123; <span class=\"comment\">//  onNewIp - your listener function for new IPs</span></div><div class=\"line\">    <span class=\"comment\">//compatibility for firefox and chrome</span></div><div class=\"line\">    <span class=\"keyword\">var</span> myPeerConnection = <span class=\"built_in\">window</span>.RTCPeerConnection || <span class=\"built_in\">window</span>.mozRTCPeerConnection || <span class=\"built_in\">window</span>.webkitRTCPeerConnection;</div><div class=\"line\">    <span class=\"keyword\">var</span> pc = <span class=\"keyword\">new</span> myPeerConnection(&#123;</div><div class=\"line\">        iceServers: []</div><div class=\"line\">    &#125;),</div><div class=\"line\">    noop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">    localIPs = &#123;&#125;,</div><div class=\"line\">    ipRegex = <span class=\"regexp\">/([0-9]&#123;1,3&#125;(\\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/g</span>,</div><div class=\"line\">    key;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iterateIP</span>(<span class=\"params\">ip</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!localIPs[ip]) onNewIP(ip);</div><div class=\"line\">        localIPs[ip] = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">//create a bogus data channel</span></div><div class=\"line\">    pc.createDataChannel(<span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// create offer and set local description</span></div><div class=\"line\">    pc.createOffer().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sdp</span>) </span>&#123;</div><div class=\"line\">        sdp.sdp.split(<span class=\"string\">'\\n'</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">line</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (line.indexOf(<span class=\"string\">'candidate'</span>) &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">            line.match(ipRegex).forEach(iterateIP);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        pc.setLocalDescription(sdp, noop, noop);</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// An error occurred, so handle the failure to connect</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//listen for candidate events</span></div><div class=\"line\">    pc.onicecandidate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ice</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) <span class=\"keyword\">return</span>;</div><div class=\"line\">        ice.candidate.candidate.match(ipRegex).forEach(iterateIP);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Usage</span></div><div class=\"line\"></div><div class=\"line\">getUserIP(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ip</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Got IP! :\"</span> + ip);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><a href=\"https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only\" target=\"_blank\" rel=\"external\">参考</a></p>\n"},{"layout":"关于","title":"package-lock 你想知道的一切","date":"2018-08-21T09:45:18.000Z","_content":"\n## [文章原文地址](https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8)\n\n## 前言\n\n在npm升级到5.x.x以后，会自动在目录下生成一个名为Package-lock.json的文件。文件内容与package.json相似，但更为详细。虽然可以放任这个文件不管，但是时间长了就可能会出现依赖丢失或者安装错误版本依赖的情况。我们可以删除 package-lock.json 这个文件重新 npm install 。不过，这样似乎不妥。\n\n## 总体而言\n\n* 如果你使用的是npm ^5.x.x ，package-lock.json 文件会自动生成\n* 应该使用package-lock文件保证安装的一致性和依赖的兼容性\n* 千万不要把package-lock提交到你的版本控制系统\n* 自从npm ^5.1.x 起，package.josn 文件能够修饰 package-lock.json 文件了，所以问题会少一些。\n* 不再需要删除package-lock文件了，只要 npm install 即可\n* 如果你的应用提供了API，使用semver，并且遵守semver的规则\n\n## 背景\n\n### 版本控制\n\n在了解 package-lock 和 package.json 之前，首先要了解版本控制。如果你正构建一个应用有对外的接口，你应该表明你的改动会对第三方调用造成怎样的影响。通过版本控制，这轻而易举。版本号由三部分构成： X,Y,Z 分别代表主要的，次要的，补丁版本。补丁版本改变代表bug修复，不会影响任何事情。次要版本修改代表新功能添加，不会对固有功能影响。主版本的修改则代表着兼容性被打破。如果使用者不对主版本修改做适配，问题就很严重了。\n\n### 包管理\n\n你的项目可能有上百个依赖，而每一个依赖都有数量不少的依赖。为了不陷入依赖地狱，npm因此诞生。\n\n当你安装一个包的时候，入口被添加到package.json文件，包含名字及版本。在版本定义中，npm还支持一些通配符。npm默认安装最新版本，然后创建一个标记，例如 ^2.1.12 代表最低版本，但是主版本号相同的高版本都可以使用。毕竟，次版本和补丁版本都是安全的。\n\n### 项目分享\n\n利用package.json真正的好处是，任何人都能通过这个文件安装依赖让你的应用跑起来。但是意外时常发生。\n\n比如我们创建了一个使用express的项目，在我使用 npm install express — save 安装的时候express的最新版本是4.15.4。那么^4.15.14 的版本号就被添加到package.json文件中。不过，express的维护者在明天修复了一个bug，最新的版本号变为^4.15.15。这时有人想为你的代码提供贡献，当他clone了你的代码，npm install的时候，因为express的最新版本变味了^4.15.15，他安装的依赖也成为了^4.15.15。理论上讲，这应该兼容，但是可能express的维护者在发布^4.15.15版本时改出了一个问题，那么你和你的代码贡献者使用的express将会不同。\n\n### Package-lock\n\n### 目标\n\npackage-lock 就是为了解决上述问题而生的。\n\n### 格式\n\n指定的版本，模块的地址（URL），模块的hash值，包的requires，包的依赖，这些组成了package-lock文件\n\n```json\n\"express\": {\n      \"version\": \"4.15.4\",\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\",\n      \"integrity\": \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\",\n      \"requires\": {\n        \"accepts\": \"1.3.3\",\n        \"array-flatten\": \"1.1.1\",\n        \"content-disposition\": \"0.5.2\",\n        \"content-type\": \"1.0.2\",\n        \"cookie\": \"0.3.1\",\n        \"cookie-signature\": \"1.0.6\",\n        \"debug\": \"2.6.8\",\n        \"depd\": \"1.1.1\",\n        \"encodeurl\": \"1.0.1\",\n        \"escape-html\": \"1.0.3\",\n        \"etag\": \"1.8.0\",\n        \"finalhandler\": \"1.0.4\",\n        \"fresh\": \"0.5.0\",\n        \"merge-descriptors\": \"1.0.1\",\n        \"methods\": \"1.1.2\",\n        \"on-finished\": \"2.3.0\",\n        \"parseurl\": \"1.3.1\",\n        \"path-to-regexp\": \"0.1.7\",\n        \"proxy-addr\": \"1.1.5\",\n        \"qs\": \"6.5.0\",\n        \"range-parser\": \"1.2.0\",\n        \"send\": \"0.15.4\",\n        \"serve-static\": \"1.12.4\",\n        \"setprototypeof\": \"1.0.3\",\n        \"statuses\": \"1.3.1\",\n        \"type-is\": \"1.6.15\",\n        \"utils-merge\": \"1.0.0\",\n        \"vary\": \"1.1.1\"\n      }\n    },\n```\n\n同样，requires里的每个package都能找到入口信息。\n\n随后，人们不再使用package.json解决安装包，而是使用package-lock.json。因为它指定了所有需要的包的版本，包下载地址，哈希值。每次安装依赖的结果必然相同，无论何时何地。\n\n## 争议的存在\n\n虽然package-lock解决了一个普遍的问题，但是为什么还是有很多人推崇禁用它或者质疑它是否真的好用。\n\n在npm 5.x.x以前，人们习惯了使用package.json维护项目的依赖。但是当package-lock出现时，它跟人们预期的相反，修改package.json并不会反映到package-lock上。\n\n比如：一个包在package和package-lock都有记录，手动修改了package里的版本号然后npm install，相应的包并不会安装，因为有package-lock里仍然为旧版本。\n\n再比如：一个包只存在于package-lock中，另一个开发者根据package.json安装依赖就会丢失这个包。\n\n人们不知道哪里出了问题，要不就是删除package-lock重新npm install，要不就是直接禁用package-lock.\n\n问题的源头就是到底哪个文件才是决定依赖树的选择在左右摇摆，好在npm的维护人员决定让对package.json文件的更改自动与package-lock文件同步，发布于npm v5.1.0。","source":"_posts/package-lock-你想知道的一切.md","raw":"---\nlayout: 关于\ntitle: package-lock 你想知道的一切\ndate: 2018-08-21 17:45:18\ntags: 前端 分享\n---\n\n## [文章原文地址](https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8)\n\n## 前言\n\n在npm升级到5.x.x以后，会自动在目录下生成一个名为Package-lock.json的文件。文件内容与package.json相似，但更为详细。虽然可以放任这个文件不管，但是时间长了就可能会出现依赖丢失或者安装错误版本依赖的情况。我们可以删除 package-lock.json 这个文件重新 npm install 。不过，这样似乎不妥。\n\n## 总体而言\n\n* 如果你使用的是npm ^5.x.x ，package-lock.json 文件会自动生成\n* 应该使用package-lock文件保证安装的一致性和依赖的兼容性\n* 千万不要把package-lock提交到你的版本控制系统\n* 自从npm ^5.1.x 起，package.josn 文件能够修饰 package-lock.json 文件了，所以问题会少一些。\n* 不再需要删除package-lock文件了，只要 npm install 即可\n* 如果你的应用提供了API，使用semver，并且遵守semver的规则\n\n## 背景\n\n### 版本控制\n\n在了解 package-lock 和 package.json 之前，首先要了解版本控制。如果你正构建一个应用有对外的接口，你应该表明你的改动会对第三方调用造成怎样的影响。通过版本控制，这轻而易举。版本号由三部分构成： X,Y,Z 分别代表主要的，次要的，补丁版本。补丁版本改变代表bug修复，不会影响任何事情。次要版本修改代表新功能添加，不会对固有功能影响。主版本的修改则代表着兼容性被打破。如果使用者不对主版本修改做适配，问题就很严重了。\n\n### 包管理\n\n你的项目可能有上百个依赖，而每一个依赖都有数量不少的依赖。为了不陷入依赖地狱，npm因此诞生。\n\n当你安装一个包的时候，入口被添加到package.json文件，包含名字及版本。在版本定义中，npm还支持一些通配符。npm默认安装最新版本，然后创建一个标记，例如 ^2.1.12 代表最低版本，但是主版本号相同的高版本都可以使用。毕竟，次版本和补丁版本都是安全的。\n\n### 项目分享\n\n利用package.json真正的好处是，任何人都能通过这个文件安装依赖让你的应用跑起来。但是意外时常发生。\n\n比如我们创建了一个使用express的项目，在我使用 npm install express — save 安装的时候express的最新版本是4.15.4。那么^4.15.14 的版本号就被添加到package.json文件中。不过，express的维护者在明天修复了一个bug，最新的版本号变为^4.15.15。这时有人想为你的代码提供贡献，当他clone了你的代码，npm install的时候，因为express的最新版本变味了^4.15.15，他安装的依赖也成为了^4.15.15。理论上讲，这应该兼容，但是可能express的维护者在发布^4.15.15版本时改出了一个问题，那么你和你的代码贡献者使用的express将会不同。\n\n### Package-lock\n\n### 目标\n\npackage-lock 就是为了解决上述问题而生的。\n\n### 格式\n\n指定的版本，模块的地址（URL），模块的hash值，包的requires，包的依赖，这些组成了package-lock文件\n\n```json\n\"express\": {\n      \"version\": \"4.15.4\",\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\",\n      \"integrity\": \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\",\n      \"requires\": {\n        \"accepts\": \"1.3.3\",\n        \"array-flatten\": \"1.1.1\",\n        \"content-disposition\": \"0.5.2\",\n        \"content-type\": \"1.0.2\",\n        \"cookie\": \"0.3.1\",\n        \"cookie-signature\": \"1.0.6\",\n        \"debug\": \"2.6.8\",\n        \"depd\": \"1.1.1\",\n        \"encodeurl\": \"1.0.1\",\n        \"escape-html\": \"1.0.3\",\n        \"etag\": \"1.8.0\",\n        \"finalhandler\": \"1.0.4\",\n        \"fresh\": \"0.5.0\",\n        \"merge-descriptors\": \"1.0.1\",\n        \"methods\": \"1.1.2\",\n        \"on-finished\": \"2.3.0\",\n        \"parseurl\": \"1.3.1\",\n        \"path-to-regexp\": \"0.1.7\",\n        \"proxy-addr\": \"1.1.5\",\n        \"qs\": \"6.5.0\",\n        \"range-parser\": \"1.2.0\",\n        \"send\": \"0.15.4\",\n        \"serve-static\": \"1.12.4\",\n        \"setprototypeof\": \"1.0.3\",\n        \"statuses\": \"1.3.1\",\n        \"type-is\": \"1.6.15\",\n        \"utils-merge\": \"1.0.0\",\n        \"vary\": \"1.1.1\"\n      }\n    },\n```\n\n同样，requires里的每个package都能找到入口信息。\n\n随后，人们不再使用package.json解决安装包，而是使用package-lock.json。因为它指定了所有需要的包的版本，包下载地址，哈希值。每次安装依赖的结果必然相同，无论何时何地。\n\n## 争议的存在\n\n虽然package-lock解决了一个普遍的问题，但是为什么还是有很多人推崇禁用它或者质疑它是否真的好用。\n\n在npm 5.x.x以前，人们习惯了使用package.json维护项目的依赖。但是当package-lock出现时，它跟人们预期的相反，修改package.json并不会反映到package-lock上。\n\n比如：一个包在package和package-lock都有记录，手动修改了package里的版本号然后npm install，相应的包并不会安装，因为有package-lock里仍然为旧版本。\n\n再比如：一个包只存在于package-lock中，另一个开发者根据package.json安装依赖就会丢失这个包。\n\n人们不知道哪里出了问题，要不就是删除package-lock重新npm install，要不就是直接禁用package-lock.\n\n问题的源头就是到底哪个文件才是决定依赖树的选择在左右摇摆，好在npm的维护人员决定让对package.json文件的更改自动与package-lock文件同步，发布于npm v5.1.0。","slug":"package-lock-你想知道的一切","published":1,"updated":"2018-08-22T09:18:07.626Z","comments":1,"photos":[],"link":"","_id":"cjq24le310019vcz1gyvpo3fs","content":"<h2 id=\"文章原文地址\"><a href=\"#文章原文地址\" class=\"headerlink\" title=\"文章原文地址\"></a><a href=\"https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8\" target=\"_blank\" rel=\"external\">文章原文地址</a></h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在npm升级到5.x.x以后，会自动在目录下生成一个名为Package-lock.json的文件。文件内容与package.json相似，但更为详细。虽然可以放任这个文件不管，但是时间长了就可能会出现依赖丢失或者安装错误版本依赖的情况。我们可以删除 package-lock.json 这个文件重新 npm install 。不过，这样似乎不妥。</p>\n<h2 id=\"总体而言\"><a href=\"#总体而言\" class=\"headerlink\" title=\"总体而言\"></a>总体而言</h2><ul>\n<li>如果你使用的是npm ^5.x.x ，package-lock.json 文件会自动生成</li>\n<li>应该使用package-lock文件保证安装的一致性和依赖的兼容性</li>\n<li>千万不要把package-lock提交到你的版本控制系统</li>\n<li>自从npm ^5.1.x 起，package.josn 文件能够修饰 package-lock.json 文件了，所以问题会少一些。</li>\n<li>不再需要删除package-lock文件了，只要 npm install 即可</li>\n<li>如果你的应用提供了API，使用semver，并且遵守semver的规则</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>在了解 package-lock 和 package.json 之前，首先要了解版本控制。如果你正构建一个应用有对外的接口，你应该表明你的改动会对第三方调用造成怎样的影响。通过版本控制，这轻而易举。版本号由三部分构成： X,Y,Z 分别代表主要的，次要的，补丁版本。补丁版本改变代表bug修复，不会影响任何事情。次要版本修改代表新功能添加，不会对固有功能影响。主版本的修改则代表着兼容性被打破。如果使用者不对主版本修改做适配，问题就很严重了。</p>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>你的项目可能有上百个依赖，而每一个依赖都有数量不少的依赖。为了不陷入依赖地狱，npm因此诞生。</p>\n<p>当你安装一个包的时候，入口被添加到package.json文件，包含名字及版本。在版本定义中，npm还支持一些通配符。npm默认安装最新版本，然后创建一个标记，例如 ^2.1.12 代表最低版本，但是主版本号相同的高版本都可以使用。毕竟，次版本和补丁版本都是安全的。</p>\n<h3 id=\"项目分享\"><a href=\"#项目分享\" class=\"headerlink\" title=\"项目分享\"></a>项目分享</h3><p>利用package.json真正的好处是，任何人都能通过这个文件安装依赖让你的应用跑起来。但是意外时常发生。</p>\n<p>比如我们创建了一个使用express的项目，在我使用 npm install express — save 安装的时候express的最新版本是4.15.4。那么^4.15.14 的版本号就被添加到package.json文件中。不过，express的维护者在明天修复了一个bug，最新的版本号变为^4.15.15。这时有人想为你的代码提供贡献，当他clone了你的代码，npm install的时候，因为express的最新版本变味了^4.15.15，他安装的依赖也成为了^4.15.15。理论上讲，这应该兼容，但是可能express的维护者在发布^4.15.15版本时改出了一个问题，那么你和你的代码贡献者使用的express将会不同。</p>\n<h3 id=\"Package-lock\"><a href=\"#Package-lock\" class=\"headerlink\" title=\"Package-lock\"></a>Package-lock</h3><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>package-lock 就是为了解决上述问题而生的。</p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>指定的版本，模块的地址（URL），模块的hash值，包的requires，包的依赖，这些组成了package-lock文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"express\": &#123;</div><div class=\"line\">      \"version\": \"4.15.4\",</div><div class=\"line\">      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\",</div><div class=\"line\">      \"integrity\": \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\",</div><div class=\"line\">      \"requires\": &#123;</div><div class=\"line\">        \"accepts\": \"1.3.3\",</div><div class=\"line\">        \"array-flatten\": \"1.1.1\",</div><div class=\"line\">        \"content-disposition\": \"0.5.2\",</div><div class=\"line\">        \"content-type\": \"1.0.2\",</div><div class=\"line\">        \"cookie\": \"0.3.1\",</div><div class=\"line\">        \"cookie-signature\": \"1.0.6\",</div><div class=\"line\">        \"debug\": \"2.6.8\",</div><div class=\"line\">        \"depd\": \"1.1.1\",</div><div class=\"line\">        \"encodeurl\": \"1.0.1\",</div><div class=\"line\">        \"escape-html\": \"1.0.3\",</div><div class=\"line\">        \"etag\": \"1.8.0\",</div><div class=\"line\">        \"finalhandler\": \"1.0.4\",</div><div class=\"line\">        \"fresh\": \"0.5.0\",</div><div class=\"line\">        \"merge-descriptors\": \"1.0.1\",</div><div class=\"line\">        \"methods\": \"1.1.2\",</div><div class=\"line\">        \"on-finished\": \"2.3.0\",</div><div class=\"line\">        \"parseurl\": \"1.3.1\",</div><div class=\"line\">        \"path-to-regexp\": \"0.1.7\",</div><div class=\"line\">        \"proxy-addr\": \"1.1.5\",</div><div class=\"line\">        \"qs\": \"6.5.0\",</div><div class=\"line\">        \"range-parser\": \"1.2.0\",</div><div class=\"line\">        \"send\": \"0.15.4\",</div><div class=\"line\">        \"serve-static\": \"1.12.4\",</div><div class=\"line\">        \"setprototypeof\": \"1.0.3\",</div><div class=\"line\">        \"statuses\": \"1.3.1\",</div><div class=\"line\">        \"type-is\": \"1.6.15\",</div><div class=\"line\">        \"utils-merge\": \"1.0.0\",</div><div class=\"line\">        \"vary\": \"1.1.1\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<p>同样，requires里的每个package都能找到入口信息。</p>\n<p>随后，人们不再使用package.json解决安装包，而是使用package-lock.json。因为它指定了所有需要的包的版本，包下载地址，哈希值。每次安装依赖的结果必然相同，无论何时何地。</p>\n<h2 id=\"争议的存在\"><a href=\"#争议的存在\" class=\"headerlink\" title=\"争议的存在\"></a>争议的存在</h2><p>虽然package-lock解决了一个普遍的问题，但是为什么还是有很多人推崇禁用它或者质疑它是否真的好用。</p>\n<p>在npm 5.x.x以前，人们习惯了使用package.json维护项目的依赖。但是当package-lock出现时，它跟人们预期的相反，修改package.json并不会反映到package-lock上。</p>\n<p>比如：一个包在package和package-lock都有记录，手动修改了package里的版本号然后npm install，相应的包并不会安装，因为有package-lock里仍然为旧版本。</p>\n<p>再比如：一个包只存在于package-lock中，另一个开发者根据package.json安装依赖就会丢失这个包。</p>\n<p>人们不知道哪里出了问题，要不就是删除package-lock重新npm install，要不就是直接禁用package-lock.</p>\n<p>问题的源头就是到底哪个文件才是决定依赖树的选择在左右摇摆，好在npm的维护人员决定让对package.json文件的更改自动与package-lock文件同步，发布于npm v5.1.0。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文章原文地址\"><a href=\"#文章原文地址\" class=\"headerlink\" title=\"文章原文地址\"></a><a href=\"https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8\" target=\"_blank\" rel=\"external\">文章原文地址</a></h2><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在npm升级到5.x.x以后，会自动在目录下生成一个名为Package-lock.json的文件。文件内容与package.json相似，但更为详细。虽然可以放任这个文件不管，但是时间长了就可能会出现依赖丢失或者安装错误版本依赖的情况。我们可以删除 package-lock.json 这个文件重新 npm install 。不过，这样似乎不妥。</p>\n<h2 id=\"总体而言\"><a href=\"#总体而言\" class=\"headerlink\" title=\"总体而言\"></a>总体而言</h2><ul>\n<li>如果你使用的是npm ^5.x.x ，package-lock.json 文件会自动生成</li>\n<li>应该使用package-lock文件保证安装的一致性和依赖的兼容性</li>\n<li>千万不要把package-lock提交到你的版本控制系统</li>\n<li>自从npm ^5.1.x 起，package.josn 文件能够修饰 package-lock.json 文件了，所以问题会少一些。</li>\n<li>不再需要删除package-lock文件了，只要 npm install 即可</li>\n<li>如果你的应用提供了API，使用semver，并且遵守semver的规则</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>在了解 package-lock 和 package.json 之前，首先要了解版本控制。如果你正构建一个应用有对外的接口，你应该表明你的改动会对第三方调用造成怎样的影响。通过版本控制，这轻而易举。版本号由三部分构成： X,Y,Z 分别代表主要的，次要的，补丁版本。补丁版本改变代表bug修复，不会影响任何事情。次要版本修改代表新功能添加，不会对固有功能影响。主版本的修改则代表着兼容性被打破。如果使用者不对主版本修改做适配，问题就很严重了。</p>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>你的项目可能有上百个依赖，而每一个依赖都有数量不少的依赖。为了不陷入依赖地狱，npm因此诞生。</p>\n<p>当你安装一个包的时候，入口被添加到package.json文件，包含名字及版本。在版本定义中，npm还支持一些通配符。npm默认安装最新版本，然后创建一个标记，例如 ^2.1.12 代表最低版本，但是主版本号相同的高版本都可以使用。毕竟，次版本和补丁版本都是安全的。</p>\n<h3 id=\"项目分享\"><a href=\"#项目分享\" class=\"headerlink\" title=\"项目分享\"></a>项目分享</h3><p>利用package.json真正的好处是，任何人都能通过这个文件安装依赖让你的应用跑起来。但是意外时常发生。</p>\n<p>比如我们创建了一个使用express的项目，在我使用 npm install express — save 安装的时候express的最新版本是4.15.4。那么^4.15.14 的版本号就被添加到package.json文件中。不过，express的维护者在明天修复了一个bug，最新的版本号变为^4.15.15。这时有人想为你的代码提供贡献，当他clone了你的代码，npm install的时候，因为express的最新版本变味了^4.15.15，他安装的依赖也成为了^4.15.15。理论上讲，这应该兼容，但是可能express的维护者在发布^4.15.15版本时改出了一个问题，那么你和你的代码贡献者使用的express将会不同。</p>\n<h3 id=\"Package-lock\"><a href=\"#Package-lock\" class=\"headerlink\" title=\"Package-lock\"></a>Package-lock</h3><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>package-lock 就是为了解决上述问题而生的。</p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>指定的版本，模块的地址（URL），模块的hash值，包的requires，包的依赖，这些组成了package-lock文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"express\": &#123;</div><div class=\"line\">      \"version\": \"4.15.4\",</div><div class=\"line\">      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.15.4.tgz\",</div><div class=\"line\">      \"integrity\": \"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=\",</div><div class=\"line\">      \"requires\": &#123;</div><div class=\"line\">        \"accepts\": \"1.3.3\",</div><div class=\"line\">        \"array-flatten\": \"1.1.1\",</div><div class=\"line\">        \"content-disposition\": \"0.5.2\",</div><div class=\"line\">        \"content-type\": \"1.0.2\",</div><div class=\"line\">        \"cookie\": \"0.3.1\",</div><div class=\"line\">        \"cookie-signature\": \"1.0.6\",</div><div class=\"line\">        \"debug\": \"2.6.8\",</div><div class=\"line\">        \"depd\": \"1.1.1\",</div><div class=\"line\">        \"encodeurl\": \"1.0.1\",</div><div class=\"line\">        \"escape-html\": \"1.0.3\",</div><div class=\"line\">        \"etag\": \"1.8.0\",</div><div class=\"line\">        \"finalhandler\": \"1.0.4\",</div><div class=\"line\">        \"fresh\": \"0.5.0\",</div><div class=\"line\">        \"merge-descriptors\": \"1.0.1\",</div><div class=\"line\">        \"methods\": \"1.1.2\",</div><div class=\"line\">        \"on-finished\": \"2.3.0\",</div><div class=\"line\">        \"parseurl\": \"1.3.1\",</div><div class=\"line\">        \"path-to-regexp\": \"0.1.7\",</div><div class=\"line\">        \"proxy-addr\": \"1.1.5\",</div><div class=\"line\">        \"qs\": \"6.5.0\",</div><div class=\"line\">        \"range-parser\": \"1.2.0\",</div><div class=\"line\">        \"send\": \"0.15.4\",</div><div class=\"line\">        \"serve-static\": \"1.12.4\",</div><div class=\"line\">        \"setprototypeof\": \"1.0.3\",</div><div class=\"line\">        \"statuses\": \"1.3.1\",</div><div class=\"line\">        \"type-is\": \"1.6.15\",</div><div class=\"line\">        \"utils-merge\": \"1.0.0\",</div><div class=\"line\">        \"vary\": \"1.1.1\"</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<p>同样，requires里的每个package都能找到入口信息。</p>\n<p>随后，人们不再使用package.json解决安装包，而是使用package-lock.json。因为它指定了所有需要的包的版本，包下载地址，哈希值。每次安装依赖的结果必然相同，无论何时何地。</p>\n<h2 id=\"争议的存在\"><a href=\"#争议的存在\" class=\"headerlink\" title=\"争议的存在\"></a>争议的存在</h2><p>虽然package-lock解决了一个普遍的问题，但是为什么还是有很多人推崇禁用它或者质疑它是否真的好用。</p>\n<p>在npm 5.x.x以前，人们习惯了使用package.json维护项目的依赖。但是当package-lock出现时，它跟人们预期的相反，修改package.json并不会反映到package-lock上。</p>\n<p>比如：一个包在package和package-lock都有记录，手动修改了package里的版本号然后npm install，相应的包并不会安装，因为有package-lock里仍然为旧版本。</p>\n<p>再比如：一个包只存在于package-lock中，另一个开发者根据package.json安装依赖就会丢失这个包。</p>\n<p>人们不知道哪里出了问题，要不就是删除package-lock重新npm install，要不就是直接禁用package-lock.</p>\n<p>问题的源头就是到底哪个文件才是决定依赖树的选择在左右摇摆，好在npm的维护人员决定让对package.json文件的更改自动与package-lock文件同步，发布于npm v5.1.0。</p>\n"},{"title":"JavaScript 模块详解：CommonJS vs AMD vs ES2015","date":"2017-09-09T08:43:44.000Z","_content":">随着js的发展，命名空间和依赖关系越来越难处理。许多处理办法应运而生，本文就探索了目前不同的应对模块的方法。\n\n## 为什么需要模块化？\n\n如果你熟悉其他语言，你会注意到有封装和依赖的内容。软件的不同部分单独开发，需要时便组装到一起，这样避免冲突就很重要。\n\n封装不仅可以防止冲突，同时也能简化开发。\n\n在处理依赖模块时，传统的浏览器端开发中，解决依赖关系是开发人员的工作。需要保证模块的加载顺序正确，就比如这个例子：\n    \t\n    <!DOCTYPE html>\n\t<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Backbone.js Todos</title>\n        <link rel=\"stylesheet\" href=\"todos.css\"/>\n    </head>\n\n    <body>\n        <script src=\"../../test/vendor/json2.js\"></script>\n        <script src=\"../../test/vendor/jquery.js\"></script>\n        <script src=\"../../test/vendor/underscore.js\"></script>\n        <script src=\"../../backbone.js\"></script>\n        <script src=\"../backbone.localStorage.js\"></script>\n        <script src=\"todos.js\"></script>\n    </body>\n\n    <!-- (...) -->\n\t</html>\n\t\n随着js越搞越复杂，这东西就越来越乱。重构时就有问题了：我这个新的依赖该放哪里才对？\n\n所以就有了下面这堆方法。\n\n## 一个有特色的方法\n\n叫 The Revealing Module Pattern，我不知道怎么翻译，谷歌翻译过来是显示模块模式。\n\n就是在很久以前，人们没有办法，想出了这个东西。一个函数。\n\n\tvar myRevealingModule = (function () {\n    var privateVar = \"Ben Cherry\",\n        publicVar = \"Hey there!\";\n\n    function privateFunction() {\n        console.log( \"Name:\" + privateVar );\n    }\n\n    function publicSetName( strName ) {\n        privateVar = strName;\n    }\n\n    function publicGetName() {\n        privateFunction();\n    }\n\n    // Reveal public pointers to\n    // private functions and properties\n    return {\n        setName: publicSetName,\n        greeting: publicVar,\n        getName: publicGetName\n    };\n\t})();\n\n\tmyRevealingModule.setName( \"Paul Kinlan\" );\n\n\n在ES6之前，JS中作用域之在函数级别。换句话说，函数内绑定的内容不会被函数外访问到。这样，我们不就有私有的空间了嘛。\n\n上面那个例子里，我们把模块都放在函数里，然后把需要暴露的return出去，这样大功告成。并且没有必要用var和立即执行函数，命名函数也是可以的。\n\n对于封装的问题，这个解决方法还是不错的，但是依赖加载似乎就没啥用。\n\n*优点：简单，多个模块可以在一个文件中。*\n\n*缺点：没有办法科学导入模块。依赖需要手动加载。不可能异步。环状依赖会有大麻烦。很难应用静态模块分析。*\n\n## CommonJS\n\nCommonJS项目的诞生是为了规范化服务器端JavaScript开发，其中就包括模块化。Node.js的开发者一开始打算遵循CommonJS的规范，但是后来决定反对。\n\n涉及到模块时，Node.js的实现会非常受影响：\n    \t\n    \t// In circle.js\n    \tconst PI = Math.PI;\n\n    \texports.area = (r) => PI * r * r;\n\n    \texports.circumference = (r) => 2 * PI * r;\n\n    \t// In some file\n    \tconst circle = require('./circle.js');\n    \tconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n\n在库上面一些抽象的模块系统弥补了Node.js模块系统和CommonJS之间的隔阂。比如在Node和CommonJS的模块里面都实质上有两个元素：require和exports。require可以从其他模块导入到当前环境。传递给require的参数是模块的id。在Nodejs中，是存在node_modules目录中模块的名字。exports是一个特别的对象：任何在里面的内容会作为公有元素导出。字段名字被保留。一个Node和CommonJS之间奇特的不同就出现在module.exports对象的构成。在Node中，moudle.exports是一个真正特殊的对象并被导出，exports只是一个变量默认绑定到module.exports。CommonJS却不一样，它没有module.exports对象。实际上就是在Node中不可能不通过module.exports导出一个完全预先构建好的对象。\n\n    \t// This won't work, replacing exports entirely breaks the binding to\n    \t// modules.exports.\n    \texports =  (width) => {\n      \t\treturn {\n        \t\tarea: () => width * width\n      \t\t};\n    \t}\n\n    \t// This works as expected.\n    \tmodule.exports = (width) => {\n      \t\treturn {\n        \t\tarea: () => width * width\n      \t\t};\n    \t}\n\nCommonJS设计应用在服务器端，自然API都是同步的，所以模块按照在源文件里的顺序实时加载。\n\n*优点：简单，开发者可以不用看文档就掌握概念。依赖管理是集成好的，模块按照顺序加载其他模块。require可以在任何地方被调用，模块可以按程序调用。循环依赖可以被支持。*\n\n*缺点：同步的API不适合浏览器端。一个模块一个文件。浏览器需要一个加载的库。没有构造函数。很难静态代码分析。*\n\n\n### 实现\n\nNode.js\n\n在浏览器端有两个主流选择：webpack和browserify。\n\nBrowserify 就是为了解析类似于Node模块定义方式定义的模块，把你的代码和模块打包成一个文件，一个文件包含所以的依赖。\n\nWebpack则是为了在发布前将复杂的代码依赖等处理的工具，包括打包CommonJS的模块。\n\n## 异步模块定义（AMD）\n\nAMD是由一群开发者因为不满CommonJS的开发方向而自己开发出来的。事实上，AMD在其开发早期从CommonJS分离。AMD和CommonJS主要的不同是在于它支持异步加载。\n\n    \t//Calling define with a dependency array and a factory function\n    \tdefine(['dep1', 'dep2'], function (dep1, dep2) {\n\n        \t//Define the module value by returning a value.\n        \treturn function () {};\n    \t});\n\n    \t// Or:\n    \tdefine(function (require) {\n        \tvar dep1 = require('dep1'),\n            \tdep2 = require('dep2');\n\n        \treturn function () {};\n    \t});\n\n\n异步加载让模块加载完成后立即调用一个函数成为可能。模块定义和导入一个模块可以由一个函数完成：一个模块定义的时候它的依赖也可以明确知道。AMD加载器因此在项目运行时有一个完整的依赖的图表。库不要互相依赖所以可以同时加载。这对浏览器来说很重要，启动时就有很好的体验。\n\n*优点：异步加载。支持循环依赖。兼容require和exports。集成依赖管理。模块可以分割。构造函数被支持。支持插件（传统加载步骤）。*\n\n*缺点：语法稍复杂。需要加载的库。很难静态代码分析。*\n\n### 应用\n\n最流行的事require.js和Dojo\n\n使用require.js的方式很直接：在HTLML中引入库，使用data-main属性告诉require.js哪个模块最先被加载。Dojo步骤相同。\n\n## ES2015 模块\n\n幸运的是，ECMA团队决定解决模块问题。在ES6中就能看到成果。语法简单并且支持同步和异步。\n\n    \t//------ lib.js ------\n    \texport const sqrt = Math.sqrt;\n    \texport function square(x) {\n        \treturn x * x;\n    \t}\n    \texport function diag(x, y) {\n        \treturn sqrt(square(x) + square(y));\n    \t}\n\n    \t//------ main.js ------\n    \timport { square, diag } from 'lib';\n    \tconsole.log(square(11)); // 121\n    \tconsole.log(diag(4, 3)); // 5\n\nimport命令可以把模块加载到命名空间。这个命令和require以及define对比发现它不是动态的（即不能在所有地方调用）。export则可以明确的让元素变为公有。\n\nimport和export静态的特性让静态代码分析变为可能，不通过运行代码就可以建立一个完整的依赖树。ES2015还不支持动态模块加载，但是在草稿上是有的：\n    \t\n    \tSystem.import('some_module')\n      .then(some_module => {\n          // Use some_module\n      })\n      .catch(error => {\n          // ...\n      });\n\n事实上，ES2015只明确了静态模块加载的语法。实践中，解析这些命令后，ES2015命令实现不做任何事。模块加载器还是需要的，比如System.js。浏览器模块加载在草案中可用。\n\n这个方案，凭借融入语言的方式，成为运行时最佳模块加载策略。就是说，异步加载有优势是，它可以用在任何时间。\n\n*优点:同步异步都被支持。语法简单。支持静态分析工具。集成在语言中，最终会被全面支持，不需要库。循环依赖被支持。*\n\n*缺点：还没有被各种环境都支持。*\n\n### 应用\n\n不幸的事，还没有稳定版的主流运行环境支持ES6。所以Firefox，Chrome，Nodejs都不行。但是有很多转换工具已经支持，现在，ES6内置的Babel可以解决模块问题。\n\n## 一体化解决方案 System.js\n\n你可能会发现你尝试着使用模块系统从遗留的代码中脱身。或者你想确定到底发生了什么，你选择的方案依旧有效。System.js，一个通用的模块加载，适用于Commonjs，AMD，ES6模块。它能和Babel或Traceur类似的转换工具一起工作，支持Node和IE8+环境。使用只需要加载System.js然后指向根地址：\n\n    <script src=\"system.js\"></script>\n    <script>\n      // set our baseURL reference path\n      System.config({\n        baseURL: '/app',\n        // or 'traceur' or 'typescript'\n        transpiler: 'babel',\n        // or traceurOptions or typescriptOptions\n        babelOptions: {\n\n        }\n      });\n\n      // loads /app/main.js\n      System.import('main.js');\n    </script>\n\n在System.js运行中完成所有工作，在生产模式时使用ES6模块通常要交给转换器完成。如果没有在生产模式，System.js可以唤起转换器，在生产和调试环境中无缝转换。\n\n## 总结\n\n在过去建造模块和解决依赖是个让人头疼的事。\n\n现在库的形式和ES2015模块解决了大部分问题。如果你开始了新的项目，用ES6吧，它会一直坚定的和你走下去，就算现在需要一些其他工具，但是你一定要相信它。可是，如果你坚持ES5，那么让AMD和CommonJS／Node站好队，他们有自己的方向，路要一直走下去，虽然不会有交集，但是不会相隔太远，总能相望。（咦，怎么画风突变，一定是我听的燃系日语歌的锅。）\n\n","source":"_posts/JavaScript-模块详解：CommonJS-vs-AMD-vs-ES2015.md","raw":"---\ntitle: JavaScript 模块详解：CommonJS vs AMD vs ES2015\ndate: 2017-09-09 16:43:44\ntags:\n---\n>随着js的发展，命名空间和依赖关系越来越难处理。许多处理办法应运而生，本文就探索了目前不同的应对模块的方法。\n\n## 为什么需要模块化？\n\n如果你熟悉其他语言，你会注意到有封装和依赖的内容。软件的不同部分单独开发，需要时便组装到一起，这样避免冲突就很重要。\n\n封装不仅可以防止冲突，同时也能简化开发。\n\n在处理依赖模块时，传统的浏览器端开发中，解决依赖关系是开发人员的工作。需要保证模块的加载顺序正确，就比如这个例子：\n    \t\n    <!DOCTYPE html>\n\t<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Backbone.js Todos</title>\n        <link rel=\"stylesheet\" href=\"todos.css\"/>\n    </head>\n\n    <body>\n        <script src=\"../../test/vendor/json2.js\"></script>\n        <script src=\"../../test/vendor/jquery.js\"></script>\n        <script src=\"../../test/vendor/underscore.js\"></script>\n        <script src=\"../../backbone.js\"></script>\n        <script src=\"../backbone.localStorage.js\"></script>\n        <script src=\"todos.js\"></script>\n    </body>\n\n    <!-- (...) -->\n\t</html>\n\t\n随着js越搞越复杂，这东西就越来越乱。重构时就有问题了：我这个新的依赖该放哪里才对？\n\n所以就有了下面这堆方法。\n\n## 一个有特色的方法\n\n叫 The Revealing Module Pattern，我不知道怎么翻译，谷歌翻译过来是显示模块模式。\n\n就是在很久以前，人们没有办法，想出了这个东西。一个函数。\n\n\tvar myRevealingModule = (function () {\n    var privateVar = \"Ben Cherry\",\n        publicVar = \"Hey there!\";\n\n    function privateFunction() {\n        console.log( \"Name:\" + privateVar );\n    }\n\n    function publicSetName( strName ) {\n        privateVar = strName;\n    }\n\n    function publicGetName() {\n        privateFunction();\n    }\n\n    // Reveal public pointers to\n    // private functions and properties\n    return {\n        setName: publicSetName,\n        greeting: publicVar,\n        getName: publicGetName\n    };\n\t})();\n\n\tmyRevealingModule.setName( \"Paul Kinlan\" );\n\n\n在ES6之前，JS中作用域之在函数级别。换句话说，函数内绑定的内容不会被函数外访问到。这样，我们不就有私有的空间了嘛。\n\n上面那个例子里，我们把模块都放在函数里，然后把需要暴露的return出去，这样大功告成。并且没有必要用var和立即执行函数，命名函数也是可以的。\n\n对于封装的问题，这个解决方法还是不错的，但是依赖加载似乎就没啥用。\n\n*优点：简单，多个模块可以在一个文件中。*\n\n*缺点：没有办法科学导入模块。依赖需要手动加载。不可能异步。环状依赖会有大麻烦。很难应用静态模块分析。*\n\n## CommonJS\n\nCommonJS项目的诞生是为了规范化服务器端JavaScript开发，其中就包括模块化。Node.js的开发者一开始打算遵循CommonJS的规范，但是后来决定反对。\n\n涉及到模块时，Node.js的实现会非常受影响：\n    \t\n    \t// In circle.js\n    \tconst PI = Math.PI;\n\n    \texports.area = (r) => PI * r * r;\n\n    \texports.circumference = (r) => 2 * PI * r;\n\n    \t// In some file\n    \tconst circle = require('./circle.js');\n    \tconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n\n在库上面一些抽象的模块系统弥补了Node.js模块系统和CommonJS之间的隔阂。比如在Node和CommonJS的模块里面都实质上有两个元素：require和exports。require可以从其他模块导入到当前环境。传递给require的参数是模块的id。在Nodejs中，是存在node_modules目录中模块的名字。exports是一个特别的对象：任何在里面的内容会作为公有元素导出。字段名字被保留。一个Node和CommonJS之间奇特的不同就出现在module.exports对象的构成。在Node中，moudle.exports是一个真正特殊的对象并被导出，exports只是一个变量默认绑定到module.exports。CommonJS却不一样，它没有module.exports对象。实际上就是在Node中不可能不通过module.exports导出一个完全预先构建好的对象。\n\n    \t// This won't work, replacing exports entirely breaks the binding to\n    \t// modules.exports.\n    \texports =  (width) => {\n      \t\treturn {\n        \t\tarea: () => width * width\n      \t\t};\n    \t}\n\n    \t// This works as expected.\n    \tmodule.exports = (width) => {\n      \t\treturn {\n        \t\tarea: () => width * width\n      \t\t};\n    \t}\n\nCommonJS设计应用在服务器端，自然API都是同步的，所以模块按照在源文件里的顺序实时加载。\n\n*优点：简单，开发者可以不用看文档就掌握概念。依赖管理是集成好的，模块按照顺序加载其他模块。require可以在任何地方被调用，模块可以按程序调用。循环依赖可以被支持。*\n\n*缺点：同步的API不适合浏览器端。一个模块一个文件。浏览器需要一个加载的库。没有构造函数。很难静态代码分析。*\n\n\n### 实现\n\nNode.js\n\n在浏览器端有两个主流选择：webpack和browserify。\n\nBrowserify 就是为了解析类似于Node模块定义方式定义的模块，把你的代码和模块打包成一个文件，一个文件包含所以的依赖。\n\nWebpack则是为了在发布前将复杂的代码依赖等处理的工具，包括打包CommonJS的模块。\n\n## 异步模块定义（AMD）\n\nAMD是由一群开发者因为不满CommonJS的开发方向而自己开发出来的。事实上，AMD在其开发早期从CommonJS分离。AMD和CommonJS主要的不同是在于它支持异步加载。\n\n    \t//Calling define with a dependency array and a factory function\n    \tdefine(['dep1', 'dep2'], function (dep1, dep2) {\n\n        \t//Define the module value by returning a value.\n        \treturn function () {};\n    \t});\n\n    \t// Or:\n    \tdefine(function (require) {\n        \tvar dep1 = require('dep1'),\n            \tdep2 = require('dep2');\n\n        \treturn function () {};\n    \t});\n\n\n异步加载让模块加载完成后立即调用一个函数成为可能。模块定义和导入一个模块可以由一个函数完成：一个模块定义的时候它的依赖也可以明确知道。AMD加载器因此在项目运行时有一个完整的依赖的图表。库不要互相依赖所以可以同时加载。这对浏览器来说很重要，启动时就有很好的体验。\n\n*优点：异步加载。支持循环依赖。兼容require和exports。集成依赖管理。模块可以分割。构造函数被支持。支持插件（传统加载步骤）。*\n\n*缺点：语法稍复杂。需要加载的库。很难静态代码分析。*\n\n### 应用\n\n最流行的事require.js和Dojo\n\n使用require.js的方式很直接：在HTLML中引入库，使用data-main属性告诉require.js哪个模块最先被加载。Dojo步骤相同。\n\n## ES2015 模块\n\n幸运的是，ECMA团队决定解决模块问题。在ES6中就能看到成果。语法简单并且支持同步和异步。\n\n    \t//------ lib.js ------\n    \texport const sqrt = Math.sqrt;\n    \texport function square(x) {\n        \treturn x * x;\n    \t}\n    \texport function diag(x, y) {\n        \treturn sqrt(square(x) + square(y));\n    \t}\n\n    \t//------ main.js ------\n    \timport { square, diag } from 'lib';\n    \tconsole.log(square(11)); // 121\n    \tconsole.log(diag(4, 3)); // 5\n\nimport命令可以把模块加载到命名空间。这个命令和require以及define对比发现它不是动态的（即不能在所有地方调用）。export则可以明确的让元素变为公有。\n\nimport和export静态的特性让静态代码分析变为可能，不通过运行代码就可以建立一个完整的依赖树。ES2015还不支持动态模块加载，但是在草稿上是有的：\n    \t\n    \tSystem.import('some_module')\n      .then(some_module => {\n          // Use some_module\n      })\n      .catch(error => {\n          // ...\n      });\n\n事实上，ES2015只明确了静态模块加载的语法。实践中，解析这些命令后，ES2015命令实现不做任何事。模块加载器还是需要的，比如System.js。浏览器模块加载在草案中可用。\n\n这个方案，凭借融入语言的方式，成为运行时最佳模块加载策略。就是说，异步加载有优势是，它可以用在任何时间。\n\n*优点:同步异步都被支持。语法简单。支持静态分析工具。集成在语言中，最终会被全面支持，不需要库。循环依赖被支持。*\n\n*缺点：还没有被各种环境都支持。*\n\n### 应用\n\n不幸的事，还没有稳定版的主流运行环境支持ES6。所以Firefox，Chrome，Nodejs都不行。但是有很多转换工具已经支持，现在，ES6内置的Babel可以解决模块问题。\n\n## 一体化解决方案 System.js\n\n你可能会发现你尝试着使用模块系统从遗留的代码中脱身。或者你想确定到底发生了什么，你选择的方案依旧有效。System.js，一个通用的模块加载，适用于Commonjs，AMD，ES6模块。它能和Babel或Traceur类似的转换工具一起工作，支持Node和IE8+环境。使用只需要加载System.js然后指向根地址：\n\n    <script src=\"system.js\"></script>\n    <script>\n      // set our baseURL reference path\n      System.config({\n        baseURL: '/app',\n        // or 'traceur' or 'typescript'\n        transpiler: 'babel',\n        // or traceurOptions or typescriptOptions\n        babelOptions: {\n\n        }\n      });\n\n      // loads /app/main.js\n      System.import('main.js');\n    </script>\n\n在System.js运行中完成所有工作，在生产模式时使用ES6模块通常要交给转换器完成。如果没有在生产模式，System.js可以唤起转换器，在生产和调试环境中无缝转换。\n\n## 总结\n\n在过去建造模块和解决依赖是个让人头疼的事。\n\n现在库的形式和ES2015模块解决了大部分问题。如果你开始了新的项目，用ES6吧，它会一直坚定的和你走下去，就算现在需要一些其他工具，但是你一定要相信它。可是，如果你坚持ES5，那么让AMD和CommonJS／Node站好队，他们有自己的方向，路要一直走下去，虽然不会有交集，但是不会相隔太远，总能相望。（咦，怎么画风突变，一定是我听的燃系日语歌的锅。）\n\n","slug":"JavaScript-模块详解：CommonJS-vs-AMD-vs-ES2015","published":1,"updated":"2018-08-21T00:43:30.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le32001avcz17ktth76t","content":"<blockquote>\n<p>随着js的发展，命名空间和依赖关系越来越难处理。许多处理办法应运而生，本文就探索了目前不同的应对模块的方法。</p>\n</blockquote>\n<h2 id=\"为什么需要模块化？\"><a href=\"#为什么需要模块化？\" class=\"headerlink\" title=\"为什么需要模块化？\"></a>为什么需要模块化？</h2><p>如果你熟悉其他语言，你会注意到有封装和依赖的内容。软件的不同部分单独开发，需要时便组装到一起，这样避免冲突就很重要。</p>\n<p>封装不仅可以防止冲突，同时也能简化开发。</p>\n<p>在处理依赖模块时，传统的浏览器端开发中，解决依赖关系是开发人员的工作。需要保证模块的加载顺序正确，就比如这个例子：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Backbone.js Todos&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;todos.css&quot;/&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;script src=&quot;../../test/vendor/json2.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../test/vendor/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../test/vendor/underscore.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../backbone.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../backbone.localStorage.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;todos.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;!-- (...) --&gt;\n&lt;/html&gt;\n</code></pre><p>随着js越搞越复杂，这东西就越来越乱。重构时就有问题了：我这个新的依赖该放哪里才对？</p>\n<p>所以就有了下面这堆方法。</p>\n<h2 id=\"一个有特色的方法\"><a href=\"#一个有特色的方法\" class=\"headerlink\" title=\"一个有特色的方法\"></a>一个有特色的方法</h2><p>叫 The Revealing Module Pattern，我不知道怎么翻译，谷歌翻译过来是显示模块模式。</p>\n<p>就是在很久以前，人们没有办法，想出了这个东西。一个函数。</p>\n<pre><code>var myRevealingModule = (function () {\nvar privateVar = &quot;Ben Cherry&quot;,\n    publicVar = &quot;Hey there!&quot;;\n\nfunction privateFunction() {\n    console.log( &quot;Name:&quot; + privateVar );\n}\n\nfunction publicSetName( strName ) {\n    privateVar = strName;\n}\n\nfunction publicGetName() {\n    privateFunction();\n}\n\n// Reveal public pointers to\n// private functions and properties\nreturn {\n    setName: publicSetName,\n    greeting: publicVar,\n    getName: publicGetName\n};\n})();\n\nmyRevealingModule.setName( &quot;Paul Kinlan&quot; );\n</code></pre><p>在ES6之前，JS中作用域之在函数级别。换句话说，函数内绑定的内容不会被函数外访问到。这样，我们不就有私有的空间了嘛。</p>\n<p>上面那个例子里，我们把模块都放在函数里，然后把需要暴露的return出去，这样大功告成。并且没有必要用var和立即执行函数，命名函数也是可以的。</p>\n<p>对于封装的问题，这个解决方法还是不错的，但是依赖加载似乎就没啥用。</p>\n<p><em>优点：简单，多个模块可以在一个文件中。</em></p>\n<p><em>缺点：没有办法科学导入模块。依赖需要手动加载。不可能异步。环状依赖会有大麻烦。很难应用静态模块分析。</em></p>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p>CommonJS项目的诞生是为了规范化服务器端JavaScript开发，其中就包括模块化。Node.js的开发者一开始打算遵循CommonJS的规范，但是后来决定反对。</p>\n<p>涉及到模块时，Node.js的实现会非常受影响：</p>\n<pre><code>// In circle.js\nconst PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n\n// In some file\nconst circle = require(&apos;./circle.js&apos;);\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre><p>在库上面一些抽象的模块系统弥补了Node.js模块系统和CommonJS之间的隔阂。比如在Node和CommonJS的模块里面都实质上有两个元素：require和exports。require可以从其他模块导入到当前环境。传递给require的参数是模块的id。在Nodejs中，是存在node_modules目录中模块的名字。exports是一个特别的对象：任何在里面的内容会作为公有元素导出。字段名字被保留。一个Node和CommonJS之间奇特的不同就出现在module.exports对象的构成。在Node中，moudle.exports是一个真正特殊的对象并被导出，exports只是一个变量默认绑定到module.exports。CommonJS却不一样，它没有module.exports对象。实际上就是在Node中不可能不通过module.exports导出一个完全预先构建好的对象。</p>\n<pre><code>// This won&apos;t work, replacing exports entirely breaks the binding to\n// modules.exports.\nexports =  (width) =&gt; {\n      return {\n        area: () =&gt; width * width\n      };\n}\n\n// This works as expected.\nmodule.exports = (width) =&gt; {\n      return {\n        area: () =&gt; width * width\n      };\n}\n</code></pre><p>CommonJS设计应用在服务器端，自然API都是同步的，所以模块按照在源文件里的顺序实时加载。</p>\n<p><em>优点：简单，开发者可以不用看文档就掌握概念。依赖管理是集成好的，模块按照顺序加载其他模块。require可以在任何地方被调用，模块可以按程序调用。循环依赖可以被支持。</em></p>\n<p><em>缺点：同步的API不适合浏览器端。一个模块一个文件。浏览器需要一个加载的库。没有构造函数。很难静态代码分析。</em></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Node.js</p>\n<p>在浏览器端有两个主流选择：webpack和browserify。</p>\n<p>Browserify 就是为了解析类似于Node模块定义方式定义的模块，把你的代码和模块打包成一个文件，一个文件包含所以的依赖。</p>\n<p>Webpack则是为了在发布前将复杂的代码依赖等处理的工具，包括打包CommonJS的模块。</p>\n<h2 id=\"异步模块定义（AMD）\"><a href=\"#异步模块定义（AMD）\" class=\"headerlink\" title=\"异步模块定义（AMD）\"></a>异步模块定义（AMD）</h2><p>AMD是由一群开发者因为不满CommonJS的开发方向而自己开发出来的。事实上，AMD在其开发早期从CommonJS分离。AMD和CommonJS主要的不同是在于它支持异步加载。</p>\n<pre><code>//Calling define with a dependency array and a factory function\ndefine([&apos;dep1&apos;, &apos;dep2&apos;], function (dep1, dep2) {\n\n    //Define the module value by returning a value.\n    return function () {};\n});\n\n// Or:\ndefine(function (require) {\n    var dep1 = require(&apos;dep1&apos;),\n        dep2 = require(&apos;dep2&apos;);\n\n    return function () {};\n});\n</code></pre><p>异步加载让模块加载完成后立即调用一个函数成为可能。模块定义和导入一个模块可以由一个函数完成：一个模块定义的时候它的依赖也可以明确知道。AMD加载器因此在项目运行时有一个完整的依赖的图表。库不要互相依赖所以可以同时加载。这对浏览器来说很重要，启动时就有很好的体验。</p>\n<p><em>优点：异步加载。支持循环依赖。兼容require和exports。集成依赖管理。模块可以分割。构造函数被支持。支持插件（传统加载步骤）。</em></p>\n<p><em>缺点：语法稍复杂。需要加载的库。很难静态代码分析。</em></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>最流行的事require.js和Dojo</p>\n<p>使用require.js的方式很直接：在HTLML中引入库，使用data-main属性告诉require.js哪个模块最先被加载。Dojo步骤相同。</p>\n<h2 id=\"ES2015-模块\"><a href=\"#ES2015-模块\" class=\"headerlink\" title=\"ES2015 模块\"></a>ES2015 模块</h2><p>幸运的是，ECMA团队决定解决模块问题。在ES6中就能看到成果。语法简单并且支持同步和异步。</p>\n<pre><code>//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n    return x * x;\n}\nexport function diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\nimport { square, diag } from &apos;lib&apos;;\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n</code></pre><p>import命令可以把模块加载到命名空间。这个命令和require以及define对比发现它不是动态的（即不能在所有地方调用）。export则可以明确的让元素变为公有。</p>\n<p>import和export静态的特性让静态代码分析变为可能，不通过运行代码就可以建立一个完整的依赖树。ES2015还不支持动态模块加载，但是在草稿上是有的：</p>\n<pre><code>  System.import(&apos;some_module&apos;)\n.then(some_module =&gt; {\n    // Use some_module\n})\n.catch(error =&gt; {\n    // ...\n});\n</code></pre><p>事实上，ES2015只明确了静态模块加载的语法。实践中，解析这些命令后，ES2015命令实现不做任何事。模块加载器还是需要的，比如System.js。浏览器模块加载在草案中可用。</p>\n<p>这个方案，凭借融入语言的方式，成为运行时最佳模块加载策略。就是说，异步加载有优势是，它可以用在任何时间。</p>\n<p><em>优点:同步异步都被支持。语法简单。支持静态分析工具。集成在语言中，最终会被全面支持，不需要库。循环依赖被支持。</em></p>\n<p><em>缺点：还没有被各种环境都支持。</em></p>\n<h3 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>不幸的事，还没有稳定版的主流运行环境支持ES6。所以Firefox，Chrome，Nodejs都不行。但是有很多转换工具已经支持，现在，ES6内置的Babel可以解决模块问题。</p>\n<h2 id=\"一体化解决方案-System-js\"><a href=\"#一体化解决方案-System-js\" class=\"headerlink\" title=\"一体化解决方案 System.js\"></a>一体化解决方案 System.js</h2><p>你可能会发现你尝试着使用模块系统从遗留的代码中脱身。或者你想确定到底发生了什么，你选择的方案依旧有效。System.js，一个通用的模块加载，适用于Commonjs，AMD，ES6模块。它能和Babel或Traceur类似的转换工具一起工作，支持Node和IE8+环境。使用只需要加载System.js然后指向根地址：</p>\n<pre><code>&lt;script src=&quot;system.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // set our baseURL reference path\n  System.config({\n    baseURL: &apos;/app&apos;,\n    // or &apos;traceur&apos; or &apos;typescript&apos;\n    transpiler: &apos;babel&apos;,\n    // or traceurOptions or typescriptOptions\n    babelOptions: {\n\n    }\n  });\n\n  // loads /app/main.js\n  System.import(&apos;main.js&apos;);\n&lt;/script&gt;\n</code></pre><p>在System.js运行中完成所有工作，在生产模式时使用ES6模块通常要交给转换器完成。如果没有在生产模式，System.js可以唤起转换器，在生产和调试环境中无缝转换。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在过去建造模块和解决依赖是个让人头疼的事。</p>\n<p>现在库的形式和ES2015模块解决了大部分问题。如果你开始了新的项目，用ES6吧，它会一直坚定的和你走下去，就算现在需要一些其他工具，但是你一定要相信它。可是，如果你坚持ES5，那么让AMD和CommonJS／Node站好队，他们有自己的方向，路要一直走下去，虽然不会有交集，但是不会相隔太远，总能相望。（咦，怎么画风突变，一定是我听的燃系日语歌的锅。）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>随着js的发展，命名空间和依赖关系越来越难处理。许多处理办法应运而生，本文就探索了目前不同的应对模块的方法。</p>\n</blockquote>\n<h2 id=\"为什么需要模块化？\"><a href=\"#为什么需要模块化？\" class=\"headerlink\" title=\"为什么需要模块化？\"></a>为什么需要模块化？</h2><p>如果你熟悉其他语言，你会注意到有封装和依赖的内容。软件的不同部分单独开发，需要时便组装到一起，这样避免冲突就很重要。</p>\n<p>封装不仅可以防止冲突，同时也能简化开发。</p>\n<p>在处理依赖模块时，传统的浏览器端开发中，解决依赖关系是开发人员的工作。需要保证模块的加载顺序正确，就比如这个例子：</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Backbone.js Todos&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;todos.css&quot;/&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;script src=&quot;../../test/vendor/json2.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../test/vendor/jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../test/vendor/underscore.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../../backbone.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;../backbone.localStorage.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;todos.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;!-- (...) --&gt;\n&lt;/html&gt;\n</code></pre><p>随着js越搞越复杂，这东西就越来越乱。重构时就有问题了：我这个新的依赖该放哪里才对？</p>\n<p>所以就有了下面这堆方法。</p>\n<h2 id=\"一个有特色的方法\"><a href=\"#一个有特色的方法\" class=\"headerlink\" title=\"一个有特色的方法\"></a>一个有特色的方法</h2><p>叫 The Revealing Module Pattern，我不知道怎么翻译，谷歌翻译过来是显示模块模式。</p>\n<p>就是在很久以前，人们没有办法，想出了这个东西。一个函数。</p>\n<pre><code>var myRevealingModule = (function () {\nvar privateVar = &quot;Ben Cherry&quot;,\n    publicVar = &quot;Hey there!&quot;;\n\nfunction privateFunction() {\n    console.log( &quot;Name:&quot; + privateVar );\n}\n\nfunction publicSetName( strName ) {\n    privateVar = strName;\n}\n\nfunction publicGetName() {\n    privateFunction();\n}\n\n// Reveal public pointers to\n// private functions and properties\nreturn {\n    setName: publicSetName,\n    greeting: publicVar,\n    getName: publicGetName\n};\n})();\n\nmyRevealingModule.setName( &quot;Paul Kinlan&quot; );\n</code></pre><p>在ES6之前，JS中作用域之在函数级别。换句话说，函数内绑定的内容不会被函数外访问到。这样，我们不就有私有的空间了嘛。</p>\n<p>上面那个例子里，我们把模块都放在函数里，然后把需要暴露的return出去，这样大功告成。并且没有必要用var和立即执行函数，命名函数也是可以的。</p>\n<p>对于封装的问题，这个解决方法还是不错的，但是依赖加载似乎就没啥用。</p>\n<p><em>优点：简单，多个模块可以在一个文件中。</em></p>\n<p><em>缺点：没有办法科学导入模块。依赖需要手动加载。不可能异步。环状依赖会有大麻烦。很难应用静态模块分析。</em></p>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p>CommonJS项目的诞生是为了规范化服务器端JavaScript开发，其中就包括模块化。Node.js的开发者一开始打算遵循CommonJS的规范，但是后来决定反对。</p>\n<p>涉及到模块时，Node.js的实现会非常受影响：</p>\n<pre><code>// In circle.js\nconst PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n\n// In some file\nconst circle = require(&apos;./circle.js&apos;);\nconsole.log( `The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre><p>在库上面一些抽象的模块系统弥补了Node.js模块系统和CommonJS之间的隔阂。比如在Node和CommonJS的模块里面都实质上有两个元素：require和exports。require可以从其他模块导入到当前环境。传递给require的参数是模块的id。在Nodejs中，是存在node_modules目录中模块的名字。exports是一个特别的对象：任何在里面的内容会作为公有元素导出。字段名字被保留。一个Node和CommonJS之间奇特的不同就出现在module.exports对象的构成。在Node中，moudle.exports是一个真正特殊的对象并被导出，exports只是一个变量默认绑定到module.exports。CommonJS却不一样，它没有module.exports对象。实际上就是在Node中不可能不通过module.exports导出一个完全预先构建好的对象。</p>\n<pre><code>// This won&apos;t work, replacing exports entirely breaks the binding to\n// modules.exports.\nexports =  (width) =&gt; {\n      return {\n        area: () =&gt; width * width\n      };\n}\n\n// This works as expected.\nmodule.exports = (width) =&gt; {\n      return {\n        area: () =&gt; width * width\n      };\n}\n</code></pre><p>CommonJS设计应用在服务器端，自然API都是同步的，所以模块按照在源文件里的顺序实时加载。</p>\n<p><em>优点：简单，开发者可以不用看文档就掌握概念。依赖管理是集成好的，模块按照顺序加载其他模块。require可以在任何地方被调用，模块可以按程序调用。循环依赖可以被支持。</em></p>\n<p><em>缺点：同步的API不适合浏览器端。一个模块一个文件。浏览器需要一个加载的库。没有构造函数。很难静态代码分析。</em></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>Node.js</p>\n<p>在浏览器端有两个主流选择：webpack和browserify。</p>\n<p>Browserify 就是为了解析类似于Node模块定义方式定义的模块，把你的代码和模块打包成一个文件，一个文件包含所以的依赖。</p>\n<p>Webpack则是为了在发布前将复杂的代码依赖等处理的工具，包括打包CommonJS的模块。</p>\n<h2 id=\"异步模块定义（AMD）\"><a href=\"#异步模块定义（AMD）\" class=\"headerlink\" title=\"异步模块定义（AMD）\"></a>异步模块定义（AMD）</h2><p>AMD是由一群开发者因为不满CommonJS的开发方向而自己开发出来的。事实上，AMD在其开发早期从CommonJS分离。AMD和CommonJS主要的不同是在于它支持异步加载。</p>\n<pre><code>//Calling define with a dependency array and a factory function\ndefine([&apos;dep1&apos;, &apos;dep2&apos;], function (dep1, dep2) {\n\n    //Define the module value by returning a value.\n    return function () {};\n});\n\n// Or:\ndefine(function (require) {\n    var dep1 = require(&apos;dep1&apos;),\n        dep2 = require(&apos;dep2&apos;);\n\n    return function () {};\n});\n</code></pre><p>异步加载让模块加载完成后立即调用一个函数成为可能。模块定义和导入一个模块可以由一个函数完成：一个模块定义的时候它的依赖也可以明确知道。AMD加载器因此在项目运行时有一个完整的依赖的图表。库不要互相依赖所以可以同时加载。这对浏览器来说很重要，启动时就有很好的体验。</p>\n<p><em>优点：异步加载。支持循环依赖。兼容require和exports。集成依赖管理。模块可以分割。构造函数被支持。支持插件（传统加载步骤）。</em></p>\n<p><em>缺点：语法稍复杂。需要加载的库。很难静态代码分析。</em></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>最流行的事require.js和Dojo</p>\n<p>使用require.js的方式很直接：在HTLML中引入库，使用data-main属性告诉require.js哪个模块最先被加载。Dojo步骤相同。</p>\n<h2 id=\"ES2015-模块\"><a href=\"#ES2015-模块\" class=\"headerlink\" title=\"ES2015 模块\"></a>ES2015 模块</h2><p>幸运的是，ECMA团队决定解决模块问题。在ES6中就能看到成果。语法简单并且支持同步和异步。</p>\n<pre><code>//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n    return x * x;\n}\nexport function diag(x, y) {\n    return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\nimport { square, diag } from &apos;lib&apos;;\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n</code></pre><p>import命令可以把模块加载到命名空间。这个命令和require以及define对比发现它不是动态的（即不能在所有地方调用）。export则可以明确的让元素变为公有。</p>\n<p>import和export静态的特性让静态代码分析变为可能，不通过运行代码就可以建立一个完整的依赖树。ES2015还不支持动态模块加载，但是在草稿上是有的：</p>\n<pre><code>  System.import(&apos;some_module&apos;)\n.then(some_module =&gt; {\n    // Use some_module\n})\n.catch(error =&gt; {\n    // ...\n});\n</code></pre><p>事实上，ES2015只明确了静态模块加载的语法。实践中，解析这些命令后，ES2015命令实现不做任何事。模块加载器还是需要的，比如System.js。浏览器模块加载在草案中可用。</p>\n<p>这个方案，凭借融入语言的方式，成为运行时最佳模块加载策略。就是说，异步加载有优势是，它可以用在任何时间。</p>\n<p><em>优点:同步异步都被支持。语法简单。支持静态分析工具。集成在语言中，最终会被全面支持，不需要库。循环依赖被支持。</em></p>\n<p><em>缺点：还没有被各种环境都支持。</em></p>\n<h3 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>不幸的事，还没有稳定版的主流运行环境支持ES6。所以Firefox，Chrome，Nodejs都不行。但是有很多转换工具已经支持，现在，ES6内置的Babel可以解决模块问题。</p>\n<h2 id=\"一体化解决方案-System-js\"><a href=\"#一体化解决方案-System-js\" class=\"headerlink\" title=\"一体化解决方案 System.js\"></a>一体化解决方案 System.js</h2><p>你可能会发现你尝试着使用模块系统从遗留的代码中脱身。或者你想确定到底发生了什么，你选择的方案依旧有效。System.js，一个通用的模块加载，适用于Commonjs，AMD，ES6模块。它能和Babel或Traceur类似的转换工具一起工作，支持Node和IE8+环境。使用只需要加载System.js然后指向根地址：</p>\n<pre><code>&lt;script src=&quot;system.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // set our baseURL reference path\n  System.config({\n    baseURL: &apos;/app&apos;,\n    // or &apos;traceur&apos; or &apos;typescript&apos;\n    transpiler: &apos;babel&apos;,\n    // or traceurOptions or typescriptOptions\n    babelOptions: {\n\n    }\n  });\n\n  // loads /app/main.js\n  System.import(&apos;main.js&apos;);\n&lt;/script&gt;\n</code></pre><p>在System.js运行中完成所有工作，在生产模式时使用ES6模块通常要交给转换器完成。如果没有在生产模式，System.js可以唤起转换器，在生产和调试环境中无缝转换。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在过去建造模块和解决依赖是个让人头疼的事。</p>\n<p>现在库的形式和ES2015模块解决了大部分问题。如果你开始了新的项目，用ES6吧，它会一直坚定的和你走下去，就算现在需要一些其他工具，但是你一定要相信它。可是，如果你坚持ES5，那么让AMD和CommonJS／Node站好队，他们有自己的方向，路要一直走下去，虽然不会有交集，但是不会相隔太远，总能相望。（咦，怎么画风突变，一定是我听的燃系日语歌的锅。）</p>\n"},{"title":"搬运一些ES6内容，以及在ES5中的写法","date":"2017-10-13T07:48:19.000Z","_content":"## 作用域\n\n### 不可变变量\n\n>只可以使变量本身不可以写，并非它分配的内容，比如如果内容是一个对象，意味着对象依然可以修改。\n\nES 5\n\n    const PI = 3.141593\n\tPI > 3.0\n\t\nES 6\n\t\n\tObject.defineProperty(typeof global === \"object\" ? \tglobal : window, \"PI\", {\n       value:        3.141593,\n       enumerable:   true,\n       writable:     false,\n   \t   configurable: false\n\t})\n\tPI > 3.0;\n\t\n### 块级作用域变量\n\n> 块级作用域的变量或常量不提升\n\nES 6\n\n    for (let i = 0; i < a.length; i++) {\n        let x = a[i]\n        …\n    }\n    for (let i = 0; i < b.length; i++) {\n        let y = b[i]\n        …\n    }\n\n    let callbacks = []\n    for (let i = 0; i <= 2; i++) {\n        callbacks[i] = function () { return i * 2 }\n    }\n    callbacks[0]() === 0\n    callbacks[1]() === 2\n    callbacks[2]() === 4\n\nES 5\n\n    var i, x, y;\n    for (i = 0; i < a.length; i++) {\n        x = a[i];\n        …\n    }\n    for (i = 0; i < b.length; i++) {\n        y = b[i];\n        …\n    }\n\n    var callbacks = [];\n    for (var i = 0; i <= 2; i++) {\n        (function (i) {\n            callbacks[i] = function() { return i * 2; };\n        })(i);\n    }\n    callbacks[0]() === 0;\n    callbacks[1]() === 2;\n    callbacks[2]() === 4;\n    \n### 块级作用域函数\n\n> 定义块级作用域函数\n\nES 6\n\n    {\n        function foo () { return 1 }\n        foo() === 1\n        {\n            function foo () { return 2 }\n            foo() === 2\n        }\n        foo() === 1\n    }\n   \nES 5\n\n    (function () {\n        var foo = function () { return 1; }\n        foo() === 1;\n        (function () {\n            var foo = function () { return 2; }\n            foo() === 2;\n        })();\n        foo() === 1;\n    })();\n   \n## 箭头函数\n\n### 表达体\n\n> 更好的闭合函数 \n\nES 6\n\n    odds  = evens.map(v => v + 1)\n    pairs = evens.map(v => ({ even: v, odd: v + 1 }))\n    nums  = evens.map((v, i) => v + i)\n\nES 5\n    \n    odds  = evens.map(function (v) { return v + 1; });\n    pairs = evens.map(function (v) { return { even: v, odd: v + 1 }; });\n    nums  = evens.map(function (v, i) { return v + i; });\n    \n### 声明\n\n> 同上\n \nES 6\n\n    nums.forEach(v => {\n  \t if (v % 5 === 0)\n       fives.push(v)\n\t })\n\nES 5 \n    \n    nums.forEach(function (v) {\n    if (v % 5 === 0)\n       fives.push(v);\n    });\n        \n### This\n\n> 更直观的处理当前对象上下文\n\nES 6\n\n    this.nums.forEach((v) => {\n    if (v % 5 === 0)\n        this.fives.push(v)\n    })\n    \nES 5\n\n    //  variant 1\n    var self = this;\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            self.fives.push(v);\n    });\n\n    //  variant 2\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            this.fives.push(v);\n    }, this);\n\n    //  variant 3 (since ECMAScript 5.1 only)\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            this.fives.push(v);\n    }.bind(this));\n\n## 扩展的参数处理\n\n### 默认参数值\n\n> 简单直观的函数默认值\n\nES 6\n    \n    function f (x, y = 7, z = 42) {\n        return x + y + z\n    }\n    f(1) === 50\n    \nES 5\n\n    function f (x, y, z) {\n    if (y === undefined)\n        y = 7;\n    if (z === undefined)\n        z = 42;\n    return x + y + z;\n    }; \n    f(1) === 50;\n\n### 剩余参数\n\n> 汇总可变函数参数到一个参数内\n\nES 6\n\n    function f (x, y, ...a) {\n        return (x + y) * a.length\n    }\n    f(1, 2, \"hello\", true, 7) === 9\n\nES 5\n\n    function f (x, y) {\n    var a = Array.prototype.slice.call(arguments, 2);\n        return (x + y) * a.length;\n    };\n    f(1, 2, \"hello\", true, 7) === 9;\n    \n### 传播\n\n>可以传递可迭代集合里的元素到字面元素或者函数参数里\n\nES 6\n\n    var params = [ \"hello\", true, 7 ]\n    var other = [ 1, 2, ...params ] // [ 1, 2, \"hello\", true, 7 ]\n\n    function f (x, y, ...a) {\n        return (x + y) * a.length\n    }\n    f(1, 2, ...params) === 9\n\n    var str = \"foo\"\n    var chars = [ ...str ] // [ \"f\", \"o\", \"o\" ]\n\nES 5\n\n    var params = [ \"hello\", true, 7 ];\n    var other = [ 1, 2 ].concat(params); // [ 1, 2, \"hello\", true, 7 ]\n\n    function f (x, y) {\n        var a = Array.prototype.slice.call(arguments, 2);\n        return (x + y) * a.length;\n    };\n    f.apply(undefined, [ 1, 2 ].concat(params)) === 9;\n\n    var str = \"foo\";\n    var chars = str.split(\"\"); // [ \"f\", \"o\", \"o\" ]\n\n## 模版语法\n\n### 字符串插值\n\n> 单行或者多行直观的表达插值 \n\nES 6\n\n    var customer = { name: \"Foo\" }\n    var card = { amount: 7, product: \"Bar\", unitprice: 42 }\n    var message = `Hello ${customer.name},\n    want to buy ${card.amount} ${card.product} for\n    a total of ${card.amount * card.unitprice} bucks?`\n    \nES 5\n\n    var customer = { name: \"Foo\" };\n    var card = { amount: 7, product: \"Bar\", unitprice: 42 };\n    var message = \"Hello \" + customer.name + \",\\n\" +\n    \"want to buy \" + card.amount + \" \" + card.product + \" for\\n\" +\n    \"a total of \" + (card.amount * card.unitprice) + \" bucks?\";\n\n### 自定义插值\n\n> 灵活的表达插值\n\nES 6\n\n    get`http://example.com/foo?bar=${bar + baz}&quux=${quux}`\n\nES 5\n\n    get([ \"http://example.com/foo?bar=\", \"&quux=\", \"\" ],bar + baz, quux);\n    \n### 原生字符串访问\n\n> 访问原生模版字符串内容（反斜杠不会被解释）\n\n    function quux (strings, ...values) {\n        strings[0] === \"foo\\n\"\n        strings[1] === \"bar\"\n        strings.raw[0] === \"foo\\\\n\"\n        strings.raw[1] === \"bar\"\n        values[0] === 42\n    }\n    quux `foo\\n${ 42 }bar`\n\n    String.raw `foo\\n${ 42 }bar` === \"foo\\\\n42bar\"\n\n## 扩展文字\n### 二进制和八进制\n\n> 直接支持二进制和八进制内容\n\nES 6 \n    \n    0b111110111 === 503\n    0o767 === 503\n\nES 5\n\n    parseInt(\"111110111\", 2) === 503;\n    parseInt(\"767\", 8) === 503;\n    0767 === 503; // only in non-strict, backward compatibility mode\n\n### unicode和正则表达式\n\n> 扩展支持字符串使用unicode和正则表达式\n\nES 6\n\n    \"𠮷\".length === 2\n    \"𠮷\".match(/./u)[0].length === 2\n    \"𠮷\" === \"\\uD842\\uDFB7\" \n    \"𠮷\" === \"\\u{20BB7}\"\n    \"𠮷\".codePointAt(0) == 0x20BB7\n    for (let codepoint of \"𠮷\") console.log(codepoint)\n\nES 5 \n\n    \"𠮷\".length === 2;\n    \"𠮷\".match(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000- \\uFFFF][\\uD800-\\uDBFF][\\uDC00-\\uDFFF][\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])(?:[^\\uD800-\\uDBFF]^)[\\uDC00-\\uDFFF])/)[0].length === 2;\n    \"𠮷\" === \"\\uD842\\uDFB7\";\n    //  no equivalent in ES5\n    //  no equivalent in ES5\n    //  no equivalent in ES5\n    \n## 增强的正则表达式\n\n### 正则表达式粘性匹配\n\n> 保持匹配位置在匹配内容之间，支持任意长度字符串高效解析，即使有任意数量的不同正则表达式。\n\nES 6\n\n    let parser = (input, match) => {\n    for (let pos = 0, lastPos = input.length; pos < lastPos; ) {\n        for (let i = 0; i < match.length; i++) {\n            match[i].pattern.lastIndex = pos\n            let found\n            if ((found = match[i].pattern.exec(input)) !== null) {\n                match[i].action(found)\n                pos = match[i].pattern.lastIndex\n                break\n            }\n        }\n      }\n    }\n\n    let report = (match) => {\n        console.log(JSON.stringify(match))\n    }\n    parser(\"Foo 1 Bar 7 Baz 42\", [\n        { pattern: /^Foo\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^Bar\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^Baz\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^\\s*/y,         action: (match) => {}            }\n    ])\n\nES 5\n\n    var parser = function (input, match) {\n    for (var i, found, inputTmp = input; inputTmp !== \"\"; ) {\n        for (i = 0; i < match.length; i++) {\n            if ((found = match[i].pattern.exec(inputTmp)) !== null) {\n                match[i].action(found);\n                inputTmp = inputTmp.substr(found[0].length);\n                break;\n            }\n        }\n      }\n    }\n\n    var report = function (match) {\n        console.log(JSON.stringify(match));\n    };\n    parser(\"Foo 1 Bar 7 Baz 42\", [\n        { pattern: /^Foo\\s+(\\d+)/, action: function (match)    { report(match); } },\n        { pattern: /^Bar\\s+(\\d+)/, action: function (match) { report(match); } },\n        { pattern: /^Baz\\s+(\\d+)/, action: function (match) { report(match); } },\n        { pattern: /^\\s*/,         action: function (match) {}                 }\n    ]); \n\n## 增强的对象属性\n\n### 属性速记\n\n> 更短的语法，用于公共对象属性定义\n\nES 6\n    \n    obj = { x, y }\n    \nES 5\n\n    obj = { x: x, y: y };\n    \n\n### 计算属性名 \n\n> 计算属性定义支持计算命名 \n \nES 6 \n    \n    let obj = {\n        foo: \"bar\",\n        [ \"baz\" + quux() ]: 42\n    }\n\nES 5\n\n    var obj = {\n        foo: \"bar\"\n    };\n    obj[ \"baz\" + quux() ] = 42;\n\n### 方法属性\n\n> 对象属性定义支持方法符号 \n\nES 6 \n\n    obj = {\n        foo (a, b) {\n            …\n        },\n        bar (x, y) {\n            …\n        },\n        *quux (x, y) {\n            …\n        }\n    }\n    \nES 5 \n\n    obj = {\n        foo: function (a, b) {\n            …\n        },\n        bar: function (x, y) {\n            …\n        },\n        //  quux: no equivalent in ES5\n        …\n    };\n\n## 解构 \n\n### 数组匹配 \n\n> 直观且灵活的将数组解构为单个变量\n\nES 6 \n\n    var list = [ 1, 2, 3 ]\n    var [ a, , b ] = list\n    [ b, a ] = [ a, b ]\n\nES 5 \n    \n    var list = [ 1, 2, 3 ];\n    var a = list[0], b = list[2];\n    var tmp = a; a = b; b = tmp;\n\n### 对象匹配，速记符号 \n\n> 同上\n\nES 6 \n\n    var { op, lhs, rhs } = getASTNode()\n    \nES 5 \n\n    var tmp = getASTNode();\n    var op  = tmp.op;\n    var lhs = tmp.lhs;\n    var rhs = tmp.rhs;\n\n### 对象匹配 深匹配 \n\n> 同上 \n\nES 6 \n\n    var { op: a, lhs: { op: b }, rhs: c } = getASTNode()\n\nES 5 \n\n    var tmp = getASTNode();\n    var a = tmp.op;\n    var b = tmp.lhs.op;\n    var c = tmp.rhs;\n\n### 对象数组匹配，默认值 \n\n> 为对象和数组解构简单直观的默认值\n\nES 6 \n\n    var obj = { a: 1 }\n    var list = [ 1 ]\n    var { a, b = 2 } = obj\n    var [ x, y = 2 ] = list\n \nES 5\n\n    var obj = { a: 1 };\n    var list = [ 1 ];\n    var a = obj.a;\n    var b = obj.b === undefined ? 2 : obj.b;\n    var x = list[0];\n    var y = list[1] === undefined ? 2 : list[1];\n    \n### 参数上下文匹配 \n\n> 函数调用期间将数组和对象简单灵活的解构为独立参数\n\nES 6 \n\n    function f ([ name, val ]) {\n        console.log(name, val)\n    }\n    function g ({ name: n, val: v }) {\n        console.log(n, v)\n    }\n    function h ({ name, val }) {\n        console.log(name, val)\n    }\n    f([ \"bar\", 42 ])\n    g({ name: \"foo\", val:  7 })\n    h({ name: \"bar\", val: 42 })\n \nES 5\n\n    function f (arg) {\n        var name = arg[0];\n        var val  = arg[1];\n        console.log(name, val);\n    };\n    function g (arg) {\n        var n = arg.name;\n        var v = arg.val;\n        console.log(n, v);\n    };\n    function h (arg) {\n        var name = arg.name;\n        var val  = arg.val;\n        console.log(name, val);\n    };\n    f([ \"bar\", 42 ]);\n    g({ name: \"foo\", val:  7 });\n    h({ name: \"bar\", val: 42 });\n\n### 失败弱处理\n\n> 可选默认值 \n\nES 6 \n\n    var list = [ 7, 42 ]\n    var [ a = 1, b = 2, c = 3, d ] = list\n    a === 7\n    b === 42\n    c === 3\n    d === undefined\n\nES 5 \n\n    var list = [ 7, 42 ];\n    var a = typeof list[0] !== \"undefined\" ? list[0] : 1;\n    var b = typeof list[1] !== \"undefined\" ? list[1] : 2;\n    var c = typeof list[2] !== \"undefined\" ? list[2] : 3;\n    var d = typeof list[3] !== \"undefined\" ? list[3] : undefined;\n    a === 7;\n    b === 42;\n    c === 3;\n    d === undefined;\n    \n## 模块 \n\n### 值导出导入 \n\n> 支持没有全局变量污染的模块导入导出 \n\nES 6 \n\n    //  lib/math.js\n    export function sum (x, y) { return x + y }\n    export var pi = 3.141593\n\n    //  someApp.js\n    import * as math from \"lib/math\"\n    console.log(\"2π = \" + math.sum(math.pi, math.pi))\n\n    //  otherApp.js\n    import { sum, pi } from \"lib/math\"\n    console.log(\"2π = \" + sum(pi, pi)) \n\nES 5 \n\n    //  lib/math.js\n    LibMath = {};\n    LibMath.sum = function (x, y) { return x + y };\n    LibMath.pi = 3.141593;\n\n    //  someApp.js\n    var math = LibMath;\n    console.log(\"2π = \" + math.sum(math.pi, math.pi));\n\n    //  otherApp.js\n    var sum = LibMath.sum, pi = LibMath.pi;\n    console.log(\"2π = \" + sum(pi, pi));\n    \n### 默认值和通配符\n\n> 使值成为默认导出值，混合值 \n\nES 6 \n\n    //  lib/mathplusplus.js\n    export * from \"lib/math\"\n    export var e = 2.71828182846\n    export default (x) => Math.exp(x)\n\n    //  someApp.js\n    import exp, { pi, e } from \"lib/mathplusplus\"\n    console.log(\"e^{π} = \" + exp(pi))\n\nES 5 \n\n    //  lib/mathplusplus.js\n    LibMathPP = {};\n    for (symbol in LibMath)\n       if (LibMath.hasOwnProperty(symbol))\n           LibMathPP[symbol] = LibMath[symbol];\n    LibMathPP.e = 2.71828182846;\n    LibMathPP.exp = function (x) { return Math.exp(x) };\n\n    //  someApp.js\n    var exp = LibMathPP.exp, pi = LibMathPP.pi, e = LibMathPP.e;\n    console.log(\"e^{π} = \" + exp(pi));\n\n## 类 \n\n### 类 定义 \n\n> 更加直观,OOP式和无需样板的类 \n\nES 6\n\n    class Shape {\n        constructor (id, x, y) {\n            this.id = id\n            this.move(x, y)\n        }\n        move (x, y) {\n            this.x = x\n            this.y = y\n        }\n    }\n\nES 5 \n\n    var Shape = function (id, x, y) {\n        this.id = id;\n        this.move(x, y);\n    };\n    Shape.prototype.move = function (x, y) {\n       this.x = x;\n       this.y = y;\n    };\n\n### 类继承\n\n> 同上 \n\nES 6 \n\n    class Rectangle extends Shape {\n        constructor (id, x, y, width, height) {\n            super(id, x, y)\n            this.width  = width\n            this.height = height\n        }\n    }\n    class Circle extends Shape {\n        constructor (id, x, y, radius) {\n            super(id, x, y)\n            this.radius = radius\n        }\n    }\n\nES 5\n\n    var Rectangle = function (id, x, y, width, height) {\n        Shape.call(this, id, x, y);\n        this.width  = width;\n        this.height = height;\n    };\n    Rectangle.prototype = Object.create(Shape.prototype);\n    Rectangle.prototype.constructor = Rectangle;\n    var Circle = function (id, x, y, radius) {\n        Shape.call(this, id, x, y);\n        this.radius = radius;\n    };\n    Circle.prototype = Object.create(Shape.prototype);\n    Circle.prototype.constructor = Circle;  \n\n### 从表达式继承类 \n\n> 支持通过扩展表达式函数的 mixin-style 插值\n\nES 6 \n\n    var aggregation = (baseClass, ...mixins) => {\n    let base = class _Combined extends baseClass {\n        constructor (...args) {\n            super(...args)\n            mixins.forEach((mixin) => {\n                mixin.prototype.initializer.call(this)\n            })\n        }\n    }\n    let copyProps = (target, source) => {\n        Object.getOwnPropertyNames(source)\n            .concat(Object.getOwnPropertySymbols(source))\n            .forEach((prop) => {\n            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n                return\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n        })\n    }\n    mixins.forEach((mixin) => {\n            copyProps(base.prototype, mixin.prototype)\n            copyProps(base, mixin)\n        })\n        return base\n    }\n\n    class Colored {\n        initializer ()     { this._color = \"white\" }\n        get color ()       { return this._color }\n        set color (v)      { this._color = v }\n    }\n\n    class ZCoord {\n        initializer ()     { this._z = 0 }\n        get z ()           { return this._z }\n        set z (v)          { this._z = v }\n    }\n\n    class Shape {\n        constructor (x, y) { this._x = x; this._y = y }\n        get x ()           { return this._x }\n        set x (v)          { this._x = v }\n        get y ()           { return this._y }\n        set y (v)          { this._y = v }\n    }\n\n    class Rectangle extends aggregation(Shape, Colored, ZCoord) {}\n\n    var rect = new Rectangle(7, 42)\n    rect.z     = 1000\n    rect.color = \"red\"\n    console.log(rect.x, rect.y, rect.z, rect.color) \n\nES 5\n\n    var aggregation = function (baseClass, mixins) {\n    var base = function () {\n        baseClass.apply(this, arguments);\n        mixins.forEach(function (mixin) {\n            mixin.prototype.initializer.call(this);\n        }.bind(this));\n    };\n    base.prototype = Object.create(baseClass.prototype);\n    base.prototype.constructor = base;\n    var copyProps = function (target, source) {\n        Object.getOwnPropertyNames(source).forEach(function (prop) {\n            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n                return\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n        })\n    }\n    mixins.forEach(function (mixin) {\n            copyProps(base.prototype, mixin.prototype);\n            copyProps(base, mixin);\n        });\n        return base;\n    };\n\n    var Colored = function () {};\n    Colored.prototype = {\n        initializer: function ()  { this._color = \"white\"; },\n        getColor:    function ()  { return this._color; },\n        setColor:    function (v) { this._color = v; }\n    };\n\n    var ZCoord = function () {};\n    ZCoord.prototype = {\n        initializer: function ()  { this._z = 0; },\n        getZ:        function ()  { return this._z; },\n        setZ:        function (v) { this._z = v; }\n    };\n\n    var Shape = function (x, y) {\n        this._x = x; this._y = y;\n    };\n    Shape.prototype = {\n        getX: function ()  { return this._x; },\n        setX: function (v) { this._x = v; },\n        getY: function ()  { return this._y; },\n        setY: function (v) { this._y = v; }\n    }\n\n    var _Combined = aggregation(Shape, [ Colored, ZCoord ]);\n    var Rectangle = function (x, y) {\n        _Combined.call(this, x, y);\n    };\n    Rectangle.prototype = Object.create(_Combined.prototype);\n    Rectangle.prototype.constructor = Rectangle;\n\n    var rect = new Rectangle(7, 42);\n    rect.setZ(1000);\n    rect.setColor(\"red\");\n    console.log(rect.getX(), rect.getY(), rect.getZ(), rect.getColor());\n    \n### 基本的类访问 \n\n> 类构造器和方法的简单访问 \n\nES 6 \n\n    class Shape {\n        …\n        toString () {\n             return `Shape(${this.id})`\n        }\n    }\n    class Rectangle extends Shape {\n        constructor (id, x, y, width, height) {\n            super(id, x, y)\n            …\n        } \n        toString () {\n            return \"Rectangle > \" + super.toString()\n        }\n    }\n    class Circle extends Shape {\n        constructor (id, x, y, radius) {\n            super(id, x, y)\n            …\n        }\n        toString () {\n            return \"Circle > \" + super.toString()\n        }\n ES 5\n \n    var Shape = function (id, x, y) {\n        …\n    };\n    Shape.prototype.toString = function (x, y) {\n        return \"Shape(\" + this.id + \")\"\n    };\n    var Rectangle = function (id, x, y, width, height) {\n        Shape.call(this, id, x, y);\n        …\n    };\n    Rectangle.prototype.toString = function () {\n        return \"Rectangle > \" + Shape.prototype.toString.call(this);\n    };\n    var Circle = function (id, x, y, radius) {\n        Shape.call(this, id, x, y);\n        …\n    };\n    Circle.prototype.toString = function () {\n        return \"Circle > \" + Shape.prototype.toString.call(this);\n    };\n\n\n### 静态成员 \n\n> 简单支持静态类成员 \n\nES 6 \n\n    class Rectangle extends Shape {\n    \t…\n    \tstatic defaultRectangle () {\n       \t return new Rectangle(\"default\", 0, 0, 100, 100)\n    \t}\n\t}\n\tclass Circle extends Shape {\n   \t\t …\n    \t static defaultCircle () {\n        \treturn new Circle(\"default\", 0, 0, 100)\n    \t }\n\t}\n\tvar defRectangle = Rectangle.defaultRectangle()\n\tvar defCircle    = Circle.defaultCircle()\n\nES 5 \n    \n    var Rectangle = function (id, x, y, width, height) {\n    \t…\n\t};\n\tRectangle.defaultRectangle = function () {\n\t\treturn new Rectangle(\"default\", 0, 0, 100, 100);\n    };\n    var Circle = function (id, x, y, width, height) {\n        …\n    };\n    Circle.defaultCircle = function () {\n        return new Circle(\"default\", 0, 0, 100);\n    };\n\tvar defRectangle = Rectangle.defaultRectangle();\n\tvar defCircle    = Circle.defaultCircle();\n\n### Getter/Seeter \n\n> 类也可以使用Getter/Setter \n\nES 6\n\n    class Rectangle {\n        constructor (width, height) {\n        \tthis._width  = width\n        \tthis._height = height\n    \t}\n    \tset width  (width)  { this._width = width               }\n    \tget width  ()       { return this._width                }\n    \tset height (height) { this._height = height             }\n    \tget height ()       { return this._height               }\n    \tget area   ()       { return this._width * this._height }\n\t}\n\tvar r = new Rectangle(50, 20)\n\tr.area === 1000\n    \nES 5 \n    \n    var Rectangle = function (width, height) {\n    \tthis._width  = width;\n    \tthis._height = height;\n\t};\n\tRectangle.prototype = {\n    \tset width  (width)  { this._width = width;               },\n    \tget width  ()       { return this._width;                },\n    \tset height (height) { this._height = height;             },\n    \tget height ()       { return this._height;               },\n    \tget area   ()       { return this._width * this._height; }\n\t};\n\tvar r = new Rectangle(50, 20);\n\tr.area === 1000;\n    \n## 标记类型 \n\n### 标记类型 \n\n> 为对象属性识别使用独一无二的数据类型。标记有可选的描述，但是只适用于调试。 \n\n    Symbol(\"foo\") !== Symbol(\"foo\")\n\tconst foo = Symbol()\n\tconst bar = Symbol()\n\ttypeof foo === \"symbol\"\n\ttypeof bar === \"symbol\"\n\tlet obj = {}\n\tobj[foo] = \"foo\"\n\tobj[bar] = \"bar\"\n\tJSON.stringify(obj) // {}\n\tObject.keys(obj) // []\n\tObject.getOwnPropertyNames(obj) // []\n\tObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n    \n### 全局标记 \n\n> 通过唯一的键索引 \n\n    Symbol.for(\"app.foo\") === Symbol.for(\"app.foo\")\n\tconst foo = Symbol.for(\"app.foo\")\n\tconst bar = Symbol.for(\"app.bar\")\n\tSymbol.keyFor(foo) === \"app.foo\"\n\tSymbol.keyFor(bar) === \"app.bar\"\n\ttypeof foo === \"symbol\"\n\ttypeof bar === \"symbol\"\n\tlet obj = {}\n\tobj[foo] = \"foo\"\n\tobj[bar] = \"bar\"\n\tJSON.stringify(obj) // {}\n\tObject.keys(obj) // []\n\tObject.getOwnPropertyNames(obj) // []\n\tObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n    \n## 迭代器 \n### 迭代器和 For-Of 操作\n> 支持迭代协议允许对象定义自己的迭代行为。另外，支持迭代器协议生成值的序列（无论有限还是无限）。最后提供方便的迭代方式迭代可迭代对象。 \n\nES 6 \n    \n    let fibonacci = {\n    [Symbol.iterator]() {\n        let pre = 0, cur = 1\n        return {\n           next () {\n               [ pre, cur ] = [ cur, pre + cur ]\n               return { done: false, value: cur }\n          \t }\n       \t }\n   \t\t}\n\t}\n\n    for (let n of fibonacci) {\n    \tif (n > 1000)\n       \t break\n    \tconsole.log(n)\n\t} \n\nES 5\n    \n    var fibonacci = {\n    next: (function () {\n        var pre = 0, cur = 1;\n        return function () {\n            tmp = pre;\n            pre = cur;\n            cur += tmp;\n            return cur;\n       \t };\n   \t\t})()\n\t};\n\n\tvar n;\n\tfor (;;) {\n   \t\tn = fibonacci.next();\n    \tif (n > 1000)\n           break;\n    \tconsole.log(n);\n\t} \n\n## Promises \n\n### Promises 使用 \n\nES 6 \n\n    function msgAfterTimeout (msg, who, timeout) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(`${msg} Hello ${who}!`), timeout)\n        })\n    }\n\t msgAfterTimeout(\"\", \"Foo\", 100).then((msg) =>\n   \t     msgAfterTimeout(msg, \"Bar\", 200)\n    ).then((msg) => {\n        console.log(`done after 300ms:${msg}`)\n    }) \n\nES 5\n    \n    function msgAfterTimeout (msg, who, timeout, onDone) {\n        setTimeout(function () {\n             onDone(msg + \" Hello \" + who + \"!\");\n        }, timeout);\n\t}\n    msgAfterTimeout(\"\", \"Foo\", 100, function (msg) {\n        msgAfterTimeout(msg, \"Bar\", 200, function (msg) {\n            console.log(\"done after 300ms:\" + msg);\n        });\n    });\n\n### Promises 合并 \n\n> 合并一个或者多个Promises不用担心异步问题。 \n\nES 6 \n\n    function fetchAsync (url, timeout, onData, onError) {\n        …\n    } \n    let fetchPromised = (url, timeout) => {\n        return new Promise((resolve, reject) => {\n            fetchAsync(url, timeout, resolve, reject)\n        })\n    }\n    Promise.all([\n        fetchPromised(\"http://backend/foo.txt\", 500),\n        fetchPromised(\"http://backend/bar.txt\", 500),\n        fetchPromised(\"http://backend/baz.txt\", 500)\n    ]).then((data) => {\n        let [ foo, bar, baz ] = data\n        console.log(`success: foo=${foo} bar=${bar} baz=${baz}`)\n    }, (err) => {\n        console.log(`error: ${err}`)\n    })\n\nES 5\n    \n    function fetchAsync (url, timeout, onData, onError) {\n        …\n\t }\n    function fetchAll (request, onData, onError) {\n    var result = [], results = 0;\n    for (var i = 0; i < request.length; i++) {\n        result[i] = null;\n        (function (i) {\n                fetchAsync(request[i].url, request[i].timeout, function (data) {\n                    result[i] = data;\n                    if (++results === request.length)\n                        onData(result);\n                }, onError);\n            })(i);\n        }\n    }\n    fetchAll([\n    { url: \"http://backend/foo.txt\", timeout: 500 },\n    { url: \"http://backend/bar.txt\", timeout: 500 },\n    { url: \"http://backend/baz.txt\", timeout: 500 }\n    ], function (data) {\n    var foo = data[0], bar = data[1], baz = data[2];\n    console.log(\"success: foo=\" + foo + \" bar=\" + bar + \" baz=\" + baz);\n    }, function (err) {\n        console.log(\"error: \" + err);\n    });\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ","source":"_posts/搬运一些es6内容，以及在es5中的写法.md","raw":"---\ntitle: 搬运一些ES6内容，以及在ES5中的写法\ndate: 2017-10-13 15:48:19\ntags: 前端\n---\n## 作用域\n\n### 不可变变量\n\n>只可以使变量本身不可以写，并非它分配的内容，比如如果内容是一个对象，意味着对象依然可以修改。\n\nES 5\n\n    const PI = 3.141593\n\tPI > 3.0\n\t\nES 6\n\t\n\tObject.defineProperty(typeof global === \"object\" ? \tglobal : window, \"PI\", {\n       value:        3.141593,\n       enumerable:   true,\n       writable:     false,\n   \t   configurable: false\n\t})\n\tPI > 3.0;\n\t\n### 块级作用域变量\n\n> 块级作用域的变量或常量不提升\n\nES 6\n\n    for (let i = 0; i < a.length; i++) {\n        let x = a[i]\n        …\n    }\n    for (let i = 0; i < b.length; i++) {\n        let y = b[i]\n        …\n    }\n\n    let callbacks = []\n    for (let i = 0; i <= 2; i++) {\n        callbacks[i] = function () { return i * 2 }\n    }\n    callbacks[0]() === 0\n    callbacks[1]() === 2\n    callbacks[2]() === 4\n\nES 5\n\n    var i, x, y;\n    for (i = 0; i < a.length; i++) {\n        x = a[i];\n        …\n    }\n    for (i = 0; i < b.length; i++) {\n        y = b[i];\n        …\n    }\n\n    var callbacks = [];\n    for (var i = 0; i <= 2; i++) {\n        (function (i) {\n            callbacks[i] = function() { return i * 2; };\n        })(i);\n    }\n    callbacks[0]() === 0;\n    callbacks[1]() === 2;\n    callbacks[2]() === 4;\n    \n### 块级作用域函数\n\n> 定义块级作用域函数\n\nES 6\n\n    {\n        function foo () { return 1 }\n        foo() === 1\n        {\n            function foo () { return 2 }\n            foo() === 2\n        }\n        foo() === 1\n    }\n   \nES 5\n\n    (function () {\n        var foo = function () { return 1; }\n        foo() === 1;\n        (function () {\n            var foo = function () { return 2; }\n            foo() === 2;\n        })();\n        foo() === 1;\n    })();\n   \n## 箭头函数\n\n### 表达体\n\n> 更好的闭合函数 \n\nES 6\n\n    odds  = evens.map(v => v + 1)\n    pairs = evens.map(v => ({ even: v, odd: v + 1 }))\n    nums  = evens.map((v, i) => v + i)\n\nES 5\n    \n    odds  = evens.map(function (v) { return v + 1; });\n    pairs = evens.map(function (v) { return { even: v, odd: v + 1 }; });\n    nums  = evens.map(function (v, i) { return v + i; });\n    \n### 声明\n\n> 同上\n \nES 6\n\n    nums.forEach(v => {\n  \t if (v % 5 === 0)\n       fives.push(v)\n\t })\n\nES 5 \n    \n    nums.forEach(function (v) {\n    if (v % 5 === 0)\n       fives.push(v);\n    });\n        \n### This\n\n> 更直观的处理当前对象上下文\n\nES 6\n\n    this.nums.forEach((v) => {\n    if (v % 5 === 0)\n        this.fives.push(v)\n    })\n    \nES 5\n\n    //  variant 1\n    var self = this;\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            self.fives.push(v);\n    });\n\n    //  variant 2\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            this.fives.push(v);\n    }, this);\n\n    //  variant 3 (since ECMAScript 5.1 only)\n    this.nums.forEach(function (v) {\n        if (v % 5 === 0)\n            this.fives.push(v);\n    }.bind(this));\n\n## 扩展的参数处理\n\n### 默认参数值\n\n> 简单直观的函数默认值\n\nES 6\n    \n    function f (x, y = 7, z = 42) {\n        return x + y + z\n    }\n    f(1) === 50\n    \nES 5\n\n    function f (x, y, z) {\n    if (y === undefined)\n        y = 7;\n    if (z === undefined)\n        z = 42;\n    return x + y + z;\n    }; \n    f(1) === 50;\n\n### 剩余参数\n\n> 汇总可变函数参数到一个参数内\n\nES 6\n\n    function f (x, y, ...a) {\n        return (x + y) * a.length\n    }\n    f(1, 2, \"hello\", true, 7) === 9\n\nES 5\n\n    function f (x, y) {\n    var a = Array.prototype.slice.call(arguments, 2);\n        return (x + y) * a.length;\n    };\n    f(1, 2, \"hello\", true, 7) === 9;\n    \n### 传播\n\n>可以传递可迭代集合里的元素到字面元素或者函数参数里\n\nES 6\n\n    var params = [ \"hello\", true, 7 ]\n    var other = [ 1, 2, ...params ] // [ 1, 2, \"hello\", true, 7 ]\n\n    function f (x, y, ...a) {\n        return (x + y) * a.length\n    }\n    f(1, 2, ...params) === 9\n\n    var str = \"foo\"\n    var chars = [ ...str ] // [ \"f\", \"o\", \"o\" ]\n\nES 5\n\n    var params = [ \"hello\", true, 7 ];\n    var other = [ 1, 2 ].concat(params); // [ 1, 2, \"hello\", true, 7 ]\n\n    function f (x, y) {\n        var a = Array.prototype.slice.call(arguments, 2);\n        return (x + y) * a.length;\n    };\n    f.apply(undefined, [ 1, 2 ].concat(params)) === 9;\n\n    var str = \"foo\";\n    var chars = str.split(\"\"); // [ \"f\", \"o\", \"o\" ]\n\n## 模版语法\n\n### 字符串插值\n\n> 单行或者多行直观的表达插值 \n\nES 6\n\n    var customer = { name: \"Foo\" }\n    var card = { amount: 7, product: \"Bar\", unitprice: 42 }\n    var message = `Hello ${customer.name},\n    want to buy ${card.amount} ${card.product} for\n    a total of ${card.amount * card.unitprice} bucks?`\n    \nES 5\n\n    var customer = { name: \"Foo\" };\n    var card = { amount: 7, product: \"Bar\", unitprice: 42 };\n    var message = \"Hello \" + customer.name + \",\\n\" +\n    \"want to buy \" + card.amount + \" \" + card.product + \" for\\n\" +\n    \"a total of \" + (card.amount * card.unitprice) + \" bucks?\";\n\n### 自定义插值\n\n> 灵活的表达插值\n\nES 6\n\n    get`http://example.com/foo?bar=${bar + baz}&quux=${quux}`\n\nES 5\n\n    get([ \"http://example.com/foo?bar=\", \"&quux=\", \"\" ],bar + baz, quux);\n    \n### 原生字符串访问\n\n> 访问原生模版字符串内容（反斜杠不会被解释）\n\n    function quux (strings, ...values) {\n        strings[0] === \"foo\\n\"\n        strings[1] === \"bar\"\n        strings.raw[0] === \"foo\\\\n\"\n        strings.raw[1] === \"bar\"\n        values[0] === 42\n    }\n    quux `foo\\n${ 42 }bar`\n\n    String.raw `foo\\n${ 42 }bar` === \"foo\\\\n42bar\"\n\n## 扩展文字\n### 二进制和八进制\n\n> 直接支持二进制和八进制内容\n\nES 6 \n    \n    0b111110111 === 503\n    0o767 === 503\n\nES 5\n\n    parseInt(\"111110111\", 2) === 503;\n    parseInt(\"767\", 8) === 503;\n    0767 === 503; // only in non-strict, backward compatibility mode\n\n### unicode和正则表达式\n\n> 扩展支持字符串使用unicode和正则表达式\n\nES 6\n\n    \"𠮷\".length === 2\n    \"𠮷\".match(/./u)[0].length === 2\n    \"𠮷\" === \"\\uD842\\uDFB7\" \n    \"𠮷\" === \"\\u{20BB7}\"\n    \"𠮷\".codePointAt(0) == 0x20BB7\n    for (let codepoint of \"𠮷\") console.log(codepoint)\n\nES 5 \n\n    \"𠮷\".length === 2;\n    \"𠮷\".match(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000- \\uFFFF][\\uD800-\\uDBFF][\\uDC00-\\uDFFF][\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])(?:[^\\uD800-\\uDBFF]^)[\\uDC00-\\uDFFF])/)[0].length === 2;\n    \"𠮷\" === \"\\uD842\\uDFB7\";\n    //  no equivalent in ES5\n    //  no equivalent in ES5\n    //  no equivalent in ES5\n    \n## 增强的正则表达式\n\n### 正则表达式粘性匹配\n\n> 保持匹配位置在匹配内容之间，支持任意长度字符串高效解析，即使有任意数量的不同正则表达式。\n\nES 6\n\n    let parser = (input, match) => {\n    for (let pos = 0, lastPos = input.length; pos < lastPos; ) {\n        for (let i = 0; i < match.length; i++) {\n            match[i].pattern.lastIndex = pos\n            let found\n            if ((found = match[i].pattern.exec(input)) !== null) {\n                match[i].action(found)\n                pos = match[i].pattern.lastIndex\n                break\n            }\n        }\n      }\n    }\n\n    let report = (match) => {\n        console.log(JSON.stringify(match))\n    }\n    parser(\"Foo 1 Bar 7 Baz 42\", [\n        { pattern: /^Foo\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^Bar\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^Baz\\s+(\\d+)/y, action: (match) => report(match) },\n        { pattern: /^\\s*/y,         action: (match) => {}            }\n    ])\n\nES 5\n\n    var parser = function (input, match) {\n    for (var i, found, inputTmp = input; inputTmp !== \"\"; ) {\n        for (i = 0; i < match.length; i++) {\n            if ((found = match[i].pattern.exec(inputTmp)) !== null) {\n                match[i].action(found);\n                inputTmp = inputTmp.substr(found[0].length);\n                break;\n            }\n        }\n      }\n    }\n\n    var report = function (match) {\n        console.log(JSON.stringify(match));\n    };\n    parser(\"Foo 1 Bar 7 Baz 42\", [\n        { pattern: /^Foo\\s+(\\d+)/, action: function (match)    { report(match); } },\n        { pattern: /^Bar\\s+(\\d+)/, action: function (match) { report(match); } },\n        { pattern: /^Baz\\s+(\\d+)/, action: function (match) { report(match); } },\n        { pattern: /^\\s*/,         action: function (match) {}                 }\n    ]); \n\n## 增强的对象属性\n\n### 属性速记\n\n> 更短的语法，用于公共对象属性定义\n\nES 6\n    \n    obj = { x, y }\n    \nES 5\n\n    obj = { x: x, y: y };\n    \n\n### 计算属性名 \n\n> 计算属性定义支持计算命名 \n \nES 6 \n    \n    let obj = {\n        foo: \"bar\",\n        [ \"baz\" + quux() ]: 42\n    }\n\nES 5\n\n    var obj = {\n        foo: \"bar\"\n    };\n    obj[ \"baz\" + quux() ] = 42;\n\n### 方法属性\n\n> 对象属性定义支持方法符号 \n\nES 6 \n\n    obj = {\n        foo (a, b) {\n            …\n        },\n        bar (x, y) {\n            …\n        },\n        *quux (x, y) {\n            …\n        }\n    }\n    \nES 5 \n\n    obj = {\n        foo: function (a, b) {\n            …\n        },\n        bar: function (x, y) {\n            …\n        },\n        //  quux: no equivalent in ES5\n        …\n    };\n\n## 解构 \n\n### 数组匹配 \n\n> 直观且灵活的将数组解构为单个变量\n\nES 6 \n\n    var list = [ 1, 2, 3 ]\n    var [ a, , b ] = list\n    [ b, a ] = [ a, b ]\n\nES 5 \n    \n    var list = [ 1, 2, 3 ];\n    var a = list[0], b = list[2];\n    var tmp = a; a = b; b = tmp;\n\n### 对象匹配，速记符号 \n\n> 同上\n\nES 6 \n\n    var { op, lhs, rhs } = getASTNode()\n    \nES 5 \n\n    var tmp = getASTNode();\n    var op  = tmp.op;\n    var lhs = tmp.lhs;\n    var rhs = tmp.rhs;\n\n### 对象匹配 深匹配 \n\n> 同上 \n\nES 6 \n\n    var { op: a, lhs: { op: b }, rhs: c } = getASTNode()\n\nES 5 \n\n    var tmp = getASTNode();\n    var a = tmp.op;\n    var b = tmp.lhs.op;\n    var c = tmp.rhs;\n\n### 对象数组匹配，默认值 \n\n> 为对象和数组解构简单直观的默认值\n\nES 6 \n\n    var obj = { a: 1 }\n    var list = [ 1 ]\n    var { a, b = 2 } = obj\n    var [ x, y = 2 ] = list\n \nES 5\n\n    var obj = { a: 1 };\n    var list = [ 1 ];\n    var a = obj.a;\n    var b = obj.b === undefined ? 2 : obj.b;\n    var x = list[0];\n    var y = list[1] === undefined ? 2 : list[1];\n    \n### 参数上下文匹配 \n\n> 函数调用期间将数组和对象简单灵活的解构为独立参数\n\nES 6 \n\n    function f ([ name, val ]) {\n        console.log(name, val)\n    }\n    function g ({ name: n, val: v }) {\n        console.log(n, v)\n    }\n    function h ({ name, val }) {\n        console.log(name, val)\n    }\n    f([ \"bar\", 42 ])\n    g({ name: \"foo\", val:  7 })\n    h({ name: \"bar\", val: 42 })\n \nES 5\n\n    function f (arg) {\n        var name = arg[0];\n        var val  = arg[1];\n        console.log(name, val);\n    };\n    function g (arg) {\n        var n = arg.name;\n        var v = arg.val;\n        console.log(n, v);\n    };\n    function h (arg) {\n        var name = arg.name;\n        var val  = arg.val;\n        console.log(name, val);\n    };\n    f([ \"bar\", 42 ]);\n    g({ name: \"foo\", val:  7 });\n    h({ name: \"bar\", val: 42 });\n\n### 失败弱处理\n\n> 可选默认值 \n\nES 6 \n\n    var list = [ 7, 42 ]\n    var [ a = 1, b = 2, c = 3, d ] = list\n    a === 7\n    b === 42\n    c === 3\n    d === undefined\n\nES 5 \n\n    var list = [ 7, 42 ];\n    var a = typeof list[0] !== \"undefined\" ? list[0] : 1;\n    var b = typeof list[1] !== \"undefined\" ? list[1] : 2;\n    var c = typeof list[2] !== \"undefined\" ? list[2] : 3;\n    var d = typeof list[3] !== \"undefined\" ? list[3] : undefined;\n    a === 7;\n    b === 42;\n    c === 3;\n    d === undefined;\n    \n## 模块 \n\n### 值导出导入 \n\n> 支持没有全局变量污染的模块导入导出 \n\nES 6 \n\n    //  lib/math.js\n    export function sum (x, y) { return x + y }\n    export var pi = 3.141593\n\n    //  someApp.js\n    import * as math from \"lib/math\"\n    console.log(\"2π = \" + math.sum(math.pi, math.pi))\n\n    //  otherApp.js\n    import { sum, pi } from \"lib/math\"\n    console.log(\"2π = \" + sum(pi, pi)) \n\nES 5 \n\n    //  lib/math.js\n    LibMath = {};\n    LibMath.sum = function (x, y) { return x + y };\n    LibMath.pi = 3.141593;\n\n    //  someApp.js\n    var math = LibMath;\n    console.log(\"2π = \" + math.sum(math.pi, math.pi));\n\n    //  otherApp.js\n    var sum = LibMath.sum, pi = LibMath.pi;\n    console.log(\"2π = \" + sum(pi, pi));\n    \n### 默认值和通配符\n\n> 使值成为默认导出值，混合值 \n\nES 6 \n\n    //  lib/mathplusplus.js\n    export * from \"lib/math\"\n    export var e = 2.71828182846\n    export default (x) => Math.exp(x)\n\n    //  someApp.js\n    import exp, { pi, e } from \"lib/mathplusplus\"\n    console.log(\"e^{π} = \" + exp(pi))\n\nES 5 \n\n    //  lib/mathplusplus.js\n    LibMathPP = {};\n    for (symbol in LibMath)\n       if (LibMath.hasOwnProperty(symbol))\n           LibMathPP[symbol] = LibMath[symbol];\n    LibMathPP.e = 2.71828182846;\n    LibMathPP.exp = function (x) { return Math.exp(x) };\n\n    //  someApp.js\n    var exp = LibMathPP.exp, pi = LibMathPP.pi, e = LibMathPP.e;\n    console.log(\"e^{π} = \" + exp(pi));\n\n## 类 \n\n### 类 定义 \n\n> 更加直观,OOP式和无需样板的类 \n\nES 6\n\n    class Shape {\n        constructor (id, x, y) {\n            this.id = id\n            this.move(x, y)\n        }\n        move (x, y) {\n            this.x = x\n            this.y = y\n        }\n    }\n\nES 5 \n\n    var Shape = function (id, x, y) {\n        this.id = id;\n        this.move(x, y);\n    };\n    Shape.prototype.move = function (x, y) {\n       this.x = x;\n       this.y = y;\n    };\n\n### 类继承\n\n> 同上 \n\nES 6 \n\n    class Rectangle extends Shape {\n        constructor (id, x, y, width, height) {\n            super(id, x, y)\n            this.width  = width\n            this.height = height\n        }\n    }\n    class Circle extends Shape {\n        constructor (id, x, y, radius) {\n            super(id, x, y)\n            this.radius = radius\n        }\n    }\n\nES 5\n\n    var Rectangle = function (id, x, y, width, height) {\n        Shape.call(this, id, x, y);\n        this.width  = width;\n        this.height = height;\n    };\n    Rectangle.prototype = Object.create(Shape.prototype);\n    Rectangle.prototype.constructor = Rectangle;\n    var Circle = function (id, x, y, radius) {\n        Shape.call(this, id, x, y);\n        this.radius = radius;\n    };\n    Circle.prototype = Object.create(Shape.prototype);\n    Circle.prototype.constructor = Circle;  \n\n### 从表达式继承类 \n\n> 支持通过扩展表达式函数的 mixin-style 插值\n\nES 6 \n\n    var aggregation = (baseClass, ...mixins) => {\n    let base = class _Combined extends baseClass {\n        constructor (...args) {\n            super(...args)\n            mixins.forEach((mixin) => {\n                mixin.prototype.initializer.call(this)\n            })\n        }\n    }\n    let copyProps = (target, source) => {\n        Object.getOwnPropertyNames(source)\n            .concat(Object.getOwnPropertySymbols(source))\n            .forEach((prop) => {\n            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n                return\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n        })\n    }\n    mixins.forEach((mixin) => {\n            copyProps(base.prototype, mixin.prototype)\n            copyProps(base, mixin)\n        })\n        return base\n    }\n\n    class Colored {\n        initializer ()     { this._color = \"white\" }\n        get color ()       { return this._color }\n        set color (v)      { this._color = v }\n    }\n\n    class ZCoord {\n        initializer ()     { this._z = 0 }\n        get z ()           { return this._z }\n        set z (v)          { this._z = v }\n    }\n\n    class Shape {\n        constructor (x, y) { this._x = x; this._y = y }\n        get x ()           { return this._x }\n        set x (v)          { this._x = v }\n        get y ()           { return this._y }\n        set y (v)          { this._y = v }\n    }\n\n    class Rectangle extends aggregation(Shape, Colored, ZCoord) {}\n\n    var rect = new Rectangle(7, 42)\n    rect.z     = 1000\n    rect.color = \"red\"\n    console.log(rect.x, rect.y, rect.z, rect.color) \n\nES 5\n\n    var aggregation = function (baseClass, mixins) {\n    var base = function () {\n        baseClass.apply(this, arguments);\n        mixins.forEach(function (mixin) {\n            mixin.prototype.initializer.call(this);\n        }.bind(this));\n    };\n    base.prototype = Object.create(baseClass.prototype);\n    base.prototype.constructor = base;\n    var copyProps = function (target, source) {\n        Object.getOwnPropertyNames(source).forEach(function (prop) {\n            if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n                return\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n        })\n    }\n    mixins.forEach(function (mixin) {\n            copyProps(base.prototype, mixin.prototype);\n            copyProps(base, mixin);\n        });\n        return base;\n    };\n\n    var Colored = function () {};\n    Colored.prototype = {\n        initializer: function ()  { this._color = \"white\"; },\n        getColor:    function ()  { return this._color; },\n        setColor:    function (v) { this._color = v; }\n    };\n\n    var ZCoord = function () {};\n    ZCoord.prototype = {\n        initializer: function ()  { this._z = 0; },\n        getZ:        function ()  { return this._z; },\n        setZ:        function (v) { this._z = v; }\n    };\n\n    var Shape = function (x, y) {\n        this._x = x; this._y = y;\n    };\n    Shape.prototype = {\n        getX: function ()  { return this._x; },\n        setX: function (v) { this._x = v; },\n        getY: function ()  { return this._y; },\n        setY: function (v) { this._y = v; }\n    }\n\n    var _Combined = aggregation(Shape, [ Colored, ZCoord ]);\n    var Rectangle = function (x, y) {\n        _Combined.call(this, x, y);\n    };\n    Rectangle.prototype = Object.create(_Combined.prototype);\n    Rectangle.prototype.constructor = Rectangle;\n\n    var rect = new Rectangle(7, 42);\n    rect.setZ(1000);\n    rect.setColor(\"red\");\n    console.log(rect.getX(), rect.getY(), rect.getZ(), rect.getColor());\n    \n### 基本的类访问 \n\n> 类构造器和方法的简单访问 \n\nES 6 \n\n    class Shape {\n        …\n        toString () {\n             return `Shape(${this.id})`\n        }\n    }\n    class Rectangle extends Shape {\n        constructor (id, x, y, width, height) {\n            super(id, x, y)\n            …\n        } \n        toString () {\n            return \"Rectangle > \" + super.toString()\n        }\n    }\n    class Circle extends Shape {\n        constructor (id, x, y, radius) {\n            super(id, x, y)\n            …\n        }\n        toString () {\n            return \"Circle > \" + super.toString()\n        }\n ES 5\n \n    var Shape = function (id, x, y) {\n        …\n    };\n    Shape.prototype.toString = function (x, y) {\n        return \"Shape(\" + this.id + \")\"\n    };\n    var Rectangle = function (id, x, y, width, height) {\n        Shape.call(this, id, x, y);\n        …\n    };\n    Rectangle.prototype.toString = function () {\n        return \"Rectangle > \" + Shape.prototype.toString.call(this);\n    };\n    var Circle = function (id, x, y, radius) {\n        Shape.call(this, id, x, y);\n        …\n    };\n    Circle.prototype.toString = function () {\n        return \"Circle > \" + Shape.prototype.toString.call(this);\n    };\n\n\n### 静态成员 \n\n> 简单支持静态类成员 \n\nES 6 \n\n    class Rectangle extends Shape {\n    \t…\n    \tstatic defaultRectangle () {\n       \t return new Rectangle(\"default\", 0, 0, 100, 100)\n    \t}\n\t}\n\tclass Circle extends Shape {\n   \t\t …\n    \t static defaultCircle () {\n        \treturn new Circle(\"default\", 0, 0, 100)\n    \t }\n\t}\n\tvar defRectangle = Rectangle.defaultRectangle()\n\tvar defCircle    = Circle.defaultCircle()\n\nES 5 \n    \n    var Rectangle = function (id, x, y, width, height) {\n    \t…\n\t};\n\tRectangle.defaultRectangle = function () {\n\t\treturn new Rectangle(\"default\", 0, 0, 100, 100);\n    };\n    var Circle = function (id, x, y, width, height) {\n        …\n    };\n    Circle.defaultCircle = function () {\n        return new Circle(\"default\", 0, 0, 100);\n    };\n\tvar defRectangle = Rectangle.defaultRectangle();\n\tvar defCircle    = Circle.defaultCircle();\n\n### Getter/Seeter \n\n> 类也可以使用Getter/Setter \n\nES 6\n\n    class Rectangle {\n        constructor (width, height) {\n        \tthis._width  = width\n        \tthis._height = height\n    \t}\n    \tset width  (width)  { this._width = width               }\n    \tget width  ()       { return this._width                }\n    \tset height (height) { this._height = height             }\n    \tget height ()       { return this._height               }\n    \tget area   ()       { return this._width * this._height }\n\t}\n\tvar r = new Rectangle(50, 20)\n\tr.area === 1000\n    \nES 5 \n    \n    var Rectangle = function (width, height) {\n    \tthis._width  = width;\n    \tthis._height = height;\n\t};\n\tRectangle.prototype = {\n    \tset width  (width)  { this._width = width;               },\n    \tget width  ()       { return this._width;                },\n    \tset height (height) { this._height = height;             },\n    \tget height ()       { return this._height;               },\n    \tget area   ()       { return this._width * this._height; }\n\t};\n\tvar r = new Rectangle(50, 20);\n\tr.area === 1000;\n    \n## 标记类型 \n\n### 标记类型 \n\n> 为对象属性识别使用独一无二的数据类型。标记有可选的描述，但是只适用于调试。 \n\n    Symbol(\"foo\") !== Symbol(\"foo\")\n\tconst foo = Symbol()\n\tconst bar = Symbol()\n\ttypeof foo === \"symbol\"\n\ttypeof bar === \"symbol\"\n\tlet obj = {}\n\tobj[foo] = \"foo\"\n\tobj[bar] = \"bar\"\n\tJSON.stringify(obj) // {}\n\tObject.keys(obj) // []\n\tObject.getOwnPropertyNames(obj) // []\n\tObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n    \n### 全局标记 \n\n> 通过唯一的键索引 \n\n    Symbol.for(\"app.foo\") === Symbol.for(\"app.foo\")\n\tconst foo = Symbol.for(\"app.foo\")\n\tconst bar = Symbol.for(\"app.bar\")\n\tSymbol.keyFor(foo) === \"app.foo\"\n\tSymbol.keyFor(bar) === \"app.bar\"\n\ttypeof foo === \"symbol\"\n\ttypeof bar === \"symbol\"\n\tlet obj = {}\n\tobj[foo] = \"foo\"\n\tobj[bar] = \"bar\"\n\tJSON.stringify(obj) // {}\n\tObject.keys(obj) // []\n\tObject.getOwnPropertyNames(obj) // []\n\tObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n    \n## 迭代器 \n### 迭代器和 For-Of 操作\n> 支持迭代协议允许对象定义自己的迭代行为。另外，支持迭代器协议生成值的序列（无论有限还是无限）。最后提供方便的迭代方式迭代可迭代对象。 \n\nES 6 \n    \n    let fibonacci = {\n    [Symbol.iterator]() {\n        let pre = 0, cur = 1\n        return {\n           next () {\n               [ pre, cur ] = [ cur, pre + cur ]\n               return { done: false, value: cur }\n          \t }\n       \t }\n   \t\t}\n\t}\n\n    for (let n of fibonacci) {\n    \tif (n > 1000)\n       \t break\n    \tconsole.log(n)\n\t} \n\nES 5\n    \n    var fibonacci = {\n    next: (function () {\n        var pre = 0, cur = 1;\n        return function () {\n            tmp = pre;\n            pre = cur;\n            cur += tmp;\n            return cur;\n       \t };\n   \t\t})()\n\t};\n\n\tvar n;\n\tfor (;;) {\n   \t\tn = fibonacci.next();\n    \tif (n > 1000)\n           break;\n    \tconsole.log(n);\n\t} \n\n## Promises \n\n### Promises 使用 \n\nES 6 \n\n    function msgAfterTimeout (msg, who, timeout) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(`${msg} Hello ${who}!`), timeout)\n        })\n    }\n\t msgAfterTimeout(\"\", \"Foo\", 100).then((msg) =>\n   \t     msgAfterTimeout(msg, \"Bar\", 200)\n    ).then((msg) => {\n        console.log(`done after 300ms:${msg}`)\n    }) \n\nES 5\n    \n    function msgAfterTimeout (msg, who, timeout, onDone) {\n        setTimeout(function () {\n             onDone(msg + \" Hello \" + who + \"!\");\n        }, timeout);\n\t}\n    msgAfterTimeout(\"\", \"Foo\", 100, function (msg) {\n        msgAfterTimeout(msg, \"Bar\", 200, function (msg) {\n            console.log(\"done after 300ms:\" + msg);\n        });\n    });\n\n### Promises 合并 \n\n> 合并一个或者多个Promises不用担心异步问题。 \n\nES 6 \n\n    function fetchAsync (url, timeout, onData, onError) {\n        …\n    } \n    let fetchPromised = (url, timeout) => {\n        return new Promise((resolve, reject) => {\n            fetchAsync(url, timeout, resolve, reject)\n        })\n    }\n    Promise.all([\n        fetchPromised(\"http://backend/foo.txt\", 500),\n        fetchPromised(\"http://backend/bar.txt\", 500),\n        fetchPromised(\"http://backend/baz.txt\", 500)\n    ]).then((data) => {\n        let [ foo, bar, baz ] = data\n        console.log(`success: foo=${foo} bar=${bar} baz=${baz}`)\n    }, (err) => {\n        console.log(`error: ${err}`)\n    })\n\nES 5\n    \n    function fetchAsync (url, timeout, onData, onError) {\n        …\n\t }\n    function fetchAll (request, onData, onError) {\n    var result = [], results = 0;\n    for (var i = 0; i < request.length; i++) {\n        result[i] = null;\n        (function (i) {\n                fetchAsync(request[i].url, request[i].timeout, function (data) {\n                    result[i] = data;\n                    if (++results === request.length)\n                        onData(result);\n                }, onError);\n            })(i);\n        }\n    }\n    fetchAll([\n    { url: \"http://backend/foo.txt\", timeout: 500 },\n    { url: \"http://backend/bar.txt\", timeout: 500 },\n    { url: \"http://backend/baz.txt\", timeout: 500 }\n    ], function (data) {\n    var foo = data[0], bar = data[1], baz = data[2];\n    console.log(\"success: foo=\" + foo + \" bar=\" + bar + \" baz=\" + baz);\n    }, function (err) {\n        console.log(\"error: \" + err);\n    });\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ","slug":"搬运一些es6内容，以及在es5中的写法","published":1,"updated":"2018-08-21T00:43:30.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le3y001dvcz1kdsib5d6","content":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h3 id=\"不可变变量\"><a href=\"#不可变变量\" class=\"headerlink\" title=\"不可变变量\"></a>不可变变量</h3><blockquote>\n<p>只可以使变量本身不可以写，并非它分配的内容，比如如果内容是一个对象，意味着对象依然可以修改。</p>\n</blockquote>\n<p>ES 5</p>\n<pre><code>const PI = 3.141593\nPI &gt; 3.0\n</code></pre><p>ES 6</p>\n<pre><code>Object.defineProperty(typeof global === &quot;object&quot; ?     global : window, &quot;PI&quot;, {\n   value:        3.141593,\n   enumerable:   true,\n   writable:     false,\n      configurable: false\n})\nPI &gt; 3.0;\n</code></pre><h3 id=\"块级作用域变量\"><a href=\"#块级作用域变量\" class=\"headerlink\" title=\"块级作用域变量\"></a>块级作用域变量</h3><blockquote>\n<p>块级作用域的变量或常量不提升</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>for (let i = 0; i &lt; a.length; i++) {\n    let x = a[i]\n    …\n}\nfor (let i = 0; i &lt; b.length; i++) {\n    let y = b[i]\n    …\n}\n\nlet callbacks = []\nfor (let i = 0; i &lt;= 2; i++) {\n    callbacks[i] = function () { return i * 2 }\n}\ncallbacks[0]() === 0\ncallbacks[1]() === 2\ncallbacks[2]() === 4\n</code></pre><p>ES 5</p>\n<pre><code>var i, x, y;\nfor (i = 0; i &lt; a.length; i++) {\n    x = a[i];\n    …\n}\nfor (i = 0; i &lt; b.length; i++) {\n    y = b[i];\n    …\n}\n\nvar callbacks = [];\nfor (var i = 0; i &lt;= 2; i++) {\n    (function (i) {\n        callbacks[i] = function() { return i * 2; };\n    })(i);\n}\ncallbacks[0]() === 0;\ncallbacks[1]() === 2;\ncallbacks[2]() === 4;\n</code></pre><h3 id=\"块级作用域函数\"><a href=\"#块级作用域函数\" class=\"headerlink\" title=\"块级作用域函数\"></a>块级作用域函数</h3><blockquote>\n<p>定义块级作用域函数</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>{\n    function foo () { return 1 }\n    foo() === 1\n    {\n        function foo () { return 2 }\n        foo() === 2\n    }\n    foo() === 1\n}\n</code></pre><p>ES 5</p>\n<pre><code>(function () {\n    var foo = function () { return 1; }\n    foo() === 1;\n    (function () {\n        var foo = function () { return 2; }\n        foo() === 2;\n    })();\n    foo() === 1;\n})();\n</code></pre><h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"表达体\"><a href=\"#表达体\" class=\"headerlink\" title=\"表达体\"></a>表达体</h3><blockquote>\n<p>更好的闭合函数 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>odds  = evens.map(v =&gt; v + 1)\npairs = evens.map(v =&gt; ({ even: v, odd: v + 1 }))\nnums  = evens.map((v, i) =&gt; v + i)\n</code></pre><p>ES 5</p>\n<pre><code>odds  = evens.map(function (v) { return v + 1; });\npairs = evens.map(function (v) { return { even: v, odd: v + 1 }; });\nnums  = evens.map(function (v, i) { return v + i; });\n</code></pre><h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><blockquote>\n<p>同上</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>nums.forEach(v =&gt; {\n   if (v % 5 === 0)\n   fives.push(v)\n })\n</code></pre><p>ES 5 </p>\n<pre><code>nums.forEach(function (v) {\nif (v % 5 === 0)\n   fives.push(v);\n});\n</code></pre><h3 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h3><blockquote>\n<p>更直观的处理当前对象上下文</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>this.nums.forEach((v) =&gt; {\nif (v % 5 === 0)\n    this.fives.push(v)\n})\n</code></pre><p>ES 5</p>\n<pre><code>//  variant 1\nvar self = this;\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        self.fives.push(v);\n});\n\n//  variant 2\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        this.fives.push(v);\n}, this);\n\n//  variant 3 (since ECMAScript 5.1 only)\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        this.fives.push(v);\n}.bind(this));\n</code></pre><h2 id=\"扩展的参数处理\"><a href=\"#扩展的参数处理\" class=\"headerlink\" title=\"扩展的参数处理\"></a>扩展的参数处理</h2><h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><blockquote>\n<p>简单直观的函数默认值</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>function f (x, y = 7, z = 42) {\n    return x + y + z\n}\nf(1) === 50\n</code></pre><p>ES 5</p>\n<pre><code>function f (x, y, z) {\nif (y === undefined)\n    y = 7;\nif (z === undefined)\n    z = 42;\nreturn x + y + z;\n}; \nf(1) === 50;\n</code></pre><h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><blockquote>\n<p>汇总可变函数参数到一个参数内</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>function f (x, y, ...a) {\n    return (x + y) * a.length\n}\nf(1, 2, &quot;hello&quot;, true, 7) === 9\n</code></pre><p>ES 5</p>\n<pre><code>function f (x, y) {\nvar a = Array.prototype.slice.call(arguments, 2);\n    return (x + y) * a.length;\n};\nf(1, 2, &quot;hello&quot;, true, 7) === 9;\n</code></pre><h3 id=\"传播\"><a href=\"#传播\" class=\"headerlink\" title=\"传播\"></a>传播</h3><blockquote>\n<p>可以传递可迭代集合里的元素到字面元素或者函数参数里</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>var params = [ &quot;hello&quot;, true, 7 ]\nvar other = [ 1, 2, ...params ] // [ 1, 2, &quot;hello&quot;, true, 7 ]\n\nfunction f (x, y, ...a) {\n    return (x + y) * a.length\n}\nf(1, 2, ...params) === 9\n\nvar str = &quot;foo&quot;\nvar chars = [ ...str ] // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]\n</code></pre><p>ES 5</p>\n<pre><code>var params = [ &quot;hello&quot;, true, 7 ];\nvar other = [ 1, 2 ].concat(params); // [ 1, 2, &quot;hello&quot;, true, 7 ]\n\nfunction f (x, y) {\n    var a = Array.prototype.slice.call(arguments, 2);\n    return (x + y) * a.length;\n};\nf.apply(undefined, [ 1, 2 ].concat(params)) === 9;\n\nvar str = &quot;foo&quot;;\nvar chars = str.split(&quot;&quot;); // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]\n</code></pre><h2 id=\"模版语法\"><a href=\"#模版语法\" class=\"headerlink\" title=\"模版语法\"></a>模版语法</h2><h3 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h3><blockquote>\n<p>单行或者多行直观的表达插值 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>var customer = { name: &quot;Foo&quot; }\nvar card = { amount: 7, product: &quot;Bar&quot;, unitprice: 42 }\nvar message = `Hello ${customer.name},\nwant to buy ${card.amount} ${card.product} for\na total of ${card.amount * card.unitprice} bucks?`\n</code></pre><p>ES 5</p>\n<pre><code>var customer = { name: &quot;Foo&quot; };\nvar card = { amount: 7, product: &quot;Bar&quot;, unitprice: 42 };\nvar message = &quot;Hello &quot; + customer.name + &quot;,\\n&quot; +\n&quot;want to buy &quot; + card.amount + &quot; &quot; + card.product + &quot; for\\n&quot; +\n&quot;a total of &quot; + (card.amount * card.unitprice) + &quot; bucks?&quot;;\n</code></pre><h3 id=\"自定义插值\"><a href=\"#自定义插值\" class=\"headerlink\" title=\"自定义插值\"></a>自定义插值</h3><blockquote>\n<p>灵活的表达插值</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>get`http://example.com/foo?bar=${bar + baz}&amp;quux=${quux}`\n</code></pre><p>ES 5</p>\n<pre><code>get([ &quot;http://example.com/foo?bar=&quot;, &quot;&amp;quux=&quot;, &quot;&quot; ],bar + baz, quux);\n</code></pre><h3 id=\"原生字符串访问\"><a href=\"#原生字符串访问\" class=\"headerlink\" title=\"原生字符串访问\"></a>原生字符串访问</h3><blockquote>\n<p>访问原生模版字符串内容（反斜杠不会被解释）</p>\n</blockquote>\n<pre><code>function quux (strings, ...values) {\n    strings[0] === &quot;foo\\n&quot;\n    strings[1] === &quot;bar&quot;\n    strings.raw[0] === &quot;foo\\\\n&quot;\n    strings.raw[1] === &quot;bar&quot;\n    values[0] === 42\n}\nquux `foo\\n${ 42 }bar`\n\nString.raw `foo\\n${ 42 }bar` === &quot;foo\\\\n42bar&quot;\n</code></pre><h2 id=\"扩展文字\"><a href=\"#扩展文字\" class=\"headerlink\" title=\"扩展文字\"></a>扩展文字</h2><h3 id=\"二进制和八进制\"><a href=\"#二进制和八进制\" class=\"headerlink\" title=\"二进制和八进制\"></a>二进制和八进制</h3><blockquote>\n<p>直接支持二进制和八进制内容</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>0b111110111 === 503\n0o767 === 503\n</code></pre><p>ES 5</p>\n<pre><code>parseInt(&quot;111110111&quot;, 2) === 503;\nparseInt(&quot;767&quot;, 8) === 503;\n0767 === 503; // only in non-strict, backward compatibility mode\n</code></pre><h3 id=\"unicode和正则表达式\"><a href=\"#unicode和正则表达式\" class=\"headerlink\" title=\"unicode和正则表达式\"></a>unicode和正则表达式</h3><blockquote>\n<p>扩展支持字符串使用unicode和正则表达式</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>&quot;𠮷&quot;.length === 2\n&quot;𠮷&quot;.match(/./u)[0].length === 2\n&quot;𠮷&quot; === &quot;\\uD842\\uDFB7&quot; \n&quot;𠮷&quot; === &quot;\\u{20BB7}&quot;\n&quot;𠮷&quot;.codePointAt(0) == 0x20BB7\nfor (let codepoint of &quot;𠮷&quot;) console.log(codepoint)\n</code></pre><p>ES 5 </p>\n<pre><code>&quot;𠮷&quot;.length === 2;\n&quot;𠮷&quot;.match(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000- \\uFFFF][\\uD800-\\uDBFF][\\uDC00-\\uDFFF][\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])(?:[^\\uD800-\\uDBFF]^)[\\uDC00-\\uDFFF])/)[0].length === 2;\n&quot;𠮷&quot; === &quot;\\uD842\\uDFB7&quot;;\n//  no equivalent in ES5\n//  no equivalent in ES5\n//  no equivalent in ES5\n</code></pre><h2 id=\"增强的正则表达式\"><a href=\"#增强的正则表达式\" class=\"headerlink\" title=\"增强的正则表达式\"></a>增强的正则表达式</h2><h3 id=\"正则表达式粘性匹配\"><a href=\"#正则表达式粘性匹配\" class=\"headerlink\" title=\"正则表达式粘性匹配\"></a>正则表达式粘性匹配</h3><blockquote>\n<p>保持匹配位置在匹配内容之间，支持任意长度字符串高效解析，即使有任意数量的不同正则表达式。</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>let parser = (input, match) =&gt; {\nfor (let pos = 0, lastPos = input.length; pos &lt; lastPos; ) {\n    for (let i = 0; i &lt; match.length; i++) {\n        match[i].pattern.lastIndex = pos\n        let found\n        if ((found = match[i].pattern.exec(input)) !== null) {\n            match[i].action(found)\n            pos = match[i].pattern.lastIndex\n            break\n        }\n    }\n  }\n}\n\nlet report = (match) =&gt; {\n    console.log(JSON.stringify(match))\n}\nparser(&quot;Foo 1 Bar 7 Baz 42&quot;, [\n    { pattern: /^Foo\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^Bar\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^Baz\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^\\s*/y,         action: (match) =&gt; {}            }\n])\n</code></pre><p>ES 5</p>\n<pre><code>var parser = function (input, match) {\nfor (var i, found, inputTmp = input; inputTmp !== &quot;&quot;; ) {\n    for (i = 0; i &lt; match.length; i++) {\n        if ((found = match[i].pattern.exec(inputTmp)) !== null) {\n            match[i].action(found);\n            inputTmp = inputTmp.substr(found[0].length);\n            break;\n        }\n    }\n  }\n}\n\nvar report = function (match) {\n    console.log(JSON.stringify(match));\n};\nparser(&quot;Foo 1 Bar 7 Baz 42&quot;, [\n    { pattern: /^Foo\\s+(\\d+)/, action: function (match)    { report(match); } },\n    { pattern: /^Bar\\s+(\\d+)/, action: function (match) { report(match); } },\n    { pattern: /^Baz\\s+(\\d+)/, action: function (match) { report(match); } },\n    { pattern: /^\\s*/,         action: function (match) {}                 }\n]); \n</code></pre><h2 id=\"增强的对象属性\"><a href=\"#增强的对象属性\" class=\"headerlink\" title=\"增强的对象属性\"></a>增强的对象属性</h2><h3 id=\"属性速记\"><a href=\"#属性速记\" class=\"headerlink\" title=\"属性速记\"></a>属性速记</h3><blockquote>\n<p>更短的语法，用于公共对象属性定义</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>obj = { x, y }\n</code></pre><p>ES 5</p>\n<pre><code>obj = { x: x, y: y };\n</code></pre><h3 id=\"计算属性名\"><a href=\"#计算属性名\" class=\"headerlink\" title=\"计算属性名\"></a>计算属性名</h3><blockquote>\n<p>计算属性定义支持计算命名 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>let obj = {\n    foo: &quot;bar&quot;,\n    [ &quot;baz&quot; + quux() ]: 42\n}\n</code></pre><p>ES 5</p>\n<pre><code>var obj = {\n    foo: &quot;bar&quot;\n};\nobj[ &quot;baz&quot; + quux() ] = 42;\n</code></pre><h3 id=\"方法属性\"><a href=\"#方法属性\" class=\"headerlink\" title=\"方法属性\"></a>方法属性</h3><blockquote>\n<p>对象属性定义支持方法符号 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>obj = {\n    foo (a, b) {\n        …\n    },\n    bar (x, y) {\n        …\n    },\n    *quux (x, y) {\n        …\n    }\n}\n</code></pre><p>ES 5 </p>\n<pre><code>obj = {\n    foo: function (a, b) {\n        …\n    },\n    bar: function (x, y) {\n        …\n    },\n    //  quux: no equivalent in ES5\n    …\n};\n</code></pre><h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><h3 id=\"数组匹配\"><a href=\"#数组匹配\" class=\"headerlink\" title=\"数组匹配\"></a>数组匹配</h3><blockquote>\n<p>直观且灵活的将数组解构为单个变量</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var list = [ 1, 2, 3 ]\nvar [ a, , b ] = list\n[ b, a ] = [ a, b ]\n</code></pre><p>ES 5 </p>\n<pre><code>var list = [ 1, 2, 3 ];\nvar a = list[0], b = list[2];\nvar tmp = a; a = b; b = tmp;\n</code></pre><h3 id=\"对象匹配，速记符号\"><a href=\"#对象匹配，速记符号\" class=\"headerlink\" title=\"对象匹配，速记符号\"></a>对象匹配，速记符号</h3><blockquote>\n<p>同上</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var { op, lhs, rhs } = getASTNode()\n</code></pre><p>ES 5 </p>\n<pre><code>var tmp = getASTNode();\nvar op  = tmp.op;\nvar lhs = tmp.lhs;\nvar rhs = tmp.rhs;\n</code></pre><h3 id=\"对象匹配-深匹配\"><a href=\"#对象匹配-深匹配\" class=\"headerlink\" title=\"对象匹配 深匹配\"></a>对象匹配 深匹配</h3><blockquote>\n<p>同上 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var { op: a, lhs: { op: b }, rhs: c } = getASTNode()\n</code></pre><p>ES 5 </p>\n<pre><code>var tmp = getASTNode();\nvar a = tmp.op;\nvar b = tmp.lhs.op;\nvar c = tmp.rhs;\n</code></pre><h3 id=\"对象数组匹配，默认值\"><a href=\"#对象数组匹配，默认值\" class=\"headerlink\" title=\"对象数组匹配，默认值\"></a>对象数组匹配，默认值</h3><blockquote>\n<p>为对象和数组解构简单直观的默认值</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var obj = { a: 1 }\nvar list = [ 1 ]\nvar { a, b = 2 } = obj\nvar [ x, y = 2 ] = list\n</code></pre><p>ES 5</p>\n<pre><code>var obj = { a: 1 };\nvar list = [ 1 ];\nvar a = obj.a;\nvar b = obj.b === undefined ? 2 : obj.b;\nvar x = list[0];\nvar y = list[1] === undefined ? 2 : list[1];\n</code></pre><h3 id=\"参数上下文匹配\"><a href=\"#参数上下文匹配\" class=\"headerlink\" title=\"参数上下文匹配\"></a>参数上下文匹配</h3><blockquote>\n<p>函数调用期间将数组和对象简单灵活的解构为独立参数</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>function f ([ name, val ]) {\n    console.log(name, val)\n}\nfunction g ({ name: n, val: v }) {\n    console.log(n, v)\n}\nfunction h ({ name, val }) {\n    console.log(name, val)\n}\nf([ &quot;bar&quot;, 42 ])\ng({ name: &quot;foo&quot;, val:  7 })\nh({ name: &quot;bar&quot;, val: 42 })\n</code></pre><p>ES 5</p>\n<pre><code>function f (arg) {\n    var name = arg[0];\n    var val  = arg[1];\n    console.log(name, val);\n};\nfunction g (arg) {\n    var n = arg.name;\n    var v = arg.val;\n    console.log(n, v);\n};\nfunction h (arg) {\n    var name = arg.name;\n    var val  = arg.val;\n    console.log(name, val);\n};\nf([ &quot;bar&quot;, 42 ]);\ng({ name: &quot;foo&quot;, val:  7 });\nh({ name: &quot;bar&quot;, val: 42 });\n</code></pre><h3 id=\"失败弱处理\"><a href=\"#失败弱处理\" class=\"headerlink\" title=\"失败弱处理\"></a>失败弱处理</h3><blockquote>\n<p>可选默认值 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var list = [ 7, 42 ]\nvar [ a = 1, b = 2, c = 3, d ] = list\na === 7\nb === 42\nc === 3\nd === undefined\n</code></pre><p>ES 5 </p>\n<pre><code>var list = [ 7, 42 ];\nvar a = typeof list[0] !== &quot;undefined&quot; ? list[0] : 1;\nvar b = typeof list[1] !== &quot;undefined&quot; ? list[1] : 2;\nvar c = typeof list[2] !== &quot;undefined&quot; ? list[2] : 3;\nvar d = typeof list[3] !== &quot;undefined&quot; ? list[3] : undefined;\na === 7;\nb === 42;\nc === 3;\nd === undefined;\n</code></pre><h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"值导出导入\"><a href=\"#值导出导入\" class=\"headerlink\" title=\"值导出导入\"></a>值导出导入</h3><blockquote>\n<p>支持没有全局变量污染的模块导入导出 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>//  lib/math.js\nexport function sum (x, y) { return x + y }\nexport var pi = 3.141593\n\n//  someApp.js\nimport * as math from &quot;lib/math&quot;\nconsole.log(&quot;2π = &quot; + math.sum(math.pi, math.pi))\n\n//  otherApp.js\nimport { sum, pi } from &quot;lib/math&quot;\nconsole.log(&quot;2π = &quot; + sum(pi, pi)) \n</code></pre><p>ES 5 </p>\n<pre><code>//  lib/math.js\nLibMath = {};\nLibMath.sum = function (x, y) { return x + y };\nLibMath.pi = 3.141593;\n\n//  someApp.js\nvar math = LibMath;\nconsole.log(&quot;2π = &quot; + math.sum(math.pi, math.pi));\n\n//  otherApp.js\nvar sum = LibMath.sum, pi = LibMath.pi;\nconsole.log(&quot;2π = &quot; + sum(pi, pi));\n</code></pre><h3 id=\"默认值和通配符\"><a href=\"#默认值和通配符\" class=\"headerlink\" title=\"默认值和通配符\"></a>默认值和通配符</h3><blockquote>\n<p>使值成为默认导出值，混合值 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>//  lib/mathplusplus.js\nexport * from &quot;lib/math&quot;\nexport var e = 2.71828182846\nexport default (x) =&gt; Math.exp(x)\n\n//  someApp.js\nimport exp, { pi, e } from &quot;lib/mathplusplus&quot;\nconsole.log(&quot;e^{π} = &quot; + exp(pi))\n</code></pre><p>ES 5 </p>\n<pre><code>//  lib/mathplusplus.js\nLibMathPP = {};\nfor (symbol in LibMath)\n   if (LibMath.hasOwnProperty(symbol))\n       LibMathPP[symbol] = LibMath[symbol];\nLibMathPP.e = 2.71828182846;\nLibMathPP.exp = function (x) { return Math.exp(x) };\n\n//  someApp.js\nvar exp = LibMathPP.exp, pi = LibMathPP.pi, e = LibMathPP.e;\nconsole.log(&quot;e^{π} = &quot; + exp(pi));\n</code></pre><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"类-定义\"><a href=\"#类-定义\" class=\"headerlink\" title=\"类 定义\"></a>类 定义</h3><blockquote>\n<p>更加直观,OOP式和无需样板的类 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>class Shape {\n    constructor (id, x, y) {\n        this.id = id\n        this.move(x, y)\n    }\n    move (x, y) {\n        this.x = x\n        this.y = y\n    }\n}\n</code></pre><p>ES 5 </p>\n<pre><code>var Shape = function (id, x, y) {\n    this.id = id;\n    this.move(x, y);\n};\nShape.prototype.move = function (x, y) {\n   this.x = x;\n   this.y = y;\n};\n</code></pre><h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><blockquote>\n<p>同上 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Rectangle extends Shape {\n    constructor (id, x, y, width, height) {\n        super(id, x, y)\n        this.width  = width\n        this.height = height\n    }\n}\nclass Circle extends Shape {\n    constructor (id, x, y, radius) {\n        super(id, x, y)\n        this.radius = radius\n    }\n}\n</code></pre><p>ES 5</p>\n<pre><code>var Rectangle = function (id, x, y, width, height) {\n    Shape.call(this, id, x, y);\n    this.width  = width;\n    this.height = height;\n};\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\nvar Circle = function (id, x, y, radius) {\n    Shape.call(this, id, x, y);\n    this.radius = radius;\n};\nCircle.prototype = Object.create(Shape.prototype);\nCircle.prototype.constructor = Circle;  \n</code></pre><h3 id=\"从表达式继承类\"><a href=\"#从表达式继承类\" class=\"headerlink\" title=\"从表达式继承类\"></a>从表达式继承类</h3><blockquote>\n<p>支持通过扩展表达式函数的 mixin-style 插值</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var aggregation = (baseClass, ...mixins) =&gt; {\nlet base = class _Combined extends baseClass {\n    constructor (...args) {\n        super(...args)\n        mixins.forEach((mixin) =&gt; {\n            mixin.prototype.initializer.call(this)\n        })\n    }\n}\nlet copyProps = (target, source) =&gt; {\n    Object.getOwnPropertyNames(source)\n        .concat(Object.getOwnPropertySymbols(source))\n        .forEach((prop) =&gt; {\n        if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n            return\n        Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n    })\n}\nmixins.forEach((mixin) =&gt; {\n        copyProps(base.prototype, mixin.prototype)\n        copyProps(base, mixin)\n    })\n    return base\n}\n\nclass Colored {\n    initializer ()     { this._color = &quot;white&quot; }\n    get color ()       { return this._color }\n    set color (v)      { this._color = v }\n}\n\nclass ZCoord {\n    initializer ()     { this._z = 0 }\n    get z ()           { return this._z }\n    set z (v)          { this._z = v }\n}\n\nclass Shape {\n    constructor (x, y) { this._x = x; this._y = y }\n    get x ()           { return this._x }\n    set x (v)          { this._x = v }\n    get y ()           { return this._y }\n    set y (v)          { this._y = v }\n}\n\nclass Rectangle extends aggregation(Shape, Colored, ZCoord) {}\n\nvar rect = new Rectangle(7, 42)\nrect.z     = 1000\nrect.color = &quot;red&quot;\nconsole.log(rect.x, rect.y, rect.z, rect.color) \n</code></pre><p>ES 5</p>\n<pre><code>var aggregation = function (baseClass, mixins) {\nvar base = function () {\n    baseClass.apply(this, arguments);\n    mixins.forEach(function (mixin) {\n        mixin.prototype.initializer.call(this);\n    }.bind(this));\n};\nbase.prototype = Object.create(baseClass.prototype);\nbase.prototype.constructor = base;\nvar copyProps = function (target, source) {\n    Object.getOwnPropertyNames(source).forEach(function (prop) {\n        if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n            return\n        Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n    })\n}\nmixins.forEach(function (mixin) {\n        copyProps(base.prototype, mixin.prototype);\n        copyProps(base, mixin);\n    });\n    return base;\n};\n\nvar Colored = function () {};\nColored.prototype = {\n    initializer: function ()  { this._color = &quot;white&quot;; },\n    getColor:    function ()  { return this._color; },\n    setColor:    function (v) { this._color = v; }\n};\n\nvar ZCoord = function () {};\nZCoord.prototype = {\n    initializer: function ()  { this._z = 0; },\n    getZ:        function ()  { return this._z; },\n    setZ:        function (v) { this._z = v; }\n};\n\nvar Shape = function (x, y) {\n    this._x = x; this._y = y;\n};\nShape.prototype = {\n    getX: function ()  { return this._x; },\n    setX: function (v) { this._x = v; },\n    getY: function ()  { return this._y; },\n    setY: function (v) { this._y = v; }\n}\n\nvar _Combined = aggregation(Shape, [ Colored, ZCoord ]);\nvar Rectangle = function (x, y) {\n    _Combined.call(this, x, y);\n};\nRectangle.prototype = Object.create(_Combined.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle(7, 42);\nrect.setZ(1000);\nrect.setColor(&quot;red&quot;);\nconsole.log(rect.getX(), rect.getY(), rect.getZ(), rect.getColor());\n</code></pre><h3 id=\"基本的类访问\"><a href=\"#基本的类访问\" class=\"headerlink\" title=\"基本的类访问\"></a>基本的类访问</h3><blockquote>\n<p>类构造器和方法的简单访问 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Shape {\n    …\n    toString () {\n         return `Shape(${this.id})`\n    }\n}\nclass Rectangle extends Shape {\n    constructor (id, x, y, width, height) {\n        super(id, x, y)\n        …\n    } \n    toString () {\n        return &quot;Rectangle &gt; &quot; + super.toString()\n    }\n}\nclass Circle extends Shape {\n    constructor (id, x, y, radius) {\n        super(id, x, y)\n        …\n    }\n    toString () {\n        return &quot;Circle &gt; &quot; + super.toString()\n    }\n</code></pre><p> ES 5</p>\n<pre><code>var Shape = function (id, x, y) {\n    …\n};\nShape.prototype.toString = function (x, y) {\n    return &quot;Shape(&quot; + this.id + &quot;)&quot;\n};\nvar Rectangle = function (id, x, y, width, height) {\n    Shape.call(this, id, x, y);\n    …\n};\nRectangle.prototype.toString = function () {\n    return &quot;Rectangle &gt; &quot; + Shape.prototype.toString.call(this);\n};\nvar Circle = function (id, x, y, radius) {\n    Shape.call(this, id, x, y);\n    …\n};\nCircle.prototype.toString = function () {\n    return &quot;Circle &gt; &quot; + Shape.prototype.toString.call(this);\n};\n</code></pre><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><blockquote>\n<p>简单支持静态类成员 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Rectangle extends Shape {\n    …\n    static defaultRectangle () {\n        return new Rectangle(&quot;default&quot;, 0, 0, 100, 100)\n    }\n}\nclass Circle extends Shape {\n        …\n     static defaultCircle () {\n        return new Circle(&quot;default&quot;, 0, 0, 100)\n     }\n}\nvar defRectangle = Rectangle.defaultRectangle()\nvar defCircle    = Circle.defaultCircle()\n</code></pre><p>ES 5 </p>\n<pre><code>var Rectangle = function (id, x, y, width, height) {\n    …\n};\nRectangle.defaultRectangle = function () {\n    return new Rectangle(&quot;default&quot;, 0, 0, 100, 100);\n};\nvar Circle = function (id, x, y, width, height) {\n    …\n};\nCircle.defaultCircle = function () {\n    return new Circle(&quot;default&quot;, 0, 0, 100);\n};\nvar defRectangle = Rectangle.defaultRectangle();\nvar defCircle    = Circle.defaultCircle();\n</code></pre><h3 id=\"Getter-Seeter\"><a href=\"#Getter-Seeter\" class=\"headerlink\" title=\"Getter/Seeter\"></a>Getter/Seeter</h3><blockquote>\n<p>类也可以使用Getter/Setter </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>class Rectangle {\n    constructor (width, height) {\n        this._width  = width\n        this._height = height\n    }\n    set width  (width)  { this._width = width               }\n    get width  ()       { return this._width                }\n    set height (height) { this._height = height             }\n    get height ()       { return this._height               }\n    get area   ()       { return this._width * this._height }\n}\nvar r = new Rectangle(50, 20)\nr.area === 1000\n</code></pre><p>ES 5 </p>\n<pre><code>var Rectangle = function (width, height) {\n    this._width  = width;\n    this._height = height;\n};\nRectangle.prototype = {\n    set width  (width)  { this._width = width;               },\n    get width  ()       { return this._width;                },\n    set height (height) { this._height = height;             },\n    get height ()       { return this._height;               },\n    get area   ()       { return this._width * this._height; }\n};\nvar r = new Rectangle(50, 20);\nr.area === 1000;\n</code></pre><h2 id=\"标记类型\"><a href=\"#标记类型\" class=\"headerlink\" title=\"标记类型\"></a>标记类型</h2><h3 id=\"标记类型-1\"><a href=\"#标记类型-1\" class=\"headerlink\" title=\"标记类型\"></a>标记类型</h3><blockquote>\n<p>为对象属性识别使用独一无二的数据类型。标记有可选的描述，但是只适用于调试。 </p>\n</blockquote>\n<pre><code>Symbol(&quot;foo&quot;) !== Symbol(&quot;foo&quot;)\nconst foo = Symbol()\nconst bar = Symbol()\ntypeof foo === &quot;symbol&quot;\ntypeof bar === &quot;symbol&quot;\nlet obj = {}\nobj[foo] = &quot;foo&quot;\nobj[bar] = &quot;bar&quot;\nJSON.stringify(obj) // {}\nObject.keys(obj) // []\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n</code></pre><h3 id=\"全局标记\"><a href=\"#全局标记\" class=\"headerlink\" title=\"全局标记\"></a>全局标记</h3><blockquote>\n<p>通过唯一的键索引 </p>\n</blockquote>\n<pre><code>Symbol.for(&quot;app.foo&quot;) === Symbol.for(&quot;app.foo&quot;)\nconst foo = Symbol.for(&quot;app.foo&quot;)\nconst bar = Symbol.for(&quot;app.bar&quot;)\nSymbol.keyFor(foo) === &quot;app.foo&quot;\nSymbol.keyFor(bar) === &quot;app.bar&quot;\ntypeof foo === &quot;symbol&quot;\ntypeof bar === &quot;symbol&quot;\nlet obj = {}\nobj[foo] = &quot;foo&quot;\nobj[bar] = &quot;bar&quot;\nJSON.stringify(obj) // {}\nObject.keys(obj) // []\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n</code></pre><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"迭代器和-For-Of-操作\"><a href=\"#迭代器和-For-Of-操作\" class=\"headerlink\" title=\"迭代器和 For-Of 操作\"></a>迭代器和 For-Of 操作</h3><blockquote>\n<p>支持迭代协议允许对象定义自己的迭代行为。另外，支持迭代器协议生成值的序列（无论有限还是无限）。最后提供方便的迭代方式迭代可迭代对象。 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>let fibonacci = {\n[Symbol.iterator]() {\n    let pre = 0, cur = 1\n    return {\n       next () {\n           [ pre, cur ] = [ cur, pre + cur ]\n           return { done: false, value: cur }\n           }\n        }\n       }\n}\n\nfor (let n of fibonacci) {\n    if (n &gt; 1000)\n        break\n    console.log(n)\n} \n</code></pre><p>ES 5</p>\n<pre><code>var fibonacci = {\nnext: (function () {\n    var pre = 0, cur = 1;\n    return function () {\n        tmp = pre;\n        pre = cur;\n        cur += tmp;\n        return cur;\n        };\n       })()\n};\n\nvar n;\nfor (;;) {\n       n = fibonacci.next();\n    if (n &gt; 1000)\n       break;\n    console.log(n);\n} \n</code></pre><h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><h3 id=\"Promises-使用\"><a href=\"#Promises-使用\" class=\"headerlink\" title=\"Promises 使用\"></a>Promises 使用</h3><p>ES 6 </p>\n<pre><code>function msgAfterTimeout (msg, who, timeout) {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; resolve(`${msg} Hello ${who}!`), timeout)\n    })\n}\n msgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100).then((msg) =&gt;\n        msgAfterTimeout(msg, &quot;Bar&quot;, 200)\n).then((msg) =&gt; {\n    console.log(`done after 300ms:${msg}`)\n}) \n</code></pre><p>ES 5</p>\n<pre><code>function msgAfterTimeout (msg, who, timeout, onDone) {\n    setTimeout(function () {\n         onDone(msg + &quot; Hello &quot; + who + &quot;!&quot;);\n    }, timeout);\n}\nmsgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100, function (msg) {\n    msgAfterTimeout(msg, &quot;Bar&quot;, 200, function (msg) {\n        console.log(&quot;done after 300ms:&quot; + msg);\n    });\n});\n</code></pre><h3 id=\"Promises-合并\"><a href=\"#Promises-合并\" class=\"headerlink\" title=\"Promises 合并\"></a>Promises 合并</h3><blockquote>\n<p>合并一个或者多个Promises不用担心异步问题。 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>function fetchAsync (url, timeout, onData, onError) {\n    …\n} \nlet fetchPromised = (url, timeout) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        fetchAsync(url, timeout, resolve, reject)\n    })\n}\nPromise.all([\n    fetchPromised(&quot;http://backend/foo.txt&quot;, 500),\n    fetchPromised(&quot;http://backend/bar.txt&quot;, 500),\n    fetchPromised(&quot;http://backend/baz.txt&quot;, 500)\n]).then((data) =&gt; {\n    let [ foo, bar, baz ] = data\n    console.log(`success: foo=${foo} bar=${bar} baz=${baz}`)\n}, (err) =&gt; {\n    console.log(`error: ${err}`)\n})\n</code></pre><p>ES 5</p>\n<pre><code>function fetchAsync (url, timeout, onData, onError) {\n    …\n }\nfunction fetchAll (request, onData, onError) {\nvar result = [], results = 0;\nfor (var i = 0; i &lt; request.length; i++) {\n    result[i] = null;\n    (function (i) {\n            fetchAsync(request[i].url, request[i].timeout, function (data) {\n                result[i] = data;\n                if (++results === request.length)\n                    onData(result);\n            }, onError);\n        })(i);\n    }\n}\nfetchAll([\n{ url: &quot;http://backend/foo.txt&quot;, timeout: 500 },\n{ url: &quot;http://backend/bar.txt&quot;, timeout: 500 },\n{ url: &quot;http://backend/baz.txt&quot;, timeout: 500 }\n], function (data) {\nvar foo = data[0], bar = data[1], baz = data[2];\nconsole.log(&quot;success: foo=&quot; + foo + &quot; bar=&quot; + bar + &quot; baz=&quot; + baz);\n}, function (err) {\n    console.log(&quot;error: &quot; + err);\n});\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><h3 id=\"不可变变量\"><a href=\"#不可变变量\" class=\"headerlink\" title=\"不可变变量\"></a>不可变变量</h3><blockquote>\n<p>只可以使变量本身不可以写，并非它分配的内容，比如如果内容是一个对象，意味着对象依然可以修改。</p>\n</blockquote>\n<p>ES 5</p>\n<pre><code>const PI = 3.141593\nPI &gt; 3.0\n</code></pre><p>ES 6</p>\n<pre><code>Object.defineProperty(typeof global === &quot;object&quot; ?     global : window, &quot;PI&quot;, {\n   value:        3.141593,\n   enumerable:   true,\n   writable:     false,\n      configurable: false\n})\nPI &gt; 3.0;\n</code></pre><h3 id=\"块级作用域变量\"><a href=\"#块级作用域变量\" class=\"headerlink\" title=\"块级作用域变量\"></a>块级作用域变量</h3><blockquote>\n<p>块级作用域的变量或常量不提升</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>for (let i = 0; i &lt; a.length; i++) {\n    let x = a[i]\n    …\n}\nfor (let i = 0; i &lt; b.length; i++) {\n    let y = b[i]\n    …\n}\n\nlet callbacks = []\nfor (let i = 0; i &lt;= 2; i++) {\n    callbacks[i] = function () { return i * 2 }\n}\ncallbacks[0]() === 0\ncallbacks[1]() === 2\ncallbacks[2]() === 4\n</code></pre><p>ES 5</p>\n<pre><code>var i, x, y;\nfor (i = 0; i &lt; a.length; i++) {\n    x = a[i];\n    …\n}\nfor (i = 0; i &lt; b.length; i++) {\n    y = b[i];\n    …\n}\n\nvar callbacks = [];\nfor (var i = 0; i &lt;= 2; i++) {\n    (function (i) {\n        callbacks[i] = function() { return i * 2; };\n    })(i);\n}\ncallbacks[0]() === 0;\ncallbacks[1]() === 2;\ncallbacks[2]() === 4;\n</code></pre><h3 id=\"块级作用域函数\"><a href=\"#块级作用域函数\" class=\"headerlink\" title=\"块级作用域函数\"></a>块级作用域函数</h3><blockquote>\n<p>定义块级作用域函数</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>{\n    function foo () { return 1 }\n    foo() === 1\n    {\n        function foo () { return 2 }\n        foo() === 2\n    }\n    foo() === 1\n}\n</code></pre><p>ES 5</p>\n<pre><code>(function () {\n    var foo = function () { return 1; }\n    foo() === 1;\n    (function () {\n        var foo = function () { return 2; }\n        foo() === 2;\n    })();\n    foo() === 1;\n})();\n</code></pre><h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"表达体\"><a href=\"#表达体\" class=\"headerlink\" title=\"表达体\"></a>表达体</h3><blockquote>\n<p>更好的闭合函数 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>odds  = evens.map(v =&gt; v + 1)\npairs = evens.map(v =&gt; ({ even: v, odd: v + 1 }))\nnums  = evens.map((v, i) =&gt; v + i)\n</code></pre><p>ES 5</p>\n<pre><code>odds  = evens.map(function (v) { return v + 1; });\npairs = evens.map(function (v) { return { even: v, odd: v + 1 }; });\nnums  = evens.map(function (v, i) { return v + i; });\n</code></pre><h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><blockquote>\n<p>同上</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>nums.forEach(v =&gt; {\n   if (v % 5 === 0)\n   fives.push(v)\n })\n</code></pre><p>ES 5 </p>\n<pre><code>nums.forEach(function (v) {\nif (v % 5 === 0)\n   fives.push(v);\n});\n</code></pre><h3 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h3><blockquote>\n<p>更直观的处理当前对象上下文</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>this.nums.forEach((v) =&gt; {\nif (v % 5 === 0)\n    this.fives.push(v)\n})\n</code></pre><p>ES 5</p>\n<pre><code>//  variant 1\nvar self = this;\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        self.fives.push(v);\n});\n\n//  variant 2\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        this.fives.push(v);\n}, this);\n\n//  variant 3 (since ECMAScript 5.1 only)\nthis.nums.forEach(function (v) {\n    if (v % 5 === 0)\n        this.fives.push(v);\n}.bind(this));\n</code></pre><h2 id=\"扩展的参数处理\"><a href=\"#扩展的参数处理\" class=\"headerlink\" title=\"扩展的参数处理\"></a>扩展的参数处理</h2><h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><blockquote>\n<p>简单直观的函数默认值</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>function f (x, y = 7, z = 42) {\n    return x + y + z\n}\nf(1) === 50\n</code></pre><p>ES 5</p>\n<pre><code>function f (x, y, z) {\nif (y === undefined)\n    y = 7;\nif (z === undefined)\n    z = 42;\nreturn x + y + z;\n}; \nf(1) === 50;\n</code></pre><h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><blockquote>\n<p>汇总可变函数参数到一个参数内</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>function f (x, y, ...a) {\n    return (x + y) * a.length\n}\nf(1, 2, &quot;hello&quot;, true, 7) === 9\n</code></pre><p>ES 5</p>\n<pre><code>function f (x, y) {\nvar a = Array.prototype.slice.call(arguments, 2);\n    return (x + y) * a.length;\n};\nf(1, 2, &quot;hello&quot;, true, 7) === 9;\n</code></pre><h3 id=\"传播\"><a href=\"#传播\" class=\"headerlink\" title=\"传播\"></a>传播</h3><blockquote>\n<p>可以传递可迭代集合里的元素到字面元素或者函数参数里</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>var params = [ &quot;hello&quot;, true, 7 ]\nvar other = [ 1, 2, ...params ] // [ 1, 2, &quot;hello&quot;, true, 7 ]\n\nfunction f (x, y, ...a) {\n    return (x + y) * a.length\n}\nf(1, 2, ...params) === 9\n\nvar str = &quot;foo&quot;\nvar chars = [ ...str ] // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]\n</code></pre><p>ES 5</p>\n<pre><code>var params = [ &quot;hello&quot;, true, 7 ];\nvar other = [ 1, 2 ].concat(params); // [ 1, 2, &quot;hello&quot;, true, 7 ]\n\nfunction f (x, y) {\n    var a = Array.prototype.slice.call(arguments, 2);\n    return (x + y) * a.length;\n};\nf.apply(undefined, [ 1, 2 ].concat(params)) === 9;\n\nvar str = &quot;foo&quot;;\nvar chars = str.split(&quot;&quot;); // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]\n</code></pre><h2 id=\"模版语法\"><a href=\"#模版语法\" class=\"headerlink\" title=\"模版语法\"></a>模版语法</h2><h3 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h3><blockquote>\n<p>单行或者多行直观的表达插值 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>var customer = { name: &quot;Foo&quot; }\nvar card = { amount: 7, product: &quot;Bar&quot;, unitprice: 42 }\nvar message = `Hello ${customer.name},\nwant to buy ${card.amount} ${card.product} for\na total of ${card.amount * card.unitprice} bucks?`\n</code></pre><p>ES 5</p>\n<pre><code>var customer = { name: &quot;Foo&quot; };\nvar card = { amount: 7, product: &quot;Bar&quot;, unitprice: 42 };\nvar message = &quot;Hello &quot; + customer.name + &quot;,\\n&quot; +\n&quot;want to buy &quot; + card.amount + &quot; &quot; + card.product + &quot; for\\n&quot; +\n&quot;a total of &quot; + (card.amount * card.unitprice) + &quot; bucks?&quot;;\n</code></pre><h3 id=\"自定义插值\"><a href=\"#自定义插值\" class=\"headerlink\" title=\"自定义插值\"></a>自定义插值</h3><blockquote>\n<p>灵活的表达插值</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>get`http://example.com/foo?bar=${bar + baz}&amp;quux=${quux}`\n</code></pre><p>ES 5</p>\n<pre><code>get([ &quot;http://example.com/foo?bar=&quot;, &quot;&amp;quux=&quot;, &quot;&quot; ],bar + baz, quux);\n</code></pre><h3 id=\"原生字符串访问\"><a href=\"#原生字符串访问\" class=\"headerlink\" title=\"原生字符串访问\"></a>原生字符串访问</h3><blockquote>\n<p>访问原生模版字符串内容（反斜杠不会被解释）</p>\n</blockquote>\n<pre><code>function quux (strings, ...values) {\n    strings[0] === &quot;foo\\n&quot;\n    strings[1] === &quot;bar&quot;\n    strings.raw[0] === &quot;foo\\\\n&quot;\n    strings.raw[1] === &quot;bar&quot;\n    values[0] === 42\n}\nquux `foo\\n${ 42 }bar`\n\nString.raw `foo\\n${ 42 }bar` === &quot;foo\\\\n42bar&quot;\n</code></pre><h2 id=\"扩展文字\"><a href=\"#扩展文字\" class=\"headerlink\" title=\"扩展文字\"></a>扩展文字</h2><h3 id=\"二进制和八进制\"><a href=\"#二进制和八进制\" class=\"headerlink\" title=\"二进制和八进制\"></a>二进制和八进制</h3><blockquote>\n<p>直接支持二进制和八进制内容</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>0b111110111 === 503\n0o767 === 503\n</code></pre><p>ES 5</p>\n<pre><code>parseInt(&quot;111110111&quot;, 2) === 503;\nparseInt(&quot;767&quot;, 8) === 503;\n0767 === 503; // only in non-strict, backward compatibility mode\n</code></pre><h3 id=\"unicode和正则表达式\"><a href=\"#unicode和正则表达式\" class=\"headerlink\" title=\"unicode和正则表达式\"></a>unicode和正则表达式</h3><blockquote>\n<p>扩展支持字符串使用unicode和正则表达式</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>&quot;𠮷&quot;.length === 2\n&quot;𠮷&quot;.match(/./u)[0].length === 2\n&quot;𠮷&quot; === &quot;\\uD842\\uDFB7&quot; \n&quot;𠮷&quot; === &quot;\\u{20BB7}&quot;\n&quot;𠮷&quot;.codePointAt(0) == 0x20BB7\nfor (let codepoint of &quot;𠮷&quot;) console.log(codepoint)\n</code></pre><p>ES 5 </p>\n<pre><code>&quot;𠮷&quot;.length === 2;\n&quot;𠮷&quot;.match(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000- \\uFFFF][\\uD800-\\uDBFF][\\uDC00-\\uDFFF][\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])(?:[^\\uD800-\\uDBFF]^)[\\uDC00-\\uDFFF])/)[0].length === 2;\n&quot;𠮷&quot; === &quot;\\uD842\\uDFB7&quot;;\n//  no equivalent in ES5\n//  no equivalent in ES5\n//  no equivalent in ES5\n</code></pre><h2 id=\"增强的正则表达式\"><a href=\"#增强的正则表达式\" class=\"headerlink\" title=\"增强的正则表达式\"></a>增强的正则表达式</h2><h3 id=\"正则表达式粘性匹配\"><a href=\"#正则表达式粘性匹配\" class=\"headerlink\" title=\"正则表达式粘性匹配\"></a>正则表达式粘性匹配</h3><blockquote>\n<p>保持匹配位置在匹配内容之间，支持任意长度字符串高效解析，即使有任意数量的不同正则表达式。</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>let parser = (input, match) =&gt; {\nfor (let pos = 0, lastPos = input.length; pos &lt; lastPos; ) {\n    for (let i = 0; i &lt; match.length; i++) {\n        match[i].pattern.lastIndex = pos\n        let found\n        if ((found = match[i].pattern.exec(input)) !== null) {\n            match[i].action(found)\n            pos = match[i].pattern.lastIndex\n            break\n        }\n    }\n  }\n}\n\nlet report = (match) =&gt; {\n    console.log(JSON.stringify(match))\n}\nparser(&quot;Foo 1 Bar 7 Baz 42&quot;, [\n    { pattern: /^Foo\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^Bar\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^Baz\\s+(\\d+)/y, action: (match) =&gt; report(match) },\n    { pattern: /^\\s*/y,         action: (match) =&gt; {}            }\n])\n</code></pre><p>ES 5</p>\n<pre><code>var parser = function (input, match) {\nfor (var i, found, inputTmp = input; inputTmp !== &quot;&quot;; ) {\n    for (i = 0; i &lt; match.length; i++) {\n        if ((found = match[i].pattern.exec(inputTmp)) !== null) {\n            match[i].action(found);\n            inputTmp = inputTmp.substr(found[0].length);\n            break;\n        }\n    }\n  }\n}\n\nvar report = function (match) {\n    console.log(JSON.stringify(match));\n};\nparser(&quot;Foo 1 Bar 7 Baz 42&quot;, [\n    { pattern: /^Foo\\s+(\\d+)/, action: function (match)    { report(match); } },\n    { pattern: /^Bar\\s+(\\d+)/, action: function (match) { report(match); } },\n    { pattern: /^Baz\\s+(\\d+)/, action: function (match) { report(match); } },\n    { pattern: /^\\s*/,         action: function (match) {}                 }\n]); \n</code></pre><h2 id=\"增强的对象属性\"><a href=\"#增强的对象属性\" class=\"headerlink\" title=\"增强的对象属性\"></a>增强的对象属性</h2><h3 id=\"属性速记\"><a href=\"#属性速记\" class=\"headerlink\" title=\"属性速记\"></a>属性速记</h3><blockquote>\n<p>更短的语法，用于公共对象属性定义</p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>obj = { x, y }\n</code></pre><p>ES 5</p>\n<pre><code>obj = { x: x, y: y };\n</code></pre><h3 id=\"计算属性名\"><a href=\"#计算属性名\" class=\"headerlink\" title=\"计算属性名\"></a>计算属性名</h3><blockquote>\n<p>计算属性定义支持计算命名 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>let obj = {\n    foo: &quot;bar&quot;,\n    [ &quot;baz&quot; + quux() ]: 42\n}\n</code></pre><p>ES 5</p>\n<pre><code>var obj = {\n    foo: &quot;bar&quot;\n};\nobj[ &quot;baz&quot; + quux() ] = 42;\n</code></pre><h3 id=\"方法属性\"><a href=\"#方法属性\" class=\"headerlink\" title=\"方法属性\"></a>方法属性</h3><blockquote>\n<p>对象属性定义支持方法符号 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>obj = {\n    foo (a, b) {\n        …\n    },\n    bar (x, y) {\n        …\n    },\n    *quux (x, y) {\n        …\n    }\n}\n</code></pre><p>ES 5 </p>\n<pre><code>obj = {\n    foo: function (a, b) {\n        …\n    },\n    bar: function (x, y) {\n        …\n    },\n    //  quux: no equivalent in ES5\n    …\n};\n</code></pre><h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><h3 id=\"数组匹配\"><a href=\"#数组匹配\" class=\"headerlink\" title=\"数组匹配\"></a>数组匹配</h3><blockquote>\n<p>直观且灵活的将数组解构为单个变量</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var list = [ 1, 2, 3 ]\nvar [ a, , b ] = list\n[ b, a ] = [ a, b ]\n</code></pre><p>ES 5 </p>\n<pre><code>var list = [ 1, 2, 3 ];\nvar a = list[0], b = list[2];\nvar tmp = a; a = b; b = tmp;\n</code></pre><h3 id=\"对象匹配，速记符号\"><a href=\"#对象匹配，速记符号\" class=\"headerlink\" title=\"对象匹配，速记符号\"></a>对象匹配，速记符号</h3><blockquote>\n<p>同上</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var { op, lhs, rhs } = getASTNode()\n</code></pre><p>ES 5 </p>\n<pre><code>var tmp = getASTNode();\nvar op  = tmp.op;\nvar lhs = tmp.lhs;\nvar rhs = tmp.rhs;\n</code></pre><h3 id=\"对象匹配-深匹配\"><a href=\"#对象匹配-深匹配\" class=\"headerlink\" title=\"对象匹配 深匹配\"></a>对象匹配 深匹配</h3><blockquote>\n<p>同上 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var { op: a, lhs: { op: b }, rhs: c } = getASTNode()\n</code></pre><p>ES 5 </p>\n<pre><code>var tmp = getASTNode();\nvar a = tmp.op;\nvar b = tmp.lhs.op;\nvar c = tmp.rhs;\n</code></pre><h3 id=\"对象数组匹配，默认值\"><a href=\"#对象数组匹配，默认值\" class=\"headerlink\" title=\"对象数组匹配，默认值\"></a>对象数组匹配，默认值</h3><blockquote>\n<p>为对象和数组解构简单直观的默认值</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var obj = { a: 1 }\nvar list = [ 1 ]\nvar { a, b = 2 } = obj\nvar [ x, y = 2 ] = list\n</code></pre><p>ES 5</p>\n<pre><code>var obj = { a: 1 };\nvar list = [ 1 ];\nvar a = obj.a;\nvar b = obj.b === undefined ? 2 : obj.b;\nvar x = list[0];\nvar y = list[1] === undefined ? 2 : list[1];\n</code></pre><h3 id=\"参数上下文匹配\"><a href=\"#参数上下文匹配\" class=\"headerlink\" title=\"参数上下文匹配\"></a>参数上下文匹配</h3><blockquote>\n<p>函数调用期间将数组和对象简单灵活的解构为独立参数</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>function f ([ name, val ]) {\n    console.log(name, val)\n}\nfunction g ({ name: n, val: v }) {\n    console.log(n, v)\n}\nfunction h ({ name, val }) {\n    console.log(name, val)\n}\nf([ &quot;bar&quot;, 42 ])\ng({ name: &quot;foo&quot;, val:  7 })\nh({ name: &quot;bar&quot;, val: 42 })\n</code></pre><p>ES 5</p>\n<pre><code>function f (arg) {\n    var name = arg[0];\n    var val  = arg[1];\n    console.log(name, val);\n};\nfunction g (arg) {\n    var n = arg.name;\n    var v = arg.val;\n    console.log(n, v);\n};\nfunction h (arg) {\n    var name = arg.name;\n    var val  = arg.val;\n    console.log(name, val);\n};\nf([ &quot;bar&quot;, 42 ]);\ng({ name: &quot;foo&quot;, val:  7 });\nh({ name: &quot;bar&quot;, val: 42 });\n</code></pre><h3 id=\"失败弱处理\"><a href=\"#失败弱处理\" class=\"headerlink\" title=\"失败弱处理\"></a>失败弱处理</h3><blockquote>\n<p>可选默认值 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var list = [ 7, 42 ]\nvar [ a = 1, b = 2, c = 3, d ] = list\na === 7\nb === 42\nc === 3\nd === undefined\n</code></pre><p>ES 5 </p>\n<pre><code>var list = [ 7, 42 ];\nvar a = typeof list[0] !== &quot;undefined&quot; ? list[0] : 1;\nvar b = typeof list[1] !== &quot;undefined&quot; ? list[1] : 2;\nvar c = typeof list[2] !== &quot;undefined&quot; ? list[2] : 3;\nvar d = typeof list[3] !== &quot;undefined&quot; ? list[3] : undefined;\na === 7;\nb === 42;\nc === 3;\nd === undefined;\n</code></pre><h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><h3 id=\"值导出导入\"><a href=\"#值导出导入\" class=\"headerlink\" title=\"值导出导入\"></a>值导出导入</h3><blockquote>\n<p>支持没有全局变量污染的模块导入导出 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>//  lib/math.js\nexport function sum (x, y) { return x + y }\nexport var pi = 3.141593\n\n//  someApp.js\nimport * as math from &quot;lib/math&quot;\nconsole.log(&quot;2π = &quot; + math.sum(math.pi, math.pi))\n\n//  otherApp.js\nimport { sum, pi } from &quot;lib/math&quot;\nconsole.log(&quot;2π = &quot; + sum(pi, pi)) \n</code></pre><p>ES 5 </p>\n<pre><code>//  lib/math.js\nLibMath = {};\nLibMath.sum = function (x, y) { return x + y };\nLibMath.pi = 3.141593;\n\n//  someApp.js\nvar math = LibMath;\nconsole.log(&quot;2π = &quot; + math.sum(math.pi, math.pi));\n\n//  otherApp.js\nvar sum = LibMath.sum, pi = LibMath.pi;\nconsole.log(&quot;2π = &quot; + sum(pi, pi));\n</code></pre><h3 id=\"默认值和通配符\"><a href=\"#默认值和通配符\" class=\"headerlink\" title=\"默认值和通配符\"></a>默认值和通配符</h3><blockquote>\n<p>使值成为默认导出值，混合值 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>//  lib/mathplusplus.js\nexport * from &quot;lib/math&quot;\nexport var e = 2.71828182846\nexport default (x) =&gt; Math.exp(x)\n\n//  someApp.js\nimport exp, { pi, e } from &quot;lib/mathplusplus&quot;\nconsole.log(&quot;e^{π} = &quot; + exp(pi))\n</code></pre><p>ES 5 </p>\n<pre><code>//  lib/mathplusplus.js\nLibMathPP = {};\nfor (symbol in LibMath)\n   if (LibMath.hasOwnProperty(symbol))\n       LibMathPP[symbol] = LibMath[symbol];\nLibMathPP.e = 2.71828182846;\nLibMathPP.exp = function (x) { return Math.exp(x) };\n\n//  someApp.js\nvar exp = LibMathPP.exp, pi = LibMathPP.pi, e = LibMathPP.e;\nconsole.log(&quot;e^{π} = &quot; + exp(pi));\n</code></pre><h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"类-定义\"><a href=\"#类-定义\" class=\"headerlink\" title=\"类 定义\"></a>类 定义</h3><blockquote>\n<p>更加直观,OOP式和无需样板的类 </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>class Shape {\n    constructor (id, x, y) {\n        this.id = id\n        this.move(x, y)\n    }\n    move (x, y) {\n        this.x = x\n        this.y = y\n    }\n}\n</code></pre><p>ES 5 </p>\n<pre><code>var Shape = function (id, x, y) {\n    this.id = id;\n    this.move(x, y);\n};\nShape.prototype.move = function (x, y) {\n   this.x = x;\n   this.y = y;\n};\n</code></pre><h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><blockquote>\n<p>同上 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Rectangle extends Shape {\n    constructor (id, x, y, width, height) {\n        super(id, x, y)\n        this.width  = width\n        this.height = height\n    }\n}\nclass Circle extends Shape {\n    constructor (id, x, y, radius) {\n        super(id, x, y)\n        this.radius = radius\n    }\n}\n</code></pre><p>ES 5</p>\n<pre><code>var Rectangle = function (id, x, y, width, height) {\n    Shape.call(this, id, x, y);\n    this.width  = width;\n    this.height = height;\n};\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\nvar Circle = function (id, x, y, radius) {\n    Shape.call(this, id, x, y);\n    this.radius = radius;\n};\nCircle.prototype = Object.create(Shape.prototype);\nCircle.prototype.constructor = Circle;  \n</code></pre><h3 id=\"从表达式继承类\"><a href=\"#从表达式继承类\" class=\"headerlink\" title=\"从表达式继承类\"></a>从表达式继承类</h3><blockquote>\n<p>支持通过扩展表达式函数的 mixin-style 插值</p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>var aggregation = (baseClass, ...mixins) =&gt; {\nlet base = class _Combined extends baseClass {\n    constructor (...args) {\n        super(...args)\n        mixins.forEach((mixin) =&gt; {\n            mixin.prototype.initializer.call(this)\n        })\n    }\n}\nlet copyProps = (target, source) =&gt; {\n    Object.getOwnPropertyNames(source)\n        .concat(Object.getOwnPropertySymbols(source))\n        .forEach((prop) =&gt; {\n        if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n            return\n        Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n    })\n}\nmixins.forEach((mixin) =&gt; {\n        copyProps(base.prototype, mixin.prototype)\n        copyProps(base, mixin)\n    })\n    return base\n}\n\nclass Colored {\n    initializer ()     { this._color = &quot;white&quot; }\n    get color ()       { return this._color }\n    set color (v)      { this._color = v }\n}\n\nclass ZCoord {\n    initializer ()     { this._z = 0 }\n    get z ()           { return this._z }\n    set z (v)          { this._z = v }\n}\n\nclass Shape {\n    constructor (x, y) { this._x = x; this._y = y }\n    get x ()           { return this._x }\n    set x (v)          { this._x = v }\n    get y ()           { return this._y }\n    set y (v)          { this._y = v }\n}\n\nclass Rectangle extends aggregation(Shape, Colored, ZCoord) {}\n\nvar rect = new Rectangle(7, 42)\nrect.z     = 1000\nrect.color = &quot;red&quot;\nconsole.log(rect.x, rect.y, rect.z, rect.color) \n</code></pre><p>ES 5</p>\n<pre><code>var aggregation = function (baseClass, mixins) {\nvar base = function () {\n    baseClass.apply(this, arguments);\n    mixins.forEach(function (mixin) {\n        mixin.prototype.initializer.call(this);\n    }.bind(this));\n};\nbase.prototype = Object.create(baseClass.prototype);\nbase.prototype.constructor = base;\nvar copyProps = function (target, source) {\n    Object.getOwnPropertyNames(source).forEach(function (prop) {\n        if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/))\n            return\n        Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop))\n    })\n}\nmixins.forEach(function (mixin) {\n        copyProps(base.prototype, mixin.prototype);\n        copyProps(base, mixin);\n    });\n    return base;\n};\n\nvar Colored = function () {};\nColored.prototype = {\n    initializer: function ()  { this._color = &quot;white&quot;; },\n    getColor:    function ()  { return this._color; },\n    setColor:    function (v) { this._color = v; }\n};\n\nvar ZCoord = function () {};\nZCoord.prototype = {\n    initializer: function ()  { this._z = 0; },\n    getZ:        function ()  { return this._z; },\n    setZ:        function (v) { this._z = v; }\n};\n\nvar Shape = function (x, y) {\n    this._x = x; this._y = y;\n};\nShape.prototype = {\n    getX: function ()  { return this._x; },\n    setX: function (v) { this._x = v; },\n    getY: function ()  { return this._y; },\n    setY: function (v) { this._y = v; }\n}\n\nvar _Combined = aggregation(Shape, [ Colored, ZCoord ]);\nvar Rectangle = function (x, y) {\n    _Combined.call(this, x, y);\n};\nRectangle.prototype = Object.create(_Combined.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle(7, 42);\nrect.setZ(1000);\nrect.setColor(&quot;red&quot;);\nconsole.log(rect.getX(), rect.getY(), rect.getZ(), rect.getColor());\n</code></pre><h3 id=\"基本的类访问\"><a href=\"#基本的类访问\" class=\"headerlink\" title=\"基本的类访问\"></a>基本的类访问</h3><blockquote>\n<p>类构造器和方法的简单访问 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Shape {\n    …\n    toString () {\n         return `Shape(${this.id})`\n    }\n}\nclass Rectangle extends Shape {\n    constructor (id, x, y, width, height) {\n        super(id, x, y)\n        …\n    } \n    toString () {\n        return &quot;Rectangle &gt; &quot; + super.toString()\n    }\n}\nclass Circle extends Shape {\n    constructor (id, x, y, radius) {\n        super(id, x, y)\n        …\n    }\n    toString () {\n        return &quot;Circle &gt; &quot; + super.toString()\n    }\n</code></pre><p> ES 5</p>\n<pre><code>var Shape = function (id, x, y) {\n    …\n};\nShape.prototype.toString = function (x, y) {\n    return &quot;Shape(&quot; + this.id + &quot;)&quot;\n};\nvar Rectangle = function (id, x, y, width, height) {\n    Shape.call(this, id, x, y);\n    …\n};\nRectangle.prototype.toString = function () {\n    return &quot;Rectangle &gt; &quot; + Shape.prototype.toString.call(this);\n};\nvar Circle = function (id, x, y, radius) {\n    Shape.call(this, id, x, y);\n    …\n};\nCircle.prototype.toString = function () {\n    return &quot;Circle &gt; &quot; + Shape.prototype.toString.call(this);\n};\n</code></pre><h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><blockquote>\n<p>简单支持静态类成员 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>class Rectangle extends Shape {\n    …\n    static defaultRectangle () {\n        return new Rectangle(&quot;default&quot;, 0, 0, 100, 100)\n    }\n}\nclass Circle extends Shape {\n        …\n     static defaultCircle () {\n        return new Circle(&quot;default&quot;, 0, 0, 100)\n     }\n}\nvar defRectangle = Rectangle.defaultRectangle()\nvar defCircle    = Circle.defaultCircle()\n</code></pre><p>ES 5 </p>\n<pre><code>var Rectangle = function (id, x, y, width, height) {\n    …\n};\nRectangle.defaultRectangle = function () {\n    return new Rectangle(&quot;default&quot;, 0, 0, 100, 100);\n};\nvar Circle = function (id, x, y, width, height) {\n    …\n};\nCircle.defaultCircle = function () {\n    return new Circle(&quot;default&quot;, 0, 0, 100);\n};\nvar defRectangle = Rectangle.defaultRectangle();\nvar defCircle    = Circle.defaultCircle();\n</code></pre><h3 id=\"Getter-Seeter\"><a href=\"#Getter-Seeter\" class=\"headerlink\" title=\"Getter/Seeter\"></a>Getter/Seeter</h3><blockquote>\n<p>类也可以使用Getter/Setter </p>\n</blockquote>\n<p>ES 6</p>\n<pre><code>class Rectangle {\n    constructor (width, height) {\n        this._width  = width\n        this._height = height\n    }\n    set width  (width)  { this._width = width               }\n    get width  ()       { return this._width                }\n    set height (height) { this._height = height             }\n    get height ()       { return this._height               }\n    get area   ()       { return this._width * this._height }\n}\nvar r = new Rectangle(50, 20)\nr.area === 1000\n</code></pre><p>ES 5 </p>\n<pre><code>var Rectangle = function (width, height) {\n    this._width  = width;\n    this._height = height;\n};\nRectangle.prototype = {\n    set width  (width)  { this._width = width;               },\n    get width  ()       { return this._width;                },\n    set height (height) { this._height = height;             },\n    get height ()       { return this._height;               },\n    get area   ()       { return this._width * this._height; }\n};\nvar r = new Rectangle(50, 20);\nr.area === 1000;\n</code></pre><h2 id=\"标记类型\"><a href=\"#标记类型\" class=\"headerlink\" title=\"标记类型\"></a>标记类型</h2><h3 id=\"标记类型-1\"><a href=\"#标记类型-1\" class=\"headerlink\" title=\"标记类型\"></a>标记类型</h3><blockquote>\n<p>为对象属性识别使用独一无二的数据类型。标记有可选的描述，但是只适用于调试。 </p>\n</blockquote>\n<pre><code>Symbol(&quot;foo&quot;) !== Symbol(&quot;foo&quot;)\nconst foo = Symbol()\nconst bar = Symbol()\ntypeof foo === &quot;symbol&quot;\ntypeof bar === &quot;symbol&quot;\nlet obj = {}\nobj[foo] = &quot;foo&quot;\nobj[bar] = &quot;bar&quot;\nJSON.stringify(obj) // {}\nObject.keys(obj) // []\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n</code></pre><h3 id=\"全局标记\"><a href=\"#全局标记\" class=\"headerlink\" title=\"全局标记\"></a>全局标记</h3><blockquote>\n<p>通过唯一的键索引 </p>\n</blockquote>\n<pre><code>Symbol.for(&quot;app.foo&quot;) === Symbol.for(&quot;app.foo&quot;)\nconst foo = Symbol.for(&quot;app.foo&quot;)\nconst bar = Symbol.for(&quot;app.bar&quot;)\nSymbol.keyFor(foo) === &quot;app.foo&quot;\nSymbol.keyFor(bar) === &quot;app.bar&quot;\ntypeof foo === &quot;symbol&quot;\ntypeof bar === &quot;symbol&quot;\nlet obj = {}\nobj[foo] = &quot;foo&quot;\nobj[bar] = &quot;bar&quot;\nJSON.stringify(obj) // {}\nObject.keys(obj) // []\nObject.getOwnPropertyNames(obj) // []\nObject.getOwnPropertySymbols(obj) // [ foo, bar ]\n</code></pre><h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"迭代器和-For-Of-操作\"><a href=\"#迭代器和-For-Of-操作\" class=\"headerlink\" title=\"迭代器和 For-Of 操作\"></a>迭代器和 For-Of 操作</h3><blockquote>\n<p>支持迭代协议允许对象定义自己的迭代行为。另外，支持迭代器协议生成值的序列（无论有限还是无限）。最后提供方便的迭代方式迭代可迭代对象。 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>let fibonacci = {\n[Symbol.iterator]() {\n    let pre = 0, cur = 1\n    return {\n       next () {\n           [ pre, cur ] = [ cur, pre + cur ]\n           return { done: false, value: cur }\n           }\n        }\n       }\n}\n\nfor (let n of fibonacci) {\n    if (n &gt; 1000)\n        break\n    console.log(n)\n} \n</code></pre><p>ES 5</p>\n<pre><code>var fibonacci = {\nnext: (function () {\n    var pre = 0, cur = 1;\n    return function () {\n        tmp = pre;\n        pre = cur;\n        cur += tmp;\n        return cur;\n        };\n       })()\n};\n\nvar n;\nfor (;;) {\n       n = fibonacci.next();\n    if (n &gt; 1000)\n       break;\n    console.log(n);\n} \n</code></pre><h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><h3 id=\"Promises-使用\"><a href=\"#Promises-使用\" class=\"headerlink\" title=\"Promises 使用\"></a>Promises 使用</h3><p>ES 6 </p>\n<pre><code>function msgAfterTimeout (msg, who, timeout) {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; resolve(`${msg} Hello ${who}!`), timeout)\n    })\n}\n msgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100).then((msg) =&gt;\n        msgAfterTimeout(msg, &quot;Bar&quot;, 200)\n).then((msg) =&gt; {\n    console.log(`done after 300ms:${msg}`)\n}) \n</code></pre><p>ES 5</p>\n<pre><code>function msgAfterTimeout (msg, who, timeout, onDone) {\n    setTimeout(function () {\n         onDone(msg + &quot; Hello &quot; + who + &quot;!&quot;);\n    }, timeout);\n}\nmsgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100, function (msg) {\n    msgAfterTimeout(msg, &quot;Bar&quot;, 200, function (msg) {\n        console.log(&quot;done after 300ms:&quot; + msg);\n    });\n});\n</code></pre><h3 id=\"Promises-合并\"><a href=\"#Promises-合并\" class=\"headerlink\" title=\"Promises 合并\"></a>Promises 合并</h3><blockquote>\n<p>合并一个或者多个Promises不用担心异步问题。 </p>\n</blockquote>\n<p>ES 6 </p>\n<pre><code>function fetchAsync (url, timeout, onData, onError) {\n    …\n} \nlet fetchPromised = (url, timeout) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        fetchAsync(url, timeout, resolve, reject)\n    })\n}\nPromise.all([\n    fetchPromised(&quot;http://backend/foo.txt&quot;, 500),\n    fetchPromised(&quot;http://backend/bar.txt&quot;, 500),\n    fetchPromised(&quot;http://backend/baz.txt&quot;, 500)\n]).then((data) =&gt; {\n    let [ foo, bar, baz ] = data\n    console.log(`success: foo=${foo} bar=${bar} baz=${baz}`)\n}, (err) =&gt; {\n    console.log(`error: ${err}`)\n})\n</code></pre><p>ES 5</p>\n<pre><code>function fetchAsync (url, timeout, onData, onError) {\n    …\n }\nfunction fetchAll (request, onData, onError) {\nvar result = [], results = 0;\nfor (var i = 0; i &lt; request.length; i++) {\n    result[i] = null;\n    (function (i) {\n            fetchAsync(request[i].url, request[i].timeout, function (data) {\n                result[i] = data;\n                if (++results === request.length)\n                    onData(result);\n            }, onError);\n        })(i);\n    }\n}\nfetchAll([\n{ url: &quot;http://backend/foo.txt&quot;, timeout: 500 },\n{ url: &quot;http://backend/bar.txt&quot;, timeout: 500 },\n{ url: &quot;http://backend/baz.txt&quot;, timeout: 500 }\n], function (data) {\nvar foo = data[0], bar = data[1], baz = data[2];\nconsole.log(&quot;success: foo=&quot; + foo + &quot; bar=&quot; + bar + &quot; baz=&quot; + baz);\n}, function (err) {\n    console.log(&quot;error: &quot; + err);\n});\n</code></pre>"},{"title":"什么是科学","date":"2018-01-06T02:26:25.000Z","_content":"\n这是一篇1966年纽约举办的国际科学教师协会15周年大会上的演讲。在我看来，这边文章更多是阐述要批判的对待科学，虽然发表距今已经有五十多年，科学一直在不断进步。但是敢于挑战权威的核心思想却丝毫没有过时，并且我认为这种思维应该伴随科学的发展保留下去。科学不会教给我们什么，那些复杂难懂的定义毫无意义，只有经验才能告诉你一切。不仅是纯粹的科学，任何需要通过继承而发展的东西不都是如此吗？\n\n[原文章地址](http://www.fotuva.org/feynman/what_is_science.html)\n\n\n### What is Science?\n\nPresented at the fifteenth annual meeting of the National Science Teachers Association, 1966 in New York City, and reprinted from The Physics Teacher Vol. 7, issue 6, 1969, pp. 313-320 by permission of the editor and the author. [Words and symbols in brackets added by Ralph Leighton.]\n\nI thank Mr. DeRose for the opportunity to join you science teachers. I also am a science teacher. I have much experience only in teaching graduate students in physics, and as a result of the experience I know that I don't know how to teach.\n\nI am sure that you who are real teachers working at the bottom level of this hierarchy of teachers, instructors of teachers, experts on curricula, also are sure that you, too, don't know how to do it; otherwise you wouldn't bother to come to the convention.\n\nThe subject \"What Is Science\" is not my choice. It was Mr. DeRose's subject. But I would like to say that I think that \"what is science\" is not at all equivalent to \"how to teach science,\" and I must call that to your attention for two reasons. In the first place, from the way that I am preparing to give this lecture, it may seem that I am trying to tell you how to teach science--I am not at all in any way, because I don't know anything about small children. I have one, so I know that I don't know. The other is I think that most of you (because there is so much talk and so many papers and so many experts in the field) have some kind of a feeling of lack of self-confidence. In some way you are always being lectured on how things are not going too well and how you should learn to teach better. I am not going to berate you for the bad work you are doing and indicate how it can definitely be improved; that is not my intention.\n\nAs a matter of fact, we have very good students coming into Caltech, and during the years we found them getting better and better. Now how it is done, I don't know. I wonder if you know. I don't want to interfere with the system; it is very good.\n\nOnly two days ago we had a conference in which we decided that we don't have to teach a course in elementary quantum mechanics in the graduate school any more. When I was a student, they didn't even have a course in quantum mechanics in the graduate school; it was considered too difficult a subject. When I first started to teach, we had one. Now we teach it to undergraduates. We discover now that we don't have to have elementary quantum mechanics for graduates from other schools. Why is it getting pushed down? Because we are able to teach better in the university, and that is because the students coming up are better trained.\n\nWhat is science? Of course you all must know, if you teach it. That's common sense. What can I say? If you don't know, every teacher's edition of every textbook gives a complete discussion of the subject. There is some kind of distorted distillation and watered-down and mixed-up words of Francis Bacon from some centuries ago, words which then were supposed to be the deep philosophy of science. But one of the greatest experimental scientists of the time who was really doing something, William Harvey, said that what Bacon said science was, was the science that a lord-chancellor would do. He [Bacon] spoke of making observations, but omitted the vital factor of judgment about what to observe and what to pay attention to.\n\nAnd so what science is, is not what the philosophers have said it is, and certainly not what the teacher editions say it is. What it is, is a problem which I set for myself after I said I would give this talk.\n\nAfter some time, I was reminded of a little poem:\n\nA centipede was happy quite, until a toad in fun \nSaid, \"Pray, which leg comes after which?\" \nThis raised his doubts to such a pitch \nHe fell distracted in the ditch \nNot knowing how to run.\n\nAll my life, I have been doing science and known what it was, but what I have come to tell you--which foot comes after which--I am unable to do, and furthermore, I am worried by the analogy in the poem that when I go home I will no longer be able to do any research.\n\nThere have been a lot of attempts by the various press reporters to get some kind of a capsule of this talk; I prepared it only a little time ago, so it was impossible; but I can see them all rushing out now to write some sort of headline which says: \"The Professor called the President of NSTA a toad.\"\n\nUnder these circumstances of the difficulty of the subject, and my dislike of philosophical exposition, I will present it in a very unusual way. I am just going to tell you how I learned what science is.\n\nThat's a little bit childish. I learned it as a child. I have had it in my blood from the beginning. And I would like to tell you how it got in. This sounds as though I am trying to tell you how to teach, but that is not my intention. I'm going to tell you what science is like by how I learned what science is like.\n\nMy father did it to me. When my mother was carrying me, it is reported--I am not directly aware of the conversation--my father said that \"if it's a boy, he'll be a scientist.\" How did he do it? He never told me I should be a scientist. He was not a scientist; he was a businessman, a sales manager of a uniform company, but he read about science and loved it.\n\nWhen I was very young--the earliest story I know--when I still ate in a high chair, my father would play a game with me after dinner.\n\nHe had brought a whole lot of old rectangular bathroom floor tiles from some place in Long Island City. We sat them up on end, one next to the other, and I was allowed to push the end one and watch the whole thing go down. So far, so good.\n\nNext, the game improved. The tiles were different colors. I must put one white, two blues, one white, two blues, and another white and then two blues--I may want to put another blue, but it must be a white. You recognize already the usual insidious cleverness; first delight him in play, and then slowly inject material of educational value.\n\nWell, my mother, who is a much more feeling woman, began to realize the insidiousness of his efforts and said, \"Mel, please let the poor child put a blue tile if he wants to.\" My father said, \"No, I want him to pay attention to patterns. It is the only thing I can do that is mathematics at this earliest level.\" If I were giving a talk on \"what is mathematics,\" I would already have answered you. Mathematics is looking for patterns. (The fact is that this education had some effect. We had a direct experimental test, at the time I got to kindergarten. We had weaving in those days. They've taken it out; it's too difficult for children. We used to weave colored paper through vertical strips and make patterns. The kindergarten teacher was so amazed that she sent a special letter home to report that this child was very unusual, because he seemed to be able to figure out ahead of time what pattern he was going to get, and made amazingly intricate patterns. So the tile game did do something to me.)\n\nI would like to report other evidence that mathematics is only patterns. When I was at Cornell, I was rather fascinated by the student body, which seems to me was a dilute mixture of some sensible people in a big mass of dumb people studying home economics, etc. including lots of girls. I used to sit in the cafeteria with the students and eat and try to overhear their conversations and see if there was one intelligent word coming out. You can imagine my surprise when I discovered a tremendous thing, it seemed to me.\n\nI listened to a conversation between two girls, and one was explaining that if you want to make a straight line, you see, you go over a certain number to the right for each row you go up--that is, if you go over each time the same amount when you go up a row, you make a straight line--a deep principle of analytic geometry! It went on. I was rather amazed. I didn't realize the female mind was capable of understanding analytic geometry.\n\nShe went on and said, \"Suppose you have another line coming in from the other side, and you want to figure out where they are going to intersect. Suppose on one line you go over two to the right for every one you go up, and the other line goes over three to the right for every one that it goes up, and they start twenty steps apart,\" etc.--I was flabbergasted. She figured out where the intersection was. It turned out that one girl was explaining to the other how to knit argyle socks. I, therefore, did learn a lesson: The female mind is capable of understanding analytic geometry. Those people who have for years been insisting (in the face of all obvious evidence to the contrary) that the male and female are equally capable of rational thought may have something. The difficulty may just be that we have never yet discovered a way to communicate with the female mind. If it is done in the right way, you may be able to get something out of it.\n\nNow I will go on with my own experience as a youngster in mathematics. Another thing that my father told me--and I can't quite explain it, because it was more an emotion than a telling--was that the ratio of the circumference to the diameter of all circles was always the same, no matter what the size. That didn't seem to me too unobvious, but the ratio had some marvelous property. That was a wonderful number, a deep number, pi. There was a mystery about this number that I didn't quite understand as a youth, but this was a great thing, and the result was that I looked for pi everywhere.\n\nWhen I was learning later in school how to make the decimals for fractions, and how to make 3 1/8, 1 wrote 3.125 and, thinking I recognized a friend, wrote that it equals pi, the ratio of circumference to diameter of a circle. The teacher corrected it to 3.1416.\n\nI illustrate these things to show an influence. The idea that there is a mystery, that there is a wonder about the number was important to me--not what the number was. Very much later, when I was doing experiments in the laboratory--I mean my own home laboratory, fiddling around--no, excuse me, I didn't do experiments, I never did; I just fiddled around. Gradually, through books and manuals, I began to discover there were formulas applicable to electricity in relating the current and resistance, and so on. One day, looking at the formulas in some book or other, I discovered a formula for the frequency of a resonant circuit, which was f = 1/2 pi LC, where L is the inductance and C the capacitance of the... circle? You laugh, but I was very serious then. Pi was a thing with circles, and here is pi coming out of an electric circuit. Where was the circle? Do those of you who laughed know how that comes about?\n\nI have to love the thing. I have to look for it. I have to think about it. And then I realized, of course, that the coils are made in circles. About a half year later, I found another book which gave the inductance of round coils and square coils, and there were other pi's in those formulas. I began to think about it again, and I realized that the pi did not come from the circular coils. I understand it better now; but in my heart I still don't know where that circle is, where that pi comes from.\n\nWhen I was still pretty young--I don't know how old exactly--I had a ball in a wagon I was pulling, and I noticed something, so I ran up to my father to say that \"When I pull the wagon, the ball runs to the back, and when I am running with the wagon and stop, the ball runs to the front. Why?\n\nHow would you answer?\n\nHe said, \"That, nobody knows.\" He said, \"It's very general, though, it happens all the time to anything; anything that is moving tends to keep moving; anything standing still tries to maintain that condition. If you look close you will see the ball does not run to the back of the wagon where you start from standing still. It moves forward a bit too, but not as fast as the wagon. The back of the wagon catches up with the ball, which has trouble getting started moving. It's called inertia, that principle.\" I did run back to check, and sure enough, the ball didn't go backwards. He put the difference between what we know and what we call it very distinctly.\n\nRegarding this business about names and words, I would tell you another story. We used to go up to the Catskill Mountains for vacations. In New York, you go the Catskill Mountains for vacations. The poor husbands had to go to work during the week, but they would come rushing out for weekends and stay with their families. On the weekends, my father would take me for walks in the woods. He often took me for walks, and we learned all about nature, and so on, in the process. But the other children, friends of mine also wanted to go, and tried to get my father to take them. He didn't want to, because he said I was more advanced. I'm not trying to tell you how to teach, because what my father was doing was with a class of just one student; if he had a class of more than one, he was incapable of doing it.\n\nSo we went alone for our walk in the woods. But mothers were very powerful in those day's as they are now, and they convinced the other fathers that they had to take their own sons out for walks in the woods. So all fathers took all sons out for walks in the woods one Sunday afternoon. The next day, Monday, we were playing in the fields and this boy said to me, \"See that bird standing on the stump there? What's the name of it?\"\n\nI said, \"I haven't got the slightest idea.\"\n\nHe said, \"It’s a brown-throated thrush. Your father doesn't teach you much about science.\"\n\nI smiled to myself, because my father had already taught me that [the name] doesn't tell me anything about the bird. He taught me \"See that bird? It's a brown-throated thrush, but in Germany it's called a halsenflugel, and in Chinese they call it a chung ling and even if you know all those names for it, you still know nothing about the bird--you only know something about people; what they call that bird. Now that thrush sings, and teaches its young to fly, and flies so many miles away during the summer across the country, and nobody knows how it finds its way,\" and so forth. There is a difference between the name of the thing and what goes on.\n\nThe result of this is that I cannot remember anybody's name, and when people discuss physics with me they often are exasperated when they say \"the Fitz-Cronin effect,\" and I ask \"What is the effect?\" and I can't remember the name.\n\nI would like to say a word or two--may I interrupt my little tale--about words and definitions, because it is necessary to learn the words.\n\nIt is not science. That doesn't mean, just because it is not science, that we don't have to teach the words. We are not talking about what to teach; we are talking about what science is. It is not science to know how to change Centigrade to Fahrenheit. It's necessary, but it is not exactly science. In the same sense, if you were discussing what art is, you wouldn't say art is the knowledge of the fact that a 3-B pencil is softer than a 2-H pencil. It's a distinct difference. That doesn't mean an art teacher shouldn't teach that, or that an artist gets along very well if he doesn't know that. (Actually, you can find out in a minute by trying it; but that's a scientific way that art teachers may not think of explaining.)\n\nIn order to talk to each other, we have to have words, and that's all right. It's a good idea to try to see the difference, and it's a good idea to know when we are teaching the tools of science, such as words, and when we are teaching science itself.\n\nTo make my point still clearer, I shall pick out a certain science book to criticize unfavorably, which is unfair, because I am sure that with little ingenuity, I can find equally unfavorable things to say about others. There is a first grade science book which, in the first lesson of the first grade, begins in an unfortunate manner to teach science, because it starts off an the wrong idea of what science is. There is a picture of a dog--a windable toy dog--and a hand comes to the winder, and then the dog is able to move. Under the last picture, it says \"What makes it move?\" Later on, there is a picture of a real dog and the question, \"What makes it move?\" Then there is a picture of a motorbike and the question, \"What makes it move?\" and so on.\n\nI thought at first they were getting ready to tell what science was going to be about--physics, biology, chemistry--but that wasn't it. The answer was in the teacher's edition of the book: the answer I was trying to learn is that \"energy makes it move.\"\n\nNow, energy is a very subtle concept. It is very, very difficult to get right. What I meant is that it is not easy to understand energy well enough to use it right, so that you can deduce something correctly using the energy idea--it is beyond the first grade. It would be equally well to say that \"God makes it move,\" or \"spirit makes it move,\" or \"movability makes it move.\" (In fact, one could equally well say \"energy makes it stop.\")\n\nLook at it this way: that’s only the definition of energy; it should be reversed. We might say when something can move that it has energy in it, but not what makes it move is energy. This is a very subtle difference. It's the same with this inertia proposition.\n\nPerhaps I can make the difference a little clearer this way: If you ask a child what makes the toy dog move, you should think about what an ordinary human being would answer. The answer is that you wound up the spring; it tries to unwind and pushes the gear around.\n\nWhat a good way to begin a science course! Take apart the toy; see how it works. See the cleverness of the gears; see the ratchets. Learn something about the toy, the way the toy is put together, the ingenuity of people devising the ratchets and other things. That's good. The question is fine. The answer is a little unfortunate, because what they were trying to do is teach a definition of what is energy. But nothing whatever is learned.\n\nSuppose a student would say, \"I don't think energy makes it move.\" Where does the discussion go from there?\n\nI finally figured out a way to test whether you have taught an idea or you have only taught a definition.\n\nTest it this way: you say, \"Without using the new word which you have just learned, try to rephrase what you have just learned in your own language.\" Without using the word \"energy,\" tell me what you know now about the dog's motion.\" You cannot. So you learned nothing about science. That may be all right. You may not want to learn something about science right away. You have to learn definitions. But for the very first lesson, is that not possibly destructive?\n\nI think for lesson number one, to learn a mystic formula for answering questions is very bad. The book has some others: \"gravity makes it fall;\" \"the soles of your shoes wear out because of friction.\" Shoe leather wears out because it rubs against the sidewalk and the little notches and bumps on the sidewalk grab pieces and pull them off. To simply say it is because of friction, is sad, because it's not science.\n\nMy father dealt a little bit with energy and used the term after I got a little bit of the idea about it. What he would have done I know, because he did in fact essentially the same thing--though not the same example of the toy dog. He would say, \"It moves because the sun is shining,\" if he wanted to give the same lesson.\n\nI would say, \"No. What has that to do with the sun shining? It moved because I wound up the springs.\"\n\n\"And why, my friend, are you able to move to wind up the spring?\"\n\n\"I eat.\"\n\n\"What, my friend, do you eat?\"\n\n\"I eat plants.\"\n\n\"And how do they grow?\"\n\n\"They grow because the sun is shining.\"\n\nAnd it is the same with the [real] dog.\n\nWhat about gasoline? Accumulated energy of the sun, which is captured by plants and preserved in the ground. Other examples all end with the sun. And so the same idea about the world that our textbook is driving at is phrased in a very exciting way.\n\nAll the things that we see that are moving, are moving because the sun is shining. It does explain the relationship of one source of energy to another, and it can be denied by the child. He could say, \"I don't think it is on account of the sun shining,\" and you can start a discussion. So there is a difference. (Later I could challenge him with the tides, and what makes the earth turn, and have my hand on mystery again.)\n\nThat is just an example of the difference between definitions (which are necessary) and science. The only objection in this particular case was that it was the first lesson. It must certainly come in later, telling you what energy is, but not to such a simple question as \"What makes a [toy] dog move?\" A child should be given a child's answer. \"Open it up; let's look at it.\"\n\nDuring those walks in the woods, I learned a great deal. In the case of birds, for example, I already mentioned migration, but I will give you another example of birds in the woods. Instead of naming them, my father would say, \"Look, notice that the bird is always pecking in its feathers. It pecks a lot in its feathers. Why do you think it pecks the feathers?\"\n\nI guessed it's because the feathers are ruffled, and he's trying to straighten them out. He said, \"Okay, when would the feathers get ruffled, or how would they get ruffled?\"\n\n\"When he flies. When he walks around, it's okay; but when he flies it ruffles the feathers.\"\n\nThen he would say, \"You would guess then when the bird just landed he would have to peck more at his feathers than after he has straightened them out and has just been walking around the ground for a while. Okay, let's look.\"\n\nSo we would look, and we would watch, and it turned out, as far as I could make out, that the bird pecked about as much and as often no matter how long he was walking an the ground and not just directly after flight.\n\nSo my guess was wrong, and I couldn't guess the right reason. My father revealed the reason.\n\nIt is that the birds have lice. There is a little flake that comes off the feather, my father taught me, stuff that can be eaten, and the louse eats it. And then an the loose, there is a little bit of wax in the joints between the sections of the leg that oases out, and there is a mite that lives in there that can eat that wax. Now the mite has such a good source of food that it doesn't digest it too well, so from the rear end there comes a liquid that has too much sugar, and in that sugar lives a tiny creature, etc.\n\nThe facts are not correct; the spirit is correct. First, I learned about parasitism, one on the other, on the other, on the other. Second, he went on to say that in the world whenever there is any source of something that could be eaten to make life go, some form of life finds a way to make use of that source; and that each little bit of left over stuff is eaten by something.\n\nNow the point of this is that the result of observation, even if I were unable to come to the ultimate conclusion, was a wonderful piece of gold, with marvelous results. It was something marvelous.\n\nSuppose I were told to observe, to make a list, to write down, to do this, to look, and when I wrote my list down, it was filed with 130 other lists in the back of a notebook. I would learn that the result of observation is relatively dull, that nothing much comes of it.\n\nI think it is very important--at least it was to me--that if you are going to teach people to make observations, you should show that something wonderful can come from them. I learned then what science was about: it was patience. If you looked, and you watched, and you paid attention, you got a great reward from it--although possibly not every time. As a result, when I became a more mature man, I would painstakingly, hour after hour, for years, work on problems--sometimes many years, sometimes shorter times; many of them failing, lots of stuff going into the wastebasket--but every once in a while there was the gold of a new understanding that I had learned to expect when I was a kid, the result of observation. For I did not learn that observation was not worthwhile.\n\nIncidentally, in the forest we learned other things. We would go for walks and see all the regular things, and talk about many things: about the growing plants, the struggle of the trees for light, how they try to get as high as they can, and to solve the problem of getting water higher than 35 or 40 feet, the little plants on the ground that look for the little bits of light that come through all that growth, and so forth.\n\nOne day, after we had seen all this, my father took me to the forest again and said, \"In all this time we have been looking at the forest we have only seen half of what is going on, exactly half.\"\n\nI said, \"What do you mean?\"\n\nHe said, \"We have been looking at how all these things grow; but for each bit of growth, there must be the same amount of decay--otherwise, the materials would be consumed forever: dead trees would lie there, having used up all the stuff from the air and the ground, and it wouldn't get back into the ground or the air, so nothing else could grow because there is no material available. There must be for each bit of growth exactly the same amount of decay.\"\n\nThere then followed many walks in the woods during which we broke up old stumps, saw frizzy bags and funguses growing; he couldn’t show me bacteria, but we saw the softening effects, and so on. [Thus] I saw the forest as a process of the constant turning of materials.\n\nThere were many such things, descriptions of things, in odd ways. He often started to talk about things like this: \"Suppose a man from Mars were to come down and look at the world.\" For example, when I was playing with my electric trains, he told me that there is a great wheel being turned by water which is connected by filaments of copper, which spread out and spread out and spread out in all directions; and then there are little wheels, and all those little wheels turn when the big wheel turns. The relation between them is only that there is copper and iron, nothing else--no moving parts. You turn one wheel here, and all the little wheels all over the place turn, and your train is one of them. It was a wonderful world my father told me about.\n\nYou might wonder what he got out of it all. I went to MIT. I went to Princeton. I came home, and he said, \"Now you've got a science education. I have always wanted to know something that I have never understood, and so, my son, I want you to explain it to me.\"\n\nI said yes.\n\nHe said, \"I understand that they say that light is emitted from an atom when it goes from one state to another, from an excited state to a state of lower energy.\n\nI said, \"That's right.\"\n\n\"And light is a kind of particle, a photon, I think they call it.\"\n\n\"Yes.\"\n\n\"So if the photon comes out of the atom when it goes from the excited to the lower state, the photon must have been in the atom in the excited state.\"\n\nI said, \"Well, no.\"\n\nHe said, \"Well, how do you look at it so you can think of a particle photon coming out without it having been in there in the excited state?\"\n\nI thought a few minutes, and I said, \"I'm sorry; I don't know. I can't explain it to you.\"\n\nHe was very disappointed after all these years and years of trying to teach me something, that it came out with such poor results.\n\nWhat science is, I think, may be something like this: There was on this planet an evolution of life to a stage that there were evolved animals, which are intelligent. I don't mean just human beings, but animals which play and which can learn something from experience--like cats. But at this stage each animal would have to learn from its own experience. They gradually develop, until some animal [primates?] could learn from experience more rapidly and could even learn from another’s experience by watching, or one could show the other, or he saw what the other one did. So there came a possibility that all might learn it, but the transmission was inefficient and they would die, and maybe the one who learned it died, too, before he could pass it on to others.\n\nThe question is: is it possible to learn more rapidly what somebody learned from some accident than the rate at which the thing is being forgotten, either because of bad memory or because of the death of the learner or inventors?\n\nSo there came a time, perhaps, when for some species [humans?] the rate at which learning was increased, reached such a pitch that suddenly a completely new thing happened: things could be learned by one individual animal, passed on to another, and another fast enough that it was not lost to the race. Thus became possible an accumulation of knowledge of the race.\n\nThis has been called time-binding. I don't know who first called it this. At any rate, we have here [in this hall] some samples of those animals, sitting here trying to bind one experience to another, each one trying to learn from the other.\n\nThis phenomenon of having a memory for the race, of having an accumulated knowledge passable from one generation to another, was new in the world--but it had a disease in it: it was possible to pass on ideas which were not profitable for the race. The race has ideas, but they are not necessarily profitable.\n\nSo there came a time in which the ideas, although accumulated very slowly, were all accumulations not only of practical and useful things, but great accumulations of all types of prejudices, and strange and odd beliefs.\n\nThen a way of avoiding the disease was discovered. This is to doubt that what is being passed from the past is in fact true, and to try to find out ab initio again from experience what the situation is, rather than trusting the experience of the past in the form in which it is passed down. And that is what science is: the result of the discovery that it is worthwhile rechecking by new direct experience, and not necessarily trusting the [human] race['s] experience from the past. I see it that way. That is my best definition.\n\nI would like to remind you all of things that you know very well in order to give you a little enthusiasm. In religion, the moral lessons are taught, but they are not just taught once, you are inspired again and again, and I think it is necessary to inspire again and again, and to remember the value of science for children, for grown-ups, and everybody else, in several ways; not only [so] that we will become better citizens, more able to control nature and so on.\n\nThere are other things.\n\nThere is the value of the worldview created by science. There is the beauty and the wonder of the world that is discovered through the results of these new experiences. That is to say, the wonders of the content which I just reminded you of; that things move because the sun is shining. (Yet, not everything moves because the sun is shining. The earth rotates independent of the sun shining, and the nuclear reaction recently produced energy on the earth, a new source. Probably volcanoes are generally moved from a source different from the shining\nsun.)\n\nThe world looks so different after learning science. For example, trees are made of air, primarily. When they are burned, they go back to air, and in the flaming heat is released the flaming heat of the sun which was bound in to convert the air into tree, and in the ash is the small remnant of the part which did not come from air that came from the solid earth, instead. These are beautiful things, and the content of science is wonderfully full of them. They are very inspiring, and they can be used to inspire others.\n\nAnother of the qualities of science is that it teaches the value of rational thought as well as the importance of freedom of thought; the positive results that come from doubting that the lessons are all true. You must here distinguish--especially in teaching--the science from the forms or procedures that are sometimes used in developing science. It is easy to say, \"We write, experiment, and observe, and do this or that.\" You can copy that form exactly. But great religions are dissipated by following form without remembering the direct content of the teaching of the great leaders. In the same way, it is possible to follow form and call it science, but that is pseudo-science. In this way, we all suffer from the kind of tyranny we have today in the many institutions that have come under the influence of pseudoscientific advisers.\n\nWe have many studies in teaching, for example, in which people make observations, make lists, do statistics, and so on, but these do not thereby become established science, established knowledge. They are merely an imitative form of science analogous to the South Sea Islanders' airfields--radio towers, etc., made out of wood. The islanders expect a great airplane to arrive. They even build wooden airplanes of the same shape as they see in the foreigners' airfields around them, but strangely enough, their wood planes do not fly. The result of this pseudoscientific imitation is to produce experts, which many of you are. [But] you teachers, who are really teaching children at the bottom of the heap, can maybe doubt the experts. As a matter of fact, I can also define science another way: Science is the belief in the ignorance of experts.\n\nWhen someone says, \"Science teaches such and such,\" he is using the word incorrectly. Science doesn't teach anything; experience teaches it. If they say to you, \"Science has shown such and such,\" you might ask, \"How does science show it? How did the scientists find out? How? What? Where?\"\n\nIt should not be \"science has shown\" but \"this experiment, this effect, has shown.\" And you have as much right as anyone else, upon hearing about the experiments--but be patient and listen to all the evidence--to judge whether a sensible conclusion has been arrived at.\n\nIn a field which is so complicated [as education] that true science is not yet able to get anywhere, we have to rely on a kind of old-fashioned wisdom, a kind of definite straightforwardness. I am trying to inspire the teacher at the bottom to have some hope and some self-confidence in common sense and natural intelligence. The experts who are leading you may be wrong.\n\nI have probably ruined the system, and the students that are coming into Caltech no longer will be any good. I think we live in an unscientific age in which almost all the buffeting of communications and television--words, books, and so on--are unscientific. As a result, there is a considerable amount of intellectual tyranny in the name of science.\n\nFinally, with regard to this time-binding, a man cannot live beyond the grave. Each generation that discovers something from its experience must pass that on, but it must pass that on with a delicate balance of respect and disrespect, so that the [human] race--now that it is aware of the disease to which it is liable--does not inflict its errors too rigidly on its youth, but it does pass on the accumulated wisdom, plus the wisdom that it may not be wisdom.\n\nIt is necessary to teach both to accept and to reject the past with a kind of balance that takes considerable skill. Science alone of all the subjects contains within itself the lesson of the danger of belief in the infallibility of the greatest teachers of the preceding generation.\n\nSo carry on. Thank you.\n\n\n","source":"_posts/什么是科学.md","raw":"---\ntitle: 什么是科学\ndate: 2018-01-06 10:26:25\ntags: 分享\n---\n\n这是一篇1966年纽约举办的国际科学教师协会15周年大会上的演讲。在我看来，这边文章更多是阐述要批判的对待科学，虽然发表距今已经有五十多年，科学一直在不断进步。但是敢于挑战权威的核心思想却丝毫没有过时，并且我认为这种思维应该伴随科学的发展保留下去。科学不会教给我们什么，那些复杂难懂的定义毫无意义，只有经验才能告诉你一切。不仅是纯粹的科学，任何需要通过继承而发展的东西不都是如此吗？\n\n[原文章地址](http://www.fotuva.org/feynman/what_is_science.html)\n\n\n### What is Science?\n\nPresented at the fifteenth annual meeting of the National Science Teachers Association, 1966 in New York City, and reprinted from The Physics Teacher Vol. 7, issue 6, 1969, pp. 313-320 by permission of the editor and the author. [Words and symbols in brackets added by Ralph Leighton.]\n\nI thank Mr. DeRose for the opportunity to join you science teachers. I also am a science teacher. I have much experience only in teaching graduate students in physics, and as a result of the experience I know that I don't know how to teach.\n\nI am sure that you who are real teachers working at the bottom level of this hierarchy of teachers, instructors of teachers, experts on curricula, also are sure that you, too, don't know how to do it; otherwise you wouldn't bother to come to the convention.\n\nThe subject \"What Is Science\" is not my choice. It was Mr. DeRose's subject. But I would like to say that I think that \"what is science\" is not at all equivalent to \"how to teach science,\" and I must call that to your attention for two reasons. In the first place, from the way that I am preparing to give this lecture, it may seem that I am trying to tell you how to teach science--I am not at all in any way, because I don't know anything about small children. I have one, so I know that I don't know. The other is I think that most of you (because there is so much talk and so many papers and so many experts in the field) have some kind of a feeling of lack of self-confidence. In some way you are always being lectured on how things are not going too well and how you should learn to teach better. I am not going to berate you for the bad work you are doing and indicate how it can definitely be improved; that is not my intention.\n\nAs a matter of fact, we have very good students coming into Caltech, and during the years we found them getting better and better. Now how it is done, I don't know. I wonder if you know. I don't want to interfere with the system; it is very good.\n\nOnly two days ago we had a conference in which we decided that we don't have to teach a course in elementary quantum mechanics in the graduate school any more. When I was a student, they didn't even have a course in quantum mechanics in the graduate school; it was considered too difficult a subject. When I first started to teach, we had one. Now we teach it to undergraduates. We discover now that we don't have to have elementary quantum mechanics for graduates from other schools. Why is it getting pushed down? Because we are able to teach better in the university, and that is because the students coming up are better trained.\n\nWhat is science? Of course you all must know, if you teach it. That's common sense. What can I say? If you don't know, every teacher's edition of every textbook gives a complete discussion of the subject. There is some kind of distorted distillation and watered-down and mixed-up words of Francis Bacon from some centuries ago, words which then were supposed to be the deep philosophy of science. But one of the greatest experimental scientists of the time who was really doing something, William Harvey, said that what Bacon said science was, was the science that a lord-chancellor would do. He [Bacon] spoke of making observations, but omitted the vital factor of judgment about what to observe and what to pay attention to.\n\nAnd so what science is, is not what the philosophers have said it is, and certainly not what the teacher editions say it is. What it is, is a problem which I set for myself after I said I would give this talk.\n\nAfter some time, I was reminded of a little poem:\n\nA centipede was happy quite, until a toad in fun \nSaid, \"Pray, which leg comes after which?\" \nThis raised his doubts to such a pitch \nHe fell distracted in the ditch \nNot knowing how to run.\n\nAll my life, I have been doing science and known what it was, but what I have come to tell you--which foot comes after which--I am unable to do, and furthermore, I am worried by the analogy in the poem that when I go home I will no longer be able to do any research.\n\nThere have been a lot of attempts by the various press reporters to get some kind of a capsule of this talk; I prepared it only a little time ago, so it was impossible; but I can see them all rushing out now to write some sort of headline which says: \"The Professor called the President of NSTA a toad.\"\n\nUnder these circumstances of the difficulty of the subject, and my dislike of philosophical exposition, I will present it in a very unusual way. I am just going to tell you how I learned what science is.\n\nThat's a little bit childish. I learned it as a child. I have had it in my blood from the beginning. And I would like to tell you how it got in. This sounds as though I am trying to tell you how to teach, but that is not my intention. I'm going to tell you what science is like by how I learned what science is like.\n\nMy father did it to me. When my mother was carrying me, it is reported--I am not directly aware of the conversation--my father said that \"if it's a boy, he'll be a scientist.\" How did he do it? He never told me I should be a scientist. He was not a scientist; he was a businessman, a sales manager of a uniform company, but he read about science and loved it.\n\nWhen I was very young--the earliest story I know--when I still ate in a high chair, my father would play a game with me after dinner.\n\nHe had brought a whole lot of old rectangular bathroom floor tiles from some place in Long Island City. We sat them up on end, one next to the other, and I was allowed to push the end one and watch the whole thing go down. So far, so good.\n\nNext, the game improved. The tiles were different colors. I must put one white, two blues, one white, two blues, and another white and then two blues--I may want to put another blue, but it must be a white. You recognize already the usual insidious cleverness; first delight him in play, and then slowly inject material of educational value.\n\nWell, my mother, who is a much more feeling woman, began to realize the insidiousness of his efforts and said, \"Mel, please let the poor child put a blue tile if he wants to.\" My father said, \"No, I want him to pay attention to patterns. It is the only thing I can do that is mathematics at this earliest level.\" If I were giving a talk on \"what is mathematics,\" I would already have answered you. Mathematics is looking for patterns. (The fact is that this education had some effect. We had a direct experimental test, at the time I got to kindergarten. We had weaving in those days. They've taken it out; it's too difficult for children. We used to weave colored paper through vertical strips and make patterns. The kindergarten teacher was so amazed that she sent a special letter home to report that this child was very unusual, because he seemed to be able to figure out ahead of time what pattern he was going to get, and made amazingly intricate patterns. So the tile game did do something to me.)\n\nI would like to report other evidence that mathematics is only patterns. When I was at Cornell, I was rather fascinated by the student body, which seems to me was a dilute mixture of some sensible people in a big mass of dumb people studying home economics, etc. including lots of girls. I used to sit in the cafeteria with the students and eat and try to overhear their conversations and see if there was one intelligent word coming out. You can imagine my surprise when I discovered a tremendous thing, it seemed to me.\n\nI listened to a conversation between two girls, and one was explaining that if you want to make a straight line, you see, you go over a certain number to the right for each row you go up--that is, if you go over each time the same amount when you go up a row, you make a straight line--a deep principle of analytic geometry! It went on. I was rather amazed. I didn't realize the female mind was capable of understanding analytic geometry.\n\nShe went on and said, \"Suppose you have another line coming in from the other side, and you want to figure out where they are going to intersect. Suppose on one line you go over two to the right for every one you go up, and the other line goes over three to the right for every one that it goes up, and they start twenty steps apart,\" etc.--I was flabbergasted. She figured out where the intersection was. It turned out that one girl was explaining to the other how to knit argyle socks. I, therefore, did learn a lesson: The female mind is capable of understanding analytic geometry. Those people who have for years been insisting (in the face of all obvious evidence to the contrary) that the male and female are equally capable of rational thought may have something. The difficulty may just be that we have never yet discovered a way to communicate with the female mind. If it is done in the right way, you may be able to get something out of it.\n\nNow I will go on with my own experience as a youngster in mathematics. Another thing that my father told me--and I can't quite explain it, because it was more an emotion than a telling--was that the ratio of the circumference to the diameter of all circles was always the same, no matter what the size. That didn't seem to me too unobvious, but the ratio had some marvelous property. That was a wonderful number, a deep number, pi. There was a mystery about this number that I didn't quite understand as a youth, but this was a great thing, and the result was that I looked for pi everywhere.\n\nWhen I was learning later in school how to make the decimals for fractions, and how to make 3 1/8, 1 wrote 3.125 and, thinking I recognized a friend, wrote that it equals pi, the ratio of circumference to diameter of a circle. The teacher corrected it to 3.1416.\n\nI illustrate these things to show an influence. The idea that there is a mystery, that there is a wonder about the number was important to me--not what the number was. Very much later, when I was doing experiments in the laboratory--I mean my own home laboratory, fiddling around--no, excuse me, I didn't do experiments, I never did; I just fiddled around. Gradually, through books and manuals, I began to discover there were formulas applicable to electricity in relating the current and resistance, and so on. One day, looking at the formulas in some book or other, I discovered a formula for the frequency of a resonant circuit, which was f = 1/2 pi LC, where L is the inductance and C the capacitance of the... circle? You laugh, but I was very serious then. Pi was a thing with circles, and here is pi coming out of an electric circuit. Where was the circle? Do those of you who laughed know how that comes about?\n\nI have to love the thing. I have to look for it. I have to think about it. And then I realized, of course, that the coils are made in circles. About a half year later, I found another book which gave the inductance of round coils and square coils, and there were other pi's in those formulas. I began to think about it again, and I realized that the pi did not come from the circular coils. I understand it better now; but in my heart I still don't know where that circle is, where that pi comes from.\n\nWhen I was still pretty young--I don't know how old exactly--I had a ball in a wagon I was pulling, and I noticed something, so I ran up to my father to say that \"When I pull the wagon, the ball runs to the back, and when I am running with the wagon and stop, the ball runs to the front. Why?\n\nHow would you answer?\n\nHe said, \"That, nobody knows.\" He said, \"It's very general, though, it happens all the time to anything; anything that is moving tends to keep moving; anything standing still tries to maintain that condition. If you look close you will see the ball does not run to the back of the wagon where you start from standing still. It moves forward a bit too, but not as fast as the wagon. The back of the wagon catches up with the ball, which has trouble getting started moving. It's called inertia, that principle.\" I did run back to check, and sure enough, the ball didn't go backwards. He put the difference between what we know and what we call it very distinctly.\n\nRegarding this business about names and words, I would tell you another story. We used to go up to the Catskill Mountains for vacations. In New York, you go the Catskill Mountains for vacations. The poor husbands had to go to work during the week, but they would come rushing out for weekends and stay with their families. On the weekends, my father would take me for walks in the woods. He often took me for walks, and we learned all about nature, and so on, in the process. But the other children, friends of mine also wanted to go, and tried to get my father to take them. He didn't want to, because he said I was more advanced. I'm not trying to tell you how to teach, because what my father was doing was with a class of just one student; if he had a class of more than one, he was incapable of doing it.\n\nSo we went alone for our walk in the woods. But mothers were very powerful in those day's as they are now, and they convinced the other fathers that they had to take their own sons out for walks in the woods. So all fathers took all sons out for walks in the woods one Sunday afternoon. The next day, Monday, we were playing in the fields and this boy said to me, \"See that bird standing on the stump there? What's the name of it?\"\n\nI said, \"I haven't got the slightest idea.\"\n\nHe said, \"It’s a brown-throated thrush. Your father doesn't teach you much about science.\"\n\nI smiled to myself, because my father had already taught me that [the name] doesn't tell me anything about the bird. He taught me \"See that bird? It's a brown-throated thrush, but in Germany it's called a halsenflugel, and in Chinese they call it a chung ling and even if you know all those names for it, you still know nothing about the bird--you only know something about people; what they call that bird. Now that thrush sings, and teaches its young to fly, and flies so many miles away during the summer across the country, and nobody knows how it finds its way,\" and so forth. There is a difference between the name of the thing and what goes on.\n\nThe result of this is that I cannot remember anybody's name, and when people discuss physics with me they often are exasperated when they say \"the Fitz-Cronin effect,\" and I ask \"What is the effect?\" and I can't remember the name.\n\nI would like to say a word or two--may I interrupt my little tale--about words and definitions, because it is necessary to learn the words.\n\nIt is not science. That doesn't mean, just because it is not science, that we don't have to teach the words. We are not talking about what to teach; we are talking about what science is. It is not science to know how to change Centigrade to Fahrenheit. It's necessary, but it is not exactly science. In the same sense, if you were discussing what art is, you wouldn't say art is the knowledge of the fact that a 3-B pencil is softer than a 2-H pencil. It's a distinct difference. That doesn't mean an art teacher shouldn't teach that, or that an artist gets along very well if he doesn't know that. (Actually, you can find out in a minute by trying it; but that's a scientific way that art teachers may not think of explaining.)\n\nIn order to talk to each other, we have to have words, and that's all right. It's a good idea to try to see the difference, and it's a good idea to know when we are teaching the tools of science, such as words, and when we are teaching science itself.\n\nTo make my point still clearer, I shall pick out a certain science book to criticize unfavorably, which is unfair, because I am sure that with little ingenuity, I can find equally unfavorable things to say about others. There is a first grade science book which, in the first lesson of the first grade, begins in an unfortunate manner to teach science, because it starts off an the wrong idea of what science is. There is a picture of a dog--a windable toy dog--and a hand comes to the winder, and then the dog is able to move. Under the last picture, it says \"What makes it move?\" Later on, there is a picture of a real dog and the question, \"What makes it move?\" Then there is a picture of a motorbike and the question, \"What makes it move?\" and so on.\n\nI thought at first they were getting ready to tell what science was going to be about--physics, biology, chemistry--but that wasn't it. The answer was in the teacher's edition of the book: the answer I was trying to learn is that \"energy makes it move.\"\n\nNow, energy is a very subtle concept. It is very, very difficult to get right. What I meant is that it is not easy to understand energy well enough to use it right, so that you can deduce something correctly using the energy idea--it is beyond the first grade. It would be equally well to say that \"God makes it move,\" or \"spirit makes it move,\" or \"movability makes it move.\" (In fact, one could equally well say \"energy makes it stop.\")\n\nLook at it this way: that’s only the definition of energy; it should be reversed. We might say when something can move that it has energy in it, but not what makes it move is energy. This is a very subtle difference. It's the same with this inertia proposition.\n\nPerhaps I can make the difference a little clearer this way: If you ask a child what makes the toy dog move, you should think about what an ordinary human being would answer. The answer is that you wound up the spring; it tries to unwind and pushes the gear around.\n\nWhat a good way to begin a science course! Take apart the toy; see how it works. See the cleverness of the gears; see the ratchets. Learn something about the toy, the way the toy is put together, the ingenuity of people devising the ratchets and other things. That's good. The question is fine. The answer is a little unfortunate, because what they were trying to do is teach a definition of what is energy. But nothing whatever is learned.\n\nSuppose a student would say, \"I don't think energy makes it move.\" Where does the discussion go from there?\n\nI finally figured out a way to test whether you have taught an idea or you have only taught a definition.\n\nTest it this way: you say, \"Without using the new word which you have just learned, try to rephrase what you have just learned in your own language.\" Without using the word \"energy,\" tell me what you know now about the dog's motion.\" You cannot. So you learned nothing about science. That may be all right. You may not want to learn something about science right away. You have to learn definitions. But for the very first lesson, is that not possibly destructive?\n\nI think for lesson number one, to learn a mystic formula for answering questions is very bad. The book has some others: \"gravity makes it fall;\" \"the soles of your shoes wear out because of friction.\" Shoe leather wears out because it rubs against the sidewalk and the little notches and bumps on the sidewalk grab pieces and pull them off. To simply say it is because of friction, is sad, because it's not science.\n\nMy father dealt a little bit with energy and used the term after I got a little bit of the idea about it. What he would have done I know, because he did in fact essentially the same thing--though not the same example of the toy dog. He would say, \"It moves because the sun is shining,\" if he wanted to give the same lesson.\n\nI would say, \"No. What has that to do with the sun shining? It moved because I wound up the springs.\"\n\n\"And why, my friend, are you able to move to wind up the spring?\"\n\n\"I eat.\"\n\n\"What, my friend, do you eat?\"\n\n\"I eat plants.\"\n\n\"And how do they grow?\"\n\n\"They grow because the sun is shining.\"\n\nAnd it is the same with the [real] dog.\n\nWhat about gasoline? Accumulated energy of the sun, which is captured by plants and preserved in the ground. Other examples all end with the sun. And so the same idea about the world that our textbook is driving at is phrased in a very exciting way.\n\nAll the things that we see that are moving, are moving because the sun is shining. It does explain the relationship of one source of energy to another, and it can be denied by the child. He could say, \"I don't think it is on account of the sun shining,\" and you can start a discussion. So there is a difference. (Later I could challenge him with the tides, and what makes the earth turn, and have my hand on mystery again.)\n\nThat is just an example of the difference between definitions (which are necessary) and science. The only objection in this particular case was that it was the first lesson. It must certainly come in later, telling you what energy is, but not to such a simple question as \"What makes a [toy] dog move?\" A child should be given a child's answer. \"Open it up; let's look at it.\"\n\nDuring those walks in the woods, I learned a great deal. In the case of birds, for example, I already mentioned migration, but I will give you another example of birds in the woods. Instead of naming them, my father would say, \"Look, notice that the bird is always pecking in its feathers. It pecks a lot in its feathers. Why do you think it pecks the feathers?\"\n\nI guessed it's because the feathers are ruffled, and he's trying to straighten them out. He said, \"Okay, when would the feathers get ruffled, or how would they get ruffled?\"\n\n\"When he flies. When he walks around, it's okay; but when he flies it ruffles the feathers.\"\n\nThen he would say, \"You would guess then when the bird just landed he would have to peck more at his feathers than after he has straightened them out and has just been walking around the ground for a while. Okay, let's look.\"\n\nSo we would look, and we would watch, and it turned out, as far as I could make out, that the bird pecked about as much and as often no matter how long he was walking an the ground and not just directly after flight.\n\nSo my guess was wrong, and I couldn't guess the right reason. My father revealed the reason.\n\nIt is that the birds have lice. There is a little flake that comes off the feather, my father taught me, stuff that can be eaten, and the louse eats it. And then an the loose, there is a little bit of wax in the joints between the sections of the leg that oases out, and there is a mite that lives in there that can eat that wax. Now the mite has such a good source of food that it doesn't digest it too well, so from the rear end there comes a liquid that has too much sugar, and in that sugar lives a tiny creature, etc.\n\nThe facts are not correct; the spirit is correct. First, I learned about parasitism, one on the other, on the other, on the other. Second, he went on to say that in the world whenever there is any source of something that could be eaten to make life go, some form of life finds a way to make use of that source; and that each little bit of left over stuff is eaten by something.\n\nNow the point of this is that the result of observation, even if I were unable to come to the ultimate conclusion, was a wonderful piece of gold, with marvelous results. It was something marvelous.\n\nSuppose I were told to observe, to make a list, to write down, to do this, to look, and when I wrote my list down, it was filed with 130 other lists in the back of a notebook. I would learn that the result of observation is relatively dull, that nothing much comes of it.\n\nI think it is very important--at least it was to me--that if you are going to teach people to make observations, you should show that something wonderful can come from them. I learned then what science was about: it was patience. If you looked, and you watched, and you paid attention, you got a great reward from it--although possibly not every time. As a result, when I became a more mature man, I would painstakingly, hour after hour, for years, work on problems--sometimes many years, sometimes shorter times; many of them failing, lots of stuff going into the wastebasket--but every once in a while there was the gold of a new understanding that I had learned to expect when I was a kid, the result of observation. For I did not learn that observation was not worthwhile.\n\nIncidentally, in the forest we learned other things. We would go for walks and see all the regular things, and talk about many things: about the growing plants, the struggle of the trees for light, how they try to get as high as they can, and to solve the problem of getting water higher than 35 or 40 feet, the little plants on the ground that look for the little bits of light that come through all that growth, and so forth.\n\nOne day, after we had seen all this, my father took me to the forest again and said, \"In all this time we have been looking at the forest we have only seen half of what is going on, exactly half.\"\n\nI said, \"What do you mean?\"\n\nHe said, \"We have been looking at how all these things grow; but for each bit of growth, there must be the same amount of decay--otherwise, the materials would be consumed forever: dead trees would lie there, having used up all the stuff from the air and the ground, and it wouldn't get back into the ground or the air, so nothing else could grow because there is no material available. There must be for each bit of growth exactly the same amount of decay.\"\n\nThere then followed many walks in the woods during which we broke up old stumps, saw frizzy bags and funguses growing; he couldn’t show me bacteria, but we saw the softening effects, and so on. [Thus] I saw the forest as a process of the constant turning of materials.\n\nThere were many such things, descriptions of things, in odd ways. He often started to talk about things like this: \"Suppose a man from Mars were to come down and look at the world.\" For example, when I was playing with my electric trains, he told me that there is a great wheel being turned by water which is connected by filaments of copper, which spread out and spread out and spread out in all directions; and then there are little wheels, and all those little wheels turn when the big wheel turns. The relation between them is only that there is copper and iron, nothing else--no moving parts. You turn one wheel here, and all the little wheels all over the place turn, and your train is one of them. It was a wonderful world my father told me about.\n\nYou might wonder what he got out of it all. I went to MIT. I went to Princeton. I came home, and he said, \"Now you've got a science education. I have always wanted to know something that I have never understood, and so, my son, I want you to explain it to me.\"\n\nI said yes.\n\nHe said, \"I understand that they say that light is emitted from an atom when it goes from one state to another, from an excited state to a state of lower energy.\n\nI said, \"That's right.\"\n\n\"And light is a kind of particle, a photon, I think they call it.\"\n\n\"Yes.\"\n\n\"So if the photon comes out of the atom when it goes from the excited to the lower state, the photon must have been in the atom in the excited state.\"\n\nI said, \"Well, no.\"\n\nHe said, \"Well, how do you look at it so you can think of a particle photon coming out without it having been in there in the excited state?\"\n\nI thought a few minutes, and I said, \"I'm sorry; I don't know. I can't explain it to you.\"\n\nHe was very disappointed after all these years and years of trying to teach me something, that it came out with such poor results.\n\nWhat science is, I think, may be something like this: There was on this planet an evolution of life to a stage that there were evolved animals, which are intelligent. I don't mean just human beings, but animals which play and which can learn something from experience--like cats. But at this stage each animal would have to learn from its own experience. They gradually develop, until some animal [primates?] could learn from experience more rapidly and could even learn from another’s experience by watching, or one could show the other, or he saw what the other one did. So there came a possibility that all might learn it, but the transmission was inefficient and they would die, and maybe the one who learned it died, too, before he could pass it on to others.\n\nThe question is: is it possible to learn more rapidly what somebody learned from some accident than the rate at which the thing is being forgotten, either because of bad memory or because of the death of the learner or inventors?\n\nSo there came a time, perhaps, when for some species [humans?] the rate at which learning was increased, reached such a pitch that suddenly a completely new thing happened: things could be learned by one individual animal, passed on to another, and another fast enough that it was not lost to the race. Thus became possible an accumulation of knowledge of the race.\n\nThis has been called time-binding. I don't know who first called it this. At any rate, we have here [in this hall] some samples of those animals, sitting here trying to bind one experience to another, each one trying to learn from the other.\n\nThis phenomenon of having a memory for the race, of having an accumulated knowledge passable from one generation to another, was new in the world--but it had a disease in it: it was possible to pass on ideas which were not profitable for the race. The race has ideas, but they are not necessarily profitable.\n\nSo there came a time in which the ideas, although accumulated very slowly, were all accumulations not only of practical and useful things, but great accumulations of all types of prejudices, and strange and odd beliefs.\n\nThen a way of avoiding the disease was discovered. This is to doubt that what is being passed from the past is in fact true, and to try to find out ab initio again from experience what the situation is, rather than trusting the experience of the past in the form in which it is passed down. And that is what science is: the result of the discovery that it is worthwhile rechecking by new direct experience, and not necessarily trusting the [human] race['s] experience from the past. I see it that way. That is my best definition.\n\nI would like to remind you all of things that you know very well in order to give you a little enthusiasm. In religion, the moral lessons are taught, but they are not just taught once, you are inspired again and again, and I think it is necessary to inspire again and again, and to remember the value of science for children, for grown-ups, and everybody else, in several ways; not only [so] that we will become better citizens, more able to control nature and so on.\n\nThere are other things.\n\nThere is the value of the worldview created by science. There is the beauty and the wonder of the world that is discovered through the results of these new experiences. That is to say, the wonders of the content which I just reminded you of; that things move because the sun is shining. (Yet, not everything moves because the sun is shining. The earth rotates independent of the sun shining, and the nuclear reaction recently produced energy on the earth, a new source. Probably volcanoes are generally moved from a source different from the shining\nsun.)\n\nThe world looks so different after learning science. For example, trees are made of air, primarily. When they are burned, they go back to air, and in the flaming heat is released the flaming heat of the sun which was bound in to convert the air into tree, and in the ash is the small remnant of the part which did not come from air that came from the solid earth, instead. These are beautiful things, and the content of science is wonderfully full of them. They are very inspiring, and they can be used to inspire others.\n\nAnother of the qualities of science is that it teaches the value of rational thought as well as the importance of freedom of thought; the positive results that come from doubting that the lessons are all true. You must here distinguish--especially in teaching--the science from the forms or procedures that are sometimes used in developing science. It is easy to say, \"We write, experiment, and observe, and do this or that.\" You can copy that form exactly. But great religions are dissipated by following form without remembering the direct content of the teaching of the great leaders. In the same way, it is possible to follow form and call it science, but that is pseudo-science. In this way, we all suffer from the kind of tyranny we have today in the many institutions that have come under the influence of pseudoscientific advisers.\n\nWe have many studies in teaching, for example, in which people make observations, make lists, do statistics, and so on, but these do not thereby become established science, established knowledge. They are merely an imitative form of science analogous to the South Sea Islanders' airfields--radio towers, etc., made out of wood. The islanders expect a great airplane to arrive. They even build wooden airplanes of the same shape as they see in the foreigners' airfields around them, but strangely enough, their wood planes do not fly. The result of this pseudoscientific imitation is to produce experts, which many of you are. [But] you teachers, who are really teaching children at the bottom of the heap, can maybe doubt the experts. As a matter of fact, I can also define science another way: Science is the belief in the ignorance of experts.\n\nWhen someone says, \"Science teaches such and such,\" he is using the word incorrectly. Science doesn't teach anything; experience teaches it. If they say to you, \"Science has shown such and such,\" you might ask, \"How does science show it? How did the scientists find out? How? What? Where?\"\n\nIt should not be \"science has shown\" but \"this experiment, this effect, has shown.\" And you have as much right as anyone else, upon hearing about the experiments--but be patient and listen to all the evidence--to judge whether a sensible conclusion has been arrived at.\n\nIn a field which is so complicated [as education] that true science is not yet able to get anywhere, we have to rely on a kind of old-fashioned wisdom, a kind of definite straightforwardness. I am trying to inspire the teacher at the bottom to have some hope and some self-confidence in common sense and natural intelligence. The experts who are leading you may be wrong.\n\nI have probably ruined the system, and the students that are coming into Caltech no longer will be any good. I think we live in an unscientific age in which almost all the buffeting of communications and television--words, books, and so on--are unscientific. As a result, there is a considerable amount of intellectual tyranny in the name of science.\n\nFinally, with regard to this time-binding, a man cannot live beyond the grave. Each generation that discovers something from its experience must pass that on, but it must pass that on with a delicate balance of respect and disrespect, so that the [human] race--now that it is aware of the disease to which it is liable--does not inflict its errors too rigidly on its youth, but it does pass on the accumulated wisdom, plus the wisdom that it may not be wisdom.\n\nIt is necessary to teach both to accept and to reject the past with a kind of balance that takes considerable skill. Science alone of all the subjects contains within itself the lesson of the danger of belief in the infallibility of the greatest teachers of the preceding generation.\n\nSo carry on. Thank you.\n\n\n","slug":"什么是科学","published":1,"updated":"2018-08-21T00:43:30.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq24le49001fvcz11fe2tijc","content":"<p>这是一篇1966年纽约举办的国际科学教师协会15周年大会上的演讲。在我看来，这边文章更多是阐述要批判的对待科学，虽然发表距今已经有五十多年，科学一直在不断进步。但是敢于挑战权威的核心思想却丝毫没有过时，并且我认为这种思维应该伴随科学的发展保留下去。科学不会教给我们什么，那些复杂难懂的定义毫无意义，只有经验才能告诉你一切。不仅是纯粹的科学，任何需要通过继承而发展的东西不都是如此吗？</p>\n<p><a href=\"http://www.fotuva.org/feynman/what_is_science.html\" target=\"_blank\" rel=\"external\">原文章地址</a></p>\n<h3 id=\"What-is-Science\"><a href=\"#What-is-Science\" class=\"headerlink\" title=\"What is Science?\"></a>What is Science?</h3><p>Presented at the fifteenth annual meeting of the National Science Teachers Association, 1966 in New York City, and reprinted from The Physics Teacher Vol. 7, issue 6, 1969, pp. 313-320 by permission of the editor and the author. [Words and symbols in brackets added by Ralph Leighton.]</p>\n<p>I thank Mr. DeRose for the opportunity to join you science teachers. I also am a science teacher. I have much experience only in teaching graduate students in physics, and as a result of the experience I know that I don’t know how to teach.</p>\n<p>I am sure that you who are real teachers working at the bottom level of this hierarchy of teachers, instructors of teachers, experts on curricula, also are sure that you, too, don’t know how to do it; otherwise you wouldn’t bother to come to the convention.</p>\n<p>The subject “What Is Science” is not my choice. It was Mr. DeRose’s subject. But I would like to say that I think that “what is science” is not at all equivalent to “how to teach science,” and I must call that to your attention for two reasons. In the first place, from the way that I am preparing to give this lecture, it may seem that I am trying to tell you how to teach science–I am not at all in any way, because I don’t know anything about small children. I have one, so I know that I don’t know. The other is I think that most of you (because there is so much talk and so many papers and so many experts in the field) have some kind of a feeling of lack of self-confidence. In some way you are always being lectured on how things are not going too well and how you should learn to teach better. I am not going to berate you for the bad work you are doing and indicate how it can definitely be improved; that is not my intention.</p>\n<p>As a matter of fact, we have very good students coming into Caltech, and during the years we found them getting better and better. Now how it is done, I don’t know. I wonder if you know. I don’t want to interfere with the system; it is very good.</p>\n<p>Only two days ago we had a conference in which we decided that we don’t have to teach a course in elementary quantum mechanics in the graduate school any more. When I was a student, they didn’t even have a course in quantum mechanics in the graduate school; it was considered too difficult a subject. When I first started to teach, we had one. Now we teach it to undergraduates. We discover now that we don’t have to have elementary quantum mechanics for graduates from other schools. Why is it getting pushed down? Because we are able to teach better in the university, and that is because the students coming up are better trained.</p>\n<p>What is science? Of course you all must know, if you teach it. That’s common sense. What can I say? If you don’t know, every teacher’s edition of every textbook gives a complete discussion of the subject. There is some kind of distorted distillation and watered-down and mixed-up words of Francis Bacon from some centuries ago, words which then were supposed to be the deep philosophy of science. But one of the greatest experimental scientists of the time who was really doing something, William Harvey, said that what Bacon said science was, was the science that a lord-chancellor would do. He [Bacon] spoke of making observations, but omitted the vital factor of judgment about what to observe and what to pay attention to.</p>\n<p>And so what science is, is not what the philosophers have said it is, and certainly not what the teacher editions say it is. What it is, is a problem which I set for myself after I said I would give this talk.</p>\n<p>After some time, I was reminded of a little poem:</p>\n<p>A centipede was happy quite, until a toad in fun<br>Said, “Pray, which leg comes after which?”<br>This raised his doubts to such a pitch<br>He fell distracted in the ditch<br>Not knowing how to run.</p>\n<p>All my life, I have been doing science and known what it was, but what I have come to tell you–which foot comes after which–I am unable to do, and furthermore, I am worried by the analogy in the poem that when I go home I will no longer be able to do any research.</p>\n<p>There have been a lot of attempts by the various press reporters to get some kind of a capsule of this talk; I prepared it only a little time ago, so it was impossible; but I can see them all rushing out now to write some sort of headline which says: “The Professor called the President of NSTA a toad.”</p>\n<p>Under these circumstances of the difficulty of the subject, and my dislike of philosophical exposition, I will present it in a very unusual way. I am just going to tell you how I learned what science is.</p>\n<p>That’s a little bit childish. I learned it as a child. I have had it in my blood from the beginning. And I would like to tell you how it got in. This sounds as though I am trying to tell you how to teach, but that is not my intention. I’m going to tell you what science is like by how I learned what science is like.</p>\n<p>My father did it to me. When my mother was carrying me, it is reported–I am not directly aware of the conversation–my father said that “if it’s a boy, he’ll be a scientist.” How did he do it? He never told me I should be a scientist. He was not a scientist; he was a businessman, a sales manager of a uniform company, but he read about science and loved it.</p>\n<p>When I was very young–the earliest story I know–when I still ate in a high chair, my father would play a game with me after dinner.</p>\n<p>He had brought a whole lot of old rectangular bathroom floor tiles from some place in Long Island City. We sat them up on end, one next to the other, and I was allowed to push the end one and watch the whole thing go down. So far, so good.</p>\n<p>Next, the game improved. The tiles were different colors. I must put one white, two blues, one white, two blues, and another white and then two blues–I may want to put another blue, but it must be a white. You recognize already the usual insidious cleverness; first delight him in play, and then slowly inject material of educational value.</p>\n<p>Well, my mother, who is a much more feeling woman, began to realize the insidiousness of his efforts and said, “Mel, please let the poor child put a blue tile if he wants to.” My father said, “No, I want him to pay attention to patterns. It is the only thing I can do that is mathematics at this earliest level.” If I were giving a talk on “what is mathematics,” I would already have answered you. Mathematics is looking for patterns. (The fact is that this education had some effect. We had a direct experimental test, at the time I got to kindergarten. We had weaving in those days. They’ve taken it out; it’s too difficult for children. We used to weave colored paper through vertical strips and make patterns. The kindergarten teacher was so amazed that she sent a special letter home to report that this child was very unusual, because he seemed to be able to figure out ahead of time what pattern he was going to get, and made amazingly intricate patterns. So the tile game did do something to me.)</p>\n<p>I would like to report other evidence that mathematics is only patterns. When I was at Cornell, I was rather fascinated by the student body, which seems to me was a dilute mixture of some sensible people in a big mass of dumb people studying home economics, etc. including lots of girls. I used to sit in the cafeteria with the students and eat and try to overhear their conversations and see if there was one intelligent word coming out. You can imagine my surprise when I discovered a tremendous thing, it seemed to me.</p>\n<p>I listened to a conversation between two girls, and one was explaining that if you want to make a straight line, you see, you go over a certain number to the right for each row you go up–that is, if you go over each time the same amount when you go up a row, you make a straight line–a deep principle of analytic geometry! It went on. I was rather amazed. I didn’t realize the female mind was capable of understanding analytic geometry.</p>\n<p>She went on and said, “Suppose you have another line coming in from the other side, and you want to figure out where they are going to intersect. Suppose on one line you go over two to the right for every one you go up, and the other line goes over three to the right for every one that it goes up, and they start twenty steps apart,” etc.–I was flabbergasted. She figured out where the intersection was. It turned out that one girl was explaining to the other how to knit argyle socks. I, therefore, did learn a lesson: The female mind is capable of understanding analytic geometry. Those people who have for years been insisting (in the face of all obvious evidence to the contrary) that the male and female are equally capable of rational thought may have something. The difficulty may just be that we have never yet discovered a way to communicate with the female mind. If it is done in the right way, you may be able to get something out of it.</p>\n<p>Now I will go on with my own experience as a youngster in mathematics. Another thing that my father told me–and I can’t quite explain it, because it was more an emotion than a telling–was that the ratio of the circumference to the diameter of all circles was always the same, no matter what the size. That didn’t seem to me too unobvious, but the ratio had some marvelous property. That was a wonderful number, a deep number, pi. There was a mystery about this number that I didn’t quite understand as a youth, but this was a great thing, and the result was that I looked for pi everywhere.</p>\n<p>When I was learning later in school how to make the decimals for fractions, and how to make 3 1/8, 1 wrote 3.125 and, thinking I recognized a friend, wrote that it equals pi, the ratio of circumference to diameter of a circle. The teacher corrected it to 3.1416.</p>\n<p>I illustrate these things to show an influence. The idea that there is a mystery, that there is a wonder about the number was important to me–not what the number was. Very much later, when I was doing experiments in the laboratory–I mean my own home laboratory, fiddling around–no, excuse me, I didn’t do experiments, I never did; I just fiddled around. Gradually, through books and manuals, I began to discover there were formulas applicable to electricity in relating the current and resistance, and so on. One day, looking at the formulas in some book or other, I discovered a formula for the frequency of a resonant circuit, which was f = 1/2 pi LC, where L is the inductance and C the capacitance of the… circle? You laugh, but I was very serious then. Pi was a thing with circles, and here is pi coming out of an electric circuit. Where was the circle? Do those of you who laughed know how that comes about?</p>\n<p>I have to love the thing. I have to look for it. I have to think about it. And then I realized, of course, that the coils are made in circles. About a half year later, I found another book which gave the inductance of round coils and square coils, and there were other pi’s in those formulas. I began to think about it again, and I realized that the pi did not come from the circular coils. I understand it better now; but in my heart I still don’t know where that circle is, where that pi comes from.</p>\n<p>When I was still pretty young–I don’t know how old exactly–I had a ball in a wagon I was pulling, and I noticed something, so I ran up to my father to say that “When I pull the wagon, the ball runs to the back, and when I am running with the wagon and stop, the ball runs to the front. Why?</p>\n<p>How would you answer?</p>\n<p>He said, “That, nobody knows.” He said, “It’s very general, though, it happens all the time to anything; anything that is moving tends to keep moving; anything standing still tries to maintain that condition. If you look close you will see the ball does not run to the back of the wagon where you start from standing still. It moves forward a bit too, but not as fast as the wagon. The back of the wagon catches up with the ball, which has trouble getting started moving. It’s called inertia, that principle.” I did run back to check, and sure enough, the ball didn’t go backwards. He put the difference between what we know and what we call it very distinctly.</p>\n<p>Regarding this business about names and words, I would tell you another story. We used to go up to the Catskill Mountains for vacations. In New York, you go the Catskill Mountains for vacations. The poor husbands had to go to work during the week, but they would come rushing out for weekends and stay with their families. On the weekends, my father would take me for walks in the woods. He often took me for walks, and we learned all about nature, and so on, in the process. But the other children, friends of mine also wanted to go, and tried to get my father to take them. He didn’t want to, because he said I was more advanced. I’m not trying to tell you how to teach, because what my father was doing was with a class of just one student; if he had a class of more than one, he was incapable of doing it.</p>\n<p>So we went alone for our walk in the woods. But mothers were very powerful in those day’s as they are now, and they convinced the other fathers that they had to take their own sons out for walks in the woods. So all fathers took all sons out for walks in the woods one Sunday afternoon. The next day, Monday, we were playing in the fields and this boy said to me, “See that bird standing on the stump there? What’s the name of it?”</p>\n<p>I said, “I haven’t got the slightest idea.”</p>\n<p>He said, “It’s a brown-throated thrush. Your father doesn’t teach you much about science.”</p>\n<p>I smiled to myself, because my father had already taught me that [the name] doesn’t tell me anything about the bird. He taught me “See that bird? It’s a brown-throated thrush, but in Germany it’s called a halsenflugel, and in Chinese they call it a chung ling and even if you know all those names for it, you still know nothing about the bird–you only know something about people; what they call that bird. Now that thrush sings, and teaches its young to fly, and flies so many miles away during the summer across the country, and nobody knows how it finds its way,” and so forth. There is a difference between the name of the thing and what goes on.</p>\n<p>The result of this is that I cannot remember anybody’s name, and when people discuss physics with me they often are exasperated when they say “the Fitz-Cronin effect,” and I ask “What is the effect?” and I can’t remember the name.</p>\n<p>I would like to say a word or two–may I interrupt my little tale–about words and definitions, because it is necessary to learn the words.</p>\n<p>It is not science. That doesn’t mean, just because it is not science, that we don’t have to teach the words. We are not talking about what to teach; we are talking about what science is. It is not science to know how to change Centigrade to Fahrenheit. It’s necessary, but it is not exactly science. In the same sense, if you were discussing what art is, you wouldn’t say art is the knowledge of the fact that a 3-B pencil is softer than a 2-H pencil. It’s a distinct difference. That doesn’t mean an art teacher shouldn’t teach that, or that an artist gets along very well if he doesn’t know that. (Actually, you can find out in a minute by trying it; but that’s a scientific way that art teachers may not think of explaining.)</p>\n<p>In order to talk to each other, we have to have words, and that’s all right. It’s a good idea to try to see the difference, and it’s a good idea to know when we are teaching the tools of science, such as words, and when we are teaching science itself.</p>\n<p>To make my point still clearer, I shall pick out a certain science book to criticize unfavorably, which is unfair, because I am sure that with little ingenuity, I can find equally unfavorable things to say about others. There is a first grade science book which, in the first lesson of the first grade, begins in an unfortunate manner to teach science, because it starts off an the wrong idea of what science is. There is a picture of a dog–a windable toy dog–and a hand comes to the winder, and then the dog is able to move. Under the last picture, it says “What makes it move?” Later on, there is a picture of a real dog and the question, “What makes it move?” Then there is a picture of a motorbike and the question, “What makes it move?” and so on.</p>\n<p>I thought at first they were getting ready to tell what science was going to be about–physics, biology, chemistry–but that wasn’t it. The answer was in the teacher’s edition of the book: the answer I was trying to learn is that “energy makes it move.”</p>\n<p>Now, energy is a very subtle concept. It is very, very difficult to get right. What I meant is that it is not easy to understand energy well enough to use it right, so that you can deduce something correctly using the energy idea–it is beyond the first grade. It would be equally well to say that “God makes it move,” or “spirit makes it move,” or “movability makes it move.” (In fact, one could equally well say “energy makes it stop.”)</p>\n<p>Look at it this way: that’s only the definition of energy; it should be reversed. We might say when something can move that it has energy in it, but not what makes it move is energy. This is a very subtle difference. It’s the same with this inertia proposition.</p>\n<p>Perhaps I can make the difference a little clearer this way: If you ask a child what makes the toy dog move, you should think about what an ordinary human being would answer. The answer is that you wound up the spring; it tries to unwind and pushes the gear around.</p>\n<p>What a good way to begin a science course! Take apart the toy; see how it works. See the cleverness of the gears; see the ratchets. Learn something about the toy, the way the toy is put together, the ingenuity of people devising the ratchets and other things. That’s good. The question is fine. The answer is a little unfortunate, because what they were trying to do is teach a definition of what is energy. But nothing whatever is learned.</p>\n<p>Suppose a student would say, “I don’t think energy makes it move.” Where does the discussion go from there?</p>\n<p>I finally figured out a way to test whether you have taught an idea or you have only taught a definition.</p>\n<p>Test it this way: you say, “Without using the new word which you have just learned, try to rephrase what you have just learned in your own language.” Without using the word “energy,” tell me what you know now about the dog’s motion.” You cannot. So you learned nothing about science. That may be all right. You may not want to learn something about science right away. You have to learn definitions. But for the very first lesson, is that not possibly destructive?</p>\n<p>I think for lesson number one, to learn a mystic formula for answering questions is very bad. The book has some others: “gravity makes it fall;” “the soles of your shoes wear out because of friction.” Shoe leather wears out because it rubs against the sidewalk and the little notches and bumps on the sidewalk grab pieces and pull them off. To simply say it is because of friction, is sad, because it’s not science.</p>\n<p>My father dealt a little bit with energy and used the term after I got a little bit of the idea about it. What he would have done I know, because he did in fact essentially the same thing–though not the same example of the toy dog. He would say, “It moves because the sun is shining,” if he wanted to give the same lesson.</p>\n<p>I would say, “No. What has that to do with the sun shining? It moved because I wound up the springs.”</p>\n<p>“And why, my friend, are you able to move to wind up the spring?”</p>\n<p>“I eat.”</p>\n<p>“What, my friend, do you eat?”</p>\n<p>“I eat plants.”</p>\n<p>“And how do they grow?”</p>\n<p>“They grow because the sun is shining.”</p>\n<p>And it is the same with the [real] dog.</p>\n<p>What about gasoline? Accumulated energy of the sun, which is captured by plants and preserved in the ground. Other examples all end with the sun. And so the same idea about the world that our textbook is driving at is phrased in a very exciting way.</p>\n<p>All the things that we see that are moving, are moving because the sun is shining. It does explain the relationship of one source of energy to another, and it can be denied by the child. He could say, “I don’t think it is on account of the sun shining,” and you can start a discussion. So there is a difference. (Later I could challenge him with the tides, and what makes the earth turn, and have my hand on mystery again.)</p>\n<p>That is just an example of the difference between definitions (which are necessary) and science. The only objection in this particular case was that it was the first lesson. It must certainly come in later, telling you what energy is, but not to such a simple question as “What makes a [toy] dog move?” A child should be given a child’s answer. “Open it up; let’s look at it.”</p>\n<p>During those walks in the woods, I learned a great deal. In the case of birds, for example, I already mentioned migration, but I will give you another example of birds in the woods. Instead of naming them, my father would say, “Look, notice that the bird is always pecking in its feathers. It pecks a lot in its feathers. Why do you think it pecks the feathers?”</p>\n<p>I guessed it’s because the feathers are ruffled, and he’s trying to straighten them out. He said, “Okay, when would the feathers get ruffled, or how would they get ruffled?”</p>\n<p>“When he flies. When he walks around, it’s okay; but when he flies it ruffles the feathers.”</p>\n<p>Then he would say, “You would guess then when the bird just landed he would have to peck more at his feathers than after he has straightened them out and has just been walking around the ground for a while. Okay, let’s look.”</p>\n<p>So we would look, and we would watch, and it turned out, as far as I could make out, that the bird pecked about as much and as often no matter how long he was walking an the ground and not just directly after flight.</p>\n<p>So my guess was wrong, and I couldn’t guess the right reason. My father revealed the reason.</p>\n<p>It is that the birds have lice. There is a little flake that comes off the feather, my father taught me, stuff that can be eaten, and the louse eats it. And then an the loose, there is a little bit of wax in the joints between the sections of the leg that oases out, and there is a mite that lives in there that can eat that wax. Now the mite has such a good source of food that it doesn’t digest it too well, so from the rear end there comes a liquid that has too much sugar, and in that sugar lives a tiny creature, etc.</p>\n<p>The facts are not correct; the spirit is correct. First, I learned about parasitism, one on the other, on the other, on the other. Second, he went on to say that in the world whenever there is any source of something that could be eaten to make life go, some form of life finds a way to make use of that source; and that each little bit of left over stuff is eaten by something.</p>\n<p>Now the point of this is that the result of observation, even if I were unable to come to the ultimate conclusion, was a wonderful piece of gold, with marvelous results. It was something marvelous.</p>\n<p>Suppose I were told to observe, to make a list, to write down, to do this, to look, and when I wrote my list down, it was filed with 130 other lists in the back of a notebook. I would learn that the result of observation is relatively dull, that nothing much comes of it.</p>\n<p>I think it is very important–at least it was to me–that if you are going to teach people to make observations, you should show that something wonderful can come from them. I learned then what science was about: it was patience. If you looked, and you watched, and you paid attention, you got a great reward from it–although possibly not every time. As a result, when I became a more mature man, I would painstakingly, hour after hour, for years, work on problems–sometimes many years, sometimes shorter times; many of them failing, lots of stuff going into the wastebasket–but every once in a while there was the gold of a new understanding that I had learned to expect when I was a kid, the result of observation. For I did not learn that observation was not worthwhile.</p>\n<p>Incidentally, in the forest we learned other things. We would go for walks and see all the regular things, and talk about many things: about the growing plants, the struggle of the trees for light, how they try to get as high as they can, and to solve the problem of getting water higher than 35 or 40 feet, the little plants on the ground that look for the little bits of light that come through all that growth, and so forth.</p>\n<p>One day, after we had seen all this, my father took me to the forest again and said, “In all this time we have been looking at the forest we have only seen half of what is going on, exactly half.”</p>\n<p>I said, “What do you mean?”</p>\n<p>He said, “We have been looking at how all these things grow; but for each bit of growth, there must be the same amount of decay–otherwise, the materials would be consumed forever: dead trees would lie there, having used up all the stuff from the air and the ground, and it wouldn’t get back into the ground or the air, so nothing else could grow because there is no material available. There must be for each bit of growth exactly the same amount of decay.”</p>\n<p>There then followed many walks in the woods during which we broke up old stumps, saw frizzy bags and funguses growing; he couldn’t show me bacteria, but we saw the softening effects, and so on. [Thus] I saw the forest as a process of the constant turning of materials.</p>\n<p>There were many such things, descriptions of things, in odd ways. He often started to talk about things like this: “Suppose a man from Mars were to come down and look at the world.” For example, when I was playing with my electric trains, he told me that there is a great wheel being turned by water which is connected by filaments of copper, which spread out and spread out and spread out in all directions; and then there are little wheels, and all those little wheels turn when the big wheel turns. The relation between them is only that there is copper and iron, nothing else–no moving parts. You turn one wheel here, and all the little wheels all over the place turn, and your train is one of them. It was a wonderful world my father told me about.</p>\n<p>You might wonder what he got out of it all. I went to MIT. I went to Princeton. I came home, and he said, “Now you’ve got a science education. I have always wanted to know something that I have never understood, and so, my son, I want you to explain it to me.”</p>\n<p>I said yes.</p>\n<p>He said, “I understand that they say that light is emitted from an atom when it goes from one state to another, from an excited state to a state of lower energy.</p>\n<p>I said, “That’s right.”</p>\n<p>“And light is a kind of particle, a photon, I think they call it.”</p>\n<p>“Yes.”</p>\n<p>“So if the photon comes out of the atom when it goes from the excited to the lower state, the photon must have been in the atom in the excited state.”</p>\n<p>I said, “Well, no.”</p>\n<p>He said, “Well, how do you look at it so you can think of a particle photon coming out without it having been in there in the excited state?”</p>\n<p>I thought a few minutes, and I said, “I’m sorry; I don’t know. I can’t explain it to you.”</p>\n<p>He was very disappointed after all these years and years of trying to teach me something, that it came out with such poor results.</p>\n<p>What science is, I think, may be something like this: There was on this planet an evolution of life to a stage that there were evolved animals, which are intelligent. I don’t mean just human beings, but animals which play and which can learn something from experience–like cats. But at this stage each animal would have to learn from its own experience. They gradually develop, until some animal [primates?] could learn from experience more rapidly and could even learn from another’s experience by watching, or one could show the other, or he saw what the other one did. So there came a possibility that all might learn it, but the transmission was inefficient and they would die, and maybe the one who learned it died, too, before he could pass it on to others.</p>\n<p>The question is: is it possible to learn more rapidly what somebody learned from some accident than the rate at which the thing is being forgotten, either because of bad memory or because of the death of the learner or inventors?</p>\n<p>So there came a time, perhaps, when for some species [humans?] the rate at which learning was increased, reached such a pitch that suddenly a completely new thing happened: things could be learned by one individual animal, passed on to another, and another fast enough that it was not lost to the race. Thus became possible an accumulation of knowledge of the race.</p>\n<p>This has been called time-binding. I don’t know who first called it this. At any rate, we have here [in this hall] some samples of those animals, sitting here trying to bind one experience to another, each one trying to learn from the other.</p>\n<p>This phenomenon of having a memory for the race, of having an accumulated knowledge passable from one generation to another, was new in the world–but it had a disease in it: it was possible to pass on ideas which were not profitable for the race. The race has ideas, but they are not necessarily profitable.</p>\n<p>So there came a time in which the ideas, although accumulated very slowly, were all accumulations not only of practical and useful things, but great accumulations of all types of prejudices, and strange and odd beliefs.</p>\n<p>Then a way of avoiding the disease was discovered. This is to doubt that what is being passed from the past is in fact true, and to try to find out ab initio again from experience what the situation is, rather than trusting the experience of the past in the form in which it is passed down. And that is what science is: the result of the discovery that it is worthwhile rechecking by new direct experience, and not necessarily trusting the [human] race[‘s] experience from the past. I see it that way. That is my best definition.</p>\n<p>I would like to remind you all of things that you know very well in order to give you a little enthusiasm. In religion, the moral lessons are taught, but they are not just taught once, you are inspired again and again, and I think it is necessary to inspire again and again, and to remember the value of science for children, for grown-ups, and everybody else, in several ways; not only [so] that we will become better citizens, more able to control nature and so on.</p>\n<p>There are other things.</p>\n<p>There is the value of the worldview created by science. There is the beauty and the wonder of the world that is discovered through the results of these new experiences. That is to say, the wonders of the content which I just reminded you of; that things move because the sun is shining. (Yet, not everything moves because the sun is shining. The earth rotates independent of the sun shining, and the nuclear reaction recently produced energy on the earth, a new source. Probably volcanoes are generally moved from a source different from the shining<br>sun.)</p>\n<p>The world looks so different after learning science. For example, trees are made of air, primarily. When they are burned, they go back to air, and in the flaming heat is released the flaming heat of the sun which was bound in to convert the air into tree, and in the ash is the small remnant of the part which did not come from air that came from the solid earth, instead. These are beautiful things, and the content of science is wonderfully full of them. They are very inspiring, and they can be used to inspire others.</p>\n<p>Another of the qualities of science is that it teaches the value of rational thought as well as the importance of freedom of thought; the positive results that come from doubting that the lessons are all true. You must here distinguish–especially in teaching–the science from the forms or procedures that are sometimes used in developing science. It is easy to say, “We write, experiment, and observe, and do this or that.” You can copy that form exactly. But great religions are dissipated by following form without remembering the direct content of the teaching of the great leaders. In the same way, it is possible to follow form and call it science, but that is pseudo-science. In this way, we all suffer from the kind of tyranny we have today in the many institutions that have come under the influence of pseudoscientific advisers.</p>\n<p>We have many studies in teaching, for example, in which people make observations, make lists, do statistics, and so on, but these do not thereby become established science, established knowledge. They are merely an imitative form of science analogous to the South Sea Islanders’ airfields–radio towers, etc., made out of wood. The islanders expect a great airplane to arrive. They even build wooden airplanes of the same shape as they see in the foreigners’ airfields around them, but strangely enough, their wood planes do not fly. The result of this pseudoscientific imitation is to produce experts, which many of you are. [But] you teachers, who are really teaching children at the bottom of the heap, can maybe doubt the experts. As a matter of fact, I can also define science another way: Science is the belief in the ignorance of experts.</p>\n<p>When someone says, “Science teaches such and such,” he is using the word incorrectly. Science doesn’t teach anything; experience teaches it. If they say to you, “Science has shown such and such,” you might ask, “How does science show it? How did the scientists find out? How? What? Where?”</p>\n<p>It should not be “science has shown” but “this experiment, this effect, has shown.” And you have as much right as anyone else, upon hearing about the experiments–but be patient and listen to all the evidence–to judge whether a sensible conclusion has been arrived at.</p>\n<p>In a field which is so complicated [as education] that true science is not yet able to get anywhere, we have to rely on a kind of old-fashioned wisdom, a kind of definite straightforwardness. I am trying to inspire the teacher at the bottom to have some hope and some self-confidence in common sense and natural intelligence. The experts who are leading you may be wrong.</p>\n<p>I have probably ruined the system, and the students that are coming into Caltech no longer will be any good. I think we live in an unscientific age in which almost all the buffeting of communications and television–words, books, and so on–are unscientific. As a result, there is a considerable amount of intellectual tyranny in the name of science.</p>\n<p>Finally, with regard to this time-binding, a man cannot live beyond the grave. Each generation that discovers something from its experience must pass that on, but it must pass that on with a delicate balance of respect and disrespect, so that the [human] race–now that it is aware of the disease to which it is liable–does not inflict its errors too rigidly on its youth, but it does pass on the accumulated wisdom, plus the wisdom that it may not be wisdom.</p>\n<p>It is necessary to teach both to accept and to reject the past with a kind of balance that takes considerable skill. Science alone of all the subjects contains within itself the lesson of the danger of belief in the infallibility of the greatest teachers of the preceding generation.</p>\n<p>So carry on. Thank you.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一篇1966年纽约举办的国际科学教师协会15周年大会上的演讲。在我看来，这边文章更多是阐述要批判的对待科学，虽然发表距今已经有五十多年，科学一直在不断进步。但是敢于挑战权威的核心思想却丝毫没有过时，并且我认为这种思维应该伴随科学的发展保留下去。科学不会教给我们什么，那些复杂难懂的定义毫无意义，只有经验才能告诉你一切。不仅是纯粹的科学，任何需要通过继承而发展的东西不都是如此吗？</p>\n<p><a href=\"http://www.fotuva.org/feynman/what_is_science.html\" target=\"_blank\" rel=\"external\">原文章地址</a></p>\n<h3 id=\"What-is-Science\"><a href=\"#What-is-Science\" class=\"headerlink\" title=\"What is Science?\"></a>What is Science?</h3><p>Presented at the fifteenth annual meeting of the National Science Teachers Association, 1966 in New York City, and reprinted from The Physics Teacher Vol. 7, issue 6, 1969, pp. 313-320 by permission of the editor and the author. [Words and symbols in brackets added by Ralph Leighton.]</p>\n<p>I thank Mr. DeRose for the opportunity to join you science teachers. I also am a science teacher. I have much experience only in teaching graduate students in physics, and as a result of the experience I know that I don’t know how to teach.</p>\n<p>I am sure that you who are real teachers working at the bottom level of this hierarchy of teachers, instructors of teachers, experts on curricula, also are sure that you, too, don’t know how to do it; otherwise you wouldn’t bother to come to the convention.</p>\n<p>The subject “What Is Science” is not my choice. It was Mr. DeRose’s subject. But I would like to say that I think that “what is science” is not at all equivalent to “how to teach science,” and I must call that to your attention for two reasons. In the first place, from the way that I am preparing to give this lecture, it may seem that I am trying to tell you how to teach science–I am not at all in any way, because I don’t know anything about small children. I have one, so I know that I don’t know. The other is I think that most of you (because there is so much talk and so many papers and so many experts in the field) have some kind of a feeling of lack of self-confidence. In some way you are always being lectured on how things are not going too well and how you should learn to teach better. I am not going to berate you for the bad work you are doing and indicate how it can definitely be improved; that is not my intention.</p>\n<p>As a matter of fact, we have very good students coming into Caltech, and during the years we found them getting better and better. Now how it is done, I don’t know. I wonder if you know. I don’t want to interfere with the system; it is very good.</p>\n<p>Only two days ago we had a conference in which we decided that we don’t have to teach a course in elementary quantum mechanics in the graduate school any more. When I was a student, they didn’t even have a course in quantum mechanics in the graduate school; it was considered too difficult a subject. When I first started to teach, we had one. Now we teach it to undergraduates. We discover now that we don’t have to have elementary quantum mechanics for graduates from other schools. Why is it getting pushed down? Because we are able to teach better in the university, and that is because the students coming up are better trained.</p>\n<p>What is science? Of course you all must know, if you teach it. That’s common sense. What can I say? If you don’t know, every teacher’s edition of every textbook gives a complete discussion of the subject. There is some kind of distorted distillation and watered-down and mixed-up words of Francis Bacon from some centuries ago, words which then were supposed to be the deep philosophy of science. But one of the greatest experimental scientists of the time who was really doing something, William Harvey, said that what Bacon said science was, was the science that a lord-chancellor would do. He [Bacon] spoke of making observations, but omitted the vital factor of judgment about what to observe and what to pay attention to.</p>\n<p>And so what science is, is not what the philosophers have said it is, and certainly not what the teacher editions say it is. What it is, is a problem which I set for myself after I said I would give this talk.</p>\n<p>After some time, I was reminded of a little poem:</p>\n<p>A centipede was happy quite, until a toad in fun<br>Said, “Pray, which leg comes after which?”<br>This raised his doubts to such a pitch<br>He fell distracted in the ditch<br>Not knowing how to run.</p>\n<p>All my life, I have been doing science and known what it was, but what I have come to tell you–which foot comes after which–I am unable to do, and furthermore, I am worried by the analogy in the poem that when I go home I will no longer be able to do any research.</p>\n<p>There have been a lot of attempts by the various press reporters to get some kind of a capsule of this talk; I prepared it only a little time ago, so it was impossible; but I can see them all rushing out now to write some sort of headline which says: “The Professor called the President of NSTA a toad.”</p>\n<p>Under these circumstances of the difficulty of the subject, and my dislike of philosophical exposition, I will present it in a very unusual way. I am just going to tell you how I learned what science is.</p>\n<p>That’s a little bit childish. I learned it as a child. I have had it in my blood from the beginning. And I would like to tell you how it got in. This sounds as though I am trying to tell you how to teach, but that is not my intention. I’m going to tell you what science is like by how I learned what science is like.</p>\n<p>My father did it to me. When my mother was carrying me, it is reported–I am not directly aware of the conversation–my father said that “if it’s a boy, he’ll be a scientist.” How did he do it? He never told me I should be a scientist. He was not a scientist; he was a businessman, a sales manager of a uniform company, but he read about science and loved it.</p>\n<p>When I was very young–the earliest story I know–when I still ate in a high chair, my father would play a game with me after dinner.</p>\n<p>He had brought a whole lot of old rectangular bathroom floor tiles from some place in Long Island City. We sat them up on end, one next to the other, and I was allowed to push the end one and watch the whole thing go down. So far, so good.</p>\n<p>Next, the game improved. The tiles were different colors. I must put one white, two blues, one white, two blues, and another white and then two blues–I may want to put another blue, but it must be a white. You recognize already the usual insidious cleverness; first delight him in play, and then slowly inject material of educational value.</p>\n<p>Well, my mother, who is a much more feeling woman, began to realize the insidiousness of his efforts and said, “Mel, please let the poor child put a blue tile if he wants to.” My father said, “No, I want him to pay attention to patterns. It is the only thing I can do that is mathematics at this earliest level.” If I were giving a talk on “what is mathematics,” I would already have answered you. Mathematics is looking for patterns. (The fact is that this education had some effect. We had a direct experimental test, at the time I got to kindergarten. We had weaving in those days. They’ve taken it out; it’s too difficult for children. We used to weave colored paper through vertical strips and make patterns. The kindergarten teacher was so amazed that she sent a special letter home to report that this child was very unusual, because he seemed to be able to figure out ahead of time what pattern he was going to get, and made amazingly intricate patterns. So the tile game did do something to me.)</p>\n<p>I would like to report other evidence that mathematics is only patterns. When I was at Cornell, I was rather fascinated by the student body, which seems to me was a dilute mixture of some sensible people in a big mass of dumb people studying home economics, etc. including lots of girls. I used to sit in the cafeteria with the students and eat and try to overhear their conversations and see if there was one intelligent word coming out. You can imagine my surprise when I discovered a tremendous thing, it seemed to me.</p>\n<p>I listened to a conversation between two girls, and one was explaining that if you want to make a straight line, you see, you go over a certain number to the right for each row you go up–that is, if you go over each time the same amount when you go up a row, you make a straight line–a deep principle of analytic geometry! It went on. I was rather amazed. I didn’t realize the female mind was capable of understanding analytic geometry.</p>\n<p>She went on and said, “Suppose you have another line coming in from the other side, and you want to figure out where they are going to intersect. Suppose on one line you go over two to the right for every one you go up, and the other line goes over three to the right for every one that it goes up, and they start twenty steps apart,” etc.–I was flabbergasted. She figured out where the intersection was. It turned out that one girl was explaining to the other how to knit argyle socks. I, therefore, did learn a lesson: The female mind is capable of understanding analytic geometry. Those people who have for years been insisting (in the face of all obvious evidence to the contrary) that the male and female are equally capable of rational thought may have something. The difficulty may just be that we have never yet discovered a way to communicate with the female mind. If it is done in the right way, you may be able to get something out of it.</p>\n<p>Now I will go on with my own experience as a youngster in mathematics. Another thing that my father told me–and I can’t quite explain it, because it was more an emotion than a telling–was that the ratio of the circumference to the diameter of all circles was always the same, no matter what the size. That didn’t seem to me too unobvious, but the ratio had some marvelous property. That was a wonderful number, a deep number, pi. There was a mystery about this number that I didn’t quite understand as a youth, but this was a great thing, and the result was that I looked for pi everywhere.</p>\n<p>When I was learning later in school how to make the decimals for fractions, and how to make 3 1/8, 1 wrote 3.125 and, thinking I recognized a friend, wrote that it equals pi, the ratio of circumference to diameter of a circle. The teacher corrected it to 3.1416.</p>\n<p>I illustrate these things to show an influence. The idea that there is a mystery, that there is a wonder about the number was important to me–not what the number was. Very much later, when I was doing experiments in the laboratory–I mean my own home laboratory, fiddling around–no, excuse me, I didn’t do experiments, I never did; I just fiddled around. Gradually, through books and manuals, I began to discover there were formulas applicable to electricity in relating the current and resistance, and so on. One day, looking at the formulas in some book or other, I discovered a formula for the frequency of a resonant circuit, which was f = 1/2 pi LC, where L is the inductance and C the capacitance of the… circle? You laugh, but I was very serious then. Pi was a thing with circles, and here is pi coming out of an electric circuit. Where was the circle? Do those of you who laughed know how that comes about?</p>\n<p>I have to love the thing. I have to look for it. I have to think about it. And then I realized, of course, that the coils are made in circles. About a half year later, I found another book which gave the inductance of round coils and square coils, and there were other pi’s in those formulas. I began to think about it again, and I realized that the pi did not come from the circular coils. I understand it better now; but in my heart I still don’t know where that circle is, where that pi comes from.</p>\n<p>When I was still pretty young–I don’t know how old exactly–I had a ball in a wagon I was pulling, and I noticed something, so I ran up to my father to say that “When I pull the wagon, the ball runs to the back, and when I am running with the wagon and stop, the ball runs to the front. Why?</p>\n<p>How would you answer?</p>\n<p>He said, “That, nobody knows.” He said, “It’s very general, though, it happens all the time to anything; anything that is moving tends to keep moving; anything standing still tries to maintain that condition. If you look close you will see the ball does not run to the back of the wagon where you start from standing still. It moves forward a bit too, but not as fast as the wagon. The back of the wagon catches up with the ball, which has trouble getting started moving. It’s called inertia, that principle.” I did run back to check, and sure enough, the ball didn’t go backwards. He put the difference between what we know and what we call it very distinctly.</p>\n<p>Regarding this business about names and words, I would tell you another story. We used to go up to the Catskill Mountains for vacations. In New York, you go the Catskill Mountains for vacations. The poor husbands had to go to work during the week, but they would come rushing out for weekends and stay with their families. On the weekends, my father would take me for walks in the woods. He often took me for walks, and we learned all about nature, and so on, in the process. But the other children, friends of mine also wanted to go, and tried to get my father to take them. He didn’t want to, because he said I was more advanced. I’m not trying to tell you how to teach, because what my father was doing was with a class of just one student; if he had a class of more than one, he was incapable of doing it.</p>\n<p>So we went alone for our walk in the woods. But mothers were very powerful in those day’s as they are now, and they convinced the other fathers that they had to take their own sons out for walks in the woods. So all fathers took all sons out for walks in the woods one Sunday afternoon. The next day, Monday, we were playing in the fields and this boy said to me, “See that bird standing on the stump there? What’s the name of it?”</p>\n<p>I said, “I haven’t got the slightest idea.”</p>\n<p>He said, “It’s a brown-throated thrush. Your father doesn’t teach you much about science.”</p>\n<p>I smiled to myself, because my father had already taught me that [the name] doesn’t tell me anything about the bird. He taught me “See that bird? It’s a brown-throated thrush, but in Germany it’s called a halsenflugel, and in Chinese they call it a chung ling and even if you know all those names for it, you still know nothing about the bird–you only know something about people; what they call that bird. Now that thrush sings, and teaches its young to fly, and flies so many miles away during the summer across the country, and nobody knows how it finds its way,” and so forth. There is a difference between the name of the thing and what goes on.</p>\n<p>The result of this is that I cannot remember anybody’s name, and when people discuss physics with me they often are exasperated when they say “the Fitz-Cronin effect,” and I ask “What is the effect?” and I can’t remember the name.</p>\n<p>I would like to say a word or two–may I interrupt my little tale–about words and definitions, because it is necessary to learn the words.</p>\n<p>It is not science. That doesn’t mean, just because it is not science, that we don’t have to teach the words. We are not talking about what to teach; we are talking about what science is. It is not science to know how to change Centigrade to Fahrenheit. It’s necessary, but it is not exactly science. In the same sense, if you were discussing what art is, you wouldn’t say art is the knowledge of the fact that a 3-B pencil is softer than a 2-H pencil. It’s a distinct difference. That doesn’t mean an art teacher shouldn’t teach that, or that an artist gets along very well if he doesn’t know that. (Actually, you can find out in a minute by trying it; but that’s a scientific way that art teachers may not think of explaining.)</p>\n<p>In order to talk to each other, we have to have words, and that’s all right. It’s a good idea to try to see the difference, and it’s a good idea to know when we are teaching the tools of science, such as words, and when we are teaching science itself.</p>\n<p>To make my point still clearer, I shall pick out a certain science book to criticize unfavorably, which is unfair, because I am sure that with little ingenuity, I can find equally unfavorable things to say about others. There is a first grade science book which, in the first lesson of the first grade, begins in an unfortunate manner to teach science, because it starts off an the wrong idea of what science is. There is a picture of a dog–a windable toy dog–and a hand comes to the winder, and then the dog is able to move. Under the last picture, it says “What makes it move?” Later on, there is a picture of a real dog and the question, “What makes it move?” Then there is a picture of a motorbike and the question, “What makes it move?” and so on.</p>\n<p>I thought at first they were getting ready to tell what science was going to be about–physics, biology, chemistry–but that wasn’t it. The answer was in the teacher’s edition of the book: the answer I was trying to learn is that “energy makes it move.”</p>\n<p>Now, energy is a very subtle concept. It is very, very difficult to get right. What I meant is that it is not easy to understand energy well enough to use it right, so that you can deduce something correctly using the energy idea–it is beyond the first grade. It would be equally well to say that “God makes it move,” or “spirit makes it move,” or “movability makes it move.” (In fact, one could equally well say “energy makes it stop.”)</p>\n<p>Look at it this way: that’s only the definition of energy; it should be reversed. We might say when something can move that it has energy in it, but not what makes it move is energy. This is a very subtle difference. It’s the same with this inertia proposition.</p>\n<p>Perhaps I can make the difference a little clearer this way: If you ask a child what makes the toy dog move, you should think about what an ordinary human being would answer. The answer is that you wound up the spring; it tries to unwind and pushes the gear around.</p>\n<p>What a good way to begin a science course! Take apart the toy; see how it works. See the cleverness of the gears; see the ratchets. Learn something about the toy, the way the toy is put together, the ingenuity of people devising the ratchets and other things. That’s good. The question is fine. The answer is a little unfortunate, because what they were trying to do is teach a definition of what is energy. But nothing whatever is learned.</p>\n<p>Suppose a student would say, “I don’t think energy makes it move.” Where does the discussion go from there?</p>\n<p>I finally figured out a way to test whether you have taught an idea or you have only taught a definition.</p>\n<p>Test it this way: you say, “Without using the new word which you have just learned, try to rephrase what you have just learned in your own language.” Without using the word “energy,” tell me what you know now about the dog’s motion.” You cannot. So you learned nothing about science. That may be all right. You may not want to learn something about science right away. You have to learn definitions. But for the very first lesson, is that not possibly destructive?</p>\n<p>I think for lesson number one, to learn a mystic formula for answering questions is very bad. The book has some others: “gravity makes it fall;” “the soles of your shoes wear out because of friction.” Shoe leather wears out because it rubs against the sidewalk and the little notches and bumps on the sidewalk grab pieces and pull them off. To simply say it is because of friction, is sad, because it’s not science.</p>\n<p>My father dealt a little bit with energy and used the term after I got a little bit of the idea about it. What he would have done I know, because he did in fact essentially the same thing–though not the same example of the toy dog. He would say, “It moves because the sun is shining,” if he wanted to give the same lesson.</p>\n<p>I would say, “No. What has that to do with the sun shining? It moved because I wound up the springs.”</p>\n<p>“And why, my friend, are you able to move to wind up the spring?”</p>\n<p>“I eat.”</p>\n<p>“What, my friend, do you eat?”</p>\n<p>“I eat plants.”</p>\n<p>“And how do they grow?”</p>\n<p>“They grow because the sun is shining.”</p>\n<p>And it is the same with the [real] dog.</p>\n<p>What about gasoline? Accumulated energy of the sun, which is captured by plants and preserved in the ground. Other examples all end with the sun. And so the same idea about the world that our textbook is driving at is phrased in a very exciting way.</p>\n<p>All the things that we see that are moving, are moving because the sun is shining. It does explain the relationship of one source of energy to another, and it can be denied by the child. He could say, “I don’t think it is on account of the sun shining,” and you can start a discussion. So there is a difference. (Later I could challenge him with the tides, and what makes the earth turn, and have my hand on mystery again.)</p>\n<p>That is just an example of the difference between definitions (which are necessary) and science. The only objection in this particular case was that it was the first lesson. It must certainly come in later, telling you what energy is, but not to such a simple question as “What makes a [toy] dog move?” A child should be given a child’s answer. “Open it up; let’s look at it.”</p>\n<p>During those walks in the woods, I learned a great deal. In the case of birds, for example, I already mentioned migration, but I will give you another example of birds in the woods. Instead of naming them, my father would say, “Look, notice that the bird is always pecking in its feathers. It pecks a lot in its feathers. Why do you think it pecks the feathers?”</p>\n<p>I guessed it’s because the feathers are ruffled, and he’s trying to straighten them out. He said, “Okay, when would the feathers get ruffled, or how would they get ruffled?”</p>\n<p>“When he flies. When he walks around, it’s okay; but when he flies it ruffles the feathers.”</p>\n<p>Then he would say, “You would guess then when the bird just landed he would have to peck more at his feathers than after he has straightened them out and has just been walking around the ground for a while. Okay, let’s look.”</p>\n<p>So we would look, and we would watch, and it turned out, as far as I could make out, that the bird pecked about as much and as often no matter how long he was walking an the ground and not just directly after flight.</p>\n<p>So my guess was wrong, and I couldn’t guess the right reason. My father revealed the reason.</p>\n<p>It is that the birds have lice. There is a little flake that comes off the feather, my father taught me, stuff that can be eaten, and the louse eats it. And then an the loose, there is a little bit of wax in the joints between the sections of the leg that oases out, and there is a mite that lives in there that can eat that wax. Now the mite has such a good source of food that it doesn’t digest it too well, so from the rear end there comes a liquid that has too much sugar, and in that sugar lives a tiny creature, etc.</p>\n<p>The facts are not correct; the spirit is correct. First, I learned about parasitism, one on the other, on the other, on the other. Second, he went on to say that in the world whenever there is any source of something that could be eaten to make life go, some form of life finds a way to make use of that source; and that each little bit of left over stuff is eaten by something.</p>\n<p>Now the point of this is that the result of observation, even if I were unable to come to the ultimate conclusion, was a wonderful piece of gold, with marvelous results. It was something marvelous.</p>\n<p>Suppose I were told to observe, to make a list, to write down, to do this, to look, and when I wrote my list down, it was filed with 130 other lists in the back of a notebook. I would learn that the result of observation is relatively dull, that nothing much comes of it.</p>\n<p>I think it is very important–at least it was to me–that if you are going to teach people to make observations, you should show that something wonderful can come from them. I learned then what science was about: it was patience. If you looked, and you watched, and you paid attention, you got a great reward from it–although possibly not every time. As a result, when I became a more mature man, I would painstakingly, hour after hour, for years, work on problems–sometimes many years, sometimes shorter times; many of them failing, lots of stuff going into the wastebasket–but every once in a while there was the gold of a new understanding that I had learned to expect when I was a kid, the result of observation. For I did not learn that observation was not worthwhile.</p>\n<p>Incidentally, in the forest we learned other things. We would go for walks and see all the regular things, and talk about many things: about the growing plants, the struggle of the trees for light, how they try to get as high as they can, and to solve the problem of getting water higher than 35 or 40 feet, the little plants on the ground that look for the little bits of light that come through all that growth, and so forth.</p>\n<p>One day, after we had seen all this, my father took me to the forest again and said, “In all this time we have been looking at the forest we have only seen half of what is going on, exactly half.”</p>\n<p>I said, “What do you mean?”</p>\n<p>He said, “We have been looking at how all these things grow; but for each bit of growth, there must be the same amount of decay–otherwise, the materials would be consumed forever: dead trees would lie there, having used up all the stuff from the air and the ground, and it wouldn’t get back into the ground or the air, so nothing else could grow because there is no material available. There must be for each bit of growth exactly the same amount of decay.”</p>\n<p>There then followed many walks in the woods during which we broke up old stumps, saw frizzy bags and funguses growing; he couldn’t show me bacteria, but we saw the softening effects, and so on. [Thus] I saw the forest as a process of the constant turning of materials.</p>\n<p>There were many such things, descriptions of things, in odd ways. He often started to talk about things like this: “Suppose a man from Mars were to come down and look at the world.” For example, when I was playing with my electric trains, he told me that there is a great wheel being turned by water which is connected by filaments of copper, which spread out and spread out and spread out in all directions; and then there are little wheels, and all those little wheels turn when the big wheel turns. The relation between them is only that there is copper and iron, nothing else–no moving parts. You turn one wheel here, and all the little wheels all over the place turn, and your train is one of them. It was a wonderful world my father told me about.</p>\n<p>You might wonder what he got out of it all. I went to MIT. I went to Princeton. I came home, and he said, “Now you’ve got a science education. I have always wanted to know something that I have never understood, and so, my son, I want you to explain it to me.”</p>\n<p>I said yes.</p>\n<p>He said, “I understand that they say that light is emitted from an atom when it goes from one state to another, from an excited state to a state of lower energy.</p>\n<p>I said, “That’s right.”</p>\n<p>“And light is a kind of particle, a photon, I think they call it.”</p>\n<p>“Yes.”</p>\n<p>“So if the photon comes out of the atom when it goes from the excited to the lower state, the photon must have been in the atom in the excited state.”</p>\n<p>I said, “Well, no.”</p>\n<p>He said, “Well, how do you look at it so you can think of a particle photon coming out without it having been in there in the excited state?”</p>\n<p>I thought a few minutes, and I said, “I’m sorry; I don’t know. I can’t explain it to you.”</p>\n<p>He was very disappointed after all these years and years of trying to teach me something, that it came out with such poor results.</p>\n<p>What science is, I think, may be something like this: There was on this planet an evolution of life to a stage that there were evolved animals, which are intelligent. I don’t mean just human beings, but animals which play and which can learn something from experience–like cats. But at this stage each animal would have to learn from its own experience. They gradually develop, until some animal [primates?] could learn from experience more rapidly and could even learn from another’s experience by watching, or one could show the other, or he saw what the other one did. So there came a possibility that all might learn it, but the transmission was inefficient and they would die, and maybe the one who learned it died, too, before he could pass it on to others.</p>\n<p>The question is: is it possible to learn more rapidly what somebody learned from some accident than the rate at which the thing is being forgotten, either because of bad memory or because of the death of the learner or inventors?</p>\n<p>So there came a time, perhaps, when for some species [humans?] the rate at which learning was increased, reached such a pitch that suddenly a completely new thing happened: things could be learned by one individual animal, passed on to another, and another fast enough that it was not lost to the race. Thus became possible an accumulation of knowledge of the race.</p>\n<p>This has been called time-binding. I don’t know who first called it this. At any rate, we have here [in this hall] some samples of those animals, sitting here trying to bind one experience to another, each one trying to learn from the other.</p>\n<p>This phenomenon of having a memory for the race, of having an accumulated knowledge passable from one generation to another, was new in the world–but it had a disease in it: it was possible to pass on ideas which were not profitable for the race. The race has ideas, but they are not necessarily profitable.</p>\n<p>So there came a time in which the ideas, although accumulated very slowly, were all accumulations not only of practical and useful things, but great accumulations of all types of prejudices, and strange and odd beliefs.</p>\n<p>Then a way of avoiding the disease was discovered. This is to doubt that what is being passed from the past is in fact true, and to try to find out ab initio again from experience what the situation is, rather than trusting the experience of the past in the form in which it is passed down. And that is what science is: the result of the discovery that it is worthwhile rechecking by new direct experience, and not necessarily trusting the [human] race[‘s] experience from the past. I see it that way. That is my best definition.</p>\n<p>I would like to remind you all of things that you know very well in order to give you a little enthusiasm. In religion, the moral lessons are taught, but they are not just taught once, you are inspired again and again, and I think it is necessary to inspire again and again, and to remember the value of science for children, for grown-ups, and everybody else, in several ways; not only [so] that we will become better citizens, more able to control nature and so on.</p>\n<p>There are other things.</p>\n<p>There is the value of the worldview created by science. There is the beauty and the wonder of the world that is discovered through the results of these new experiences. That is to say, the wonders of the content which I just reminded you of; that things move because the sun is shining. (Yet, not everything moves because the sun is shining. The earth rotates independent of the sun shining, and the nuclear reaction recently produced energy on the earth, a new source. Probably volcanoes are generally moved from a source different from the shining<br>sun.)</p>\n<p>The world looks so different after learning science. For example, trees are made of air, primarily. When they are burned, they go back to air, and in the flaming heat is released the flaming heat of the sun which was bound in to convert the air into tree, and in the ash is the small remnant of the part which did not come from air that came from the solid earth, instead. These are beautiful things, and the content of science is wonderfully full of them. They are very inspiring, and they can be used to inspire others.</p>\n<p>Another of the qualities of science is that it teaches the value of rational thought as well as the importance of freedom of thought; the positive results that come from doubting that the lessons are all true. You must here distinguish–especially in teaching–the science from the forms or procedures that are sometimes used in developing science. It is easy to say, “We write, experiment, and observe, and do this or that.” You can copy that form exactly. But great religions are dissipated by following form without remembering the direct content of the teaching of the great leaders. In the same way, it is possible to follow form and call it science, but that is pseudo-science. In this way, we all suffer from the kind of tyranny we have today in the many institutions that have come under the influence of pseudoscientific advisers.</p>\n<p>We have many studies in teaching, for example, in which people make observations, make lists, do statistics, and so on, but these do not thereby become established science, established knowledge. They are merely an imitative form of science analogous to the South Sea Islanders’ airfields–radio towers, etc., made out of wood. The islanders expect a great airplane to arrive. They even build wooden airplanes of the same shape as they see in the foreigners’ airfields around them, but strangely enough, their wood planes do not fly. The result of this pseudoscientific imitation is to produce experts, which many of you are. [But] you teachers, who are really teaching children at the bottom of the heap, can maybe doubt the experts. As a matter of fact, I can also define science another way: Science is the belief in the ignorance of experts.</p>\n<p>When someone says, “Science teaches such and such,” he is using the word incorrectly. Science doesn’t teach anything; experience teaches it. If they say to you, “Science has shown such and such,” you might ask, “How does science show it? How did the scientists find out? How? What? Where?”</p>\n<p>It should not be “science has shown” but “this experiment, this effect, has shown.” And you have as much right as anyone else, upon hearing about the experiments–but be patient and listen to all the evidence–to judge whether a sensible conclusion has been arrived at.</p>\n<p>In a field which is so complicated [as education] that true science is not yet able to get anywhere, we have to rely on a kind of old-fashioned wisdom, a kind of definite straightforwardness. I am trying to inspire the teacher at the bottom to have some hope and some self-confidence in common sense and natural intelligence. The experts who are leading you may be wrong.</p>\n<p>I have probably ruined the system, and the students that are coming into Caltech no longer will be any good. I think we live in an unscientific age in which almost all the buffeting of communications and television–words, books, and so on–are unscientific. As a result, there is a considerable amount of intellectual tyranny in the name of science.</p>\n<p>Finally, with regard to this time-binding, a man cannot live beyond the grave. Each generation that discovers something from its experience must pass that on, but it must pass that on with a delicate balance of respect and disrespect, so that the [human] race–now that it is aware of the disease to which it is liable–does not inflict its errors too rigidly on its youth, but it does pass on the accumulated wisdom, plus the wisdom that it may not be wisdom.</p>\n<p>It is necessary to teach both to accept and to reject the past with a kind of balance that takes considerable skill. Science alone of all the subjects contains within itself the lesson of the danger of belief in the infallibility of the greatest teachers of the preceding generation.</p>\n<p>So carry on. Thank you.</p>\n"}],"PostAsset":[{"_id":"source/_posts/Kong网关入门/p1.png","post":"cjq24le1v000kvcz1369suqvl","slug":"p1.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjq24ldx50000vcz1gny6pq9y","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24ldyy0004vcz1pt7z7v67"},{"post_id":"cjq24ldyo0001vcz1j0enkt3d","tag_id":"cjq24ldyx0003vcz1fbqik76h","_id":"cjq24ldz00005vcz13x8hnqw9"},{"post_id":"cjq24ldzj0006vcz1ffqnh280","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24ldzm0008vcz16n15omch"},{"post_id":"cjq24ldzl0007vcz1zg4ozhf6","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le0v000avcz1awskd4co"},{"post_id":"cjq24le11000cvcz1t3m0edxe","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le1c000evcz1n46h3vgb"},{"post_id":"cjq24le1r000jvcz1492t0jup","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le1z000lvcz1grsydl9d"},{"post_id":"cjq24le1d000fvcz1fzjbrxue","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le24000nvcz1kx6pvun2"},{"post_id":"cjq24le1v000kvcz1369suqvl","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le26000pvcz1z4sb4l6e"},{"post_id":"cjq24le21000mvcz15e5c5nj6","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le28000rvcz18r5wly8m"},{"post_id":"cjq24le24000ovcz1g9gjy4ck","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le2b000uvcz1wzerbovg"},{"post_id":"cjq24le29000svcz1g1k7ofkr","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le2d000wvcz1tcg6b11a"},{"post_id":"cjq24le26000qvcz1wi5v1vk3","tag_id":"cjq24le2a000tvcz1ajnwuh8x","_id":"cjq24le2i0010vcz1f6qzssl1"},{"post_id":"cjq24le2f000yvcz1owes0erh","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le2k0012vcz1c6c72pnb"},{"post_id":"cjq24le2i0011vcz1jizwlcxn","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le2m0014vcz1lafm3v1b"},{"post_id":"cjq24le2b000vvcz1rzgns86z","tag_id":"cjq24le2h000zvcz14aqiebkc","_id":"cjq24le2p0016vcz10linh1ca"},{"post_id":"cjq24le2k0013vcz11nyxe8t0","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le2q0017vcz14wt6g5sg"},{"post_id":"cjq24le2m0015vcz1cq9omljt","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le2q0018vcz1depn4nb6"},{"post_id":"cjq24le310019vcz1gyvpo3fs","tag_id":"cjq24le33001bvcz1sppft8ah","_id":"cjq24le34001cvcz1l2elk6yu"},{"post_id":"cjq24le3y001dvcz1kdsib5d6","tag_id":"cjq24ldys0002vcz1q16irhli","_id":"cjq24le40001evcz1vg5r4izy"},{"post_id":"cjq24le49001fvcz11fe2tijc","tag_id":"cjq24le1l000hvcz164qeiatx","_id":"cjq24le4a001gvcz1snr4nra5"}],"Tag":[{"name":"前端","_id":"cjq24ldys0002vcz1q16irhli"},{"name":"分享 算法","_id":"cjq24ldyx0003vcz1fbqik76h"},{"name":"分享","_id":"cjq24le1l000hvcz164qeiatx"},{"name":"随笔","_id":"cjq24le2a000tvcz1ajnwuh8x"},{"name":"笔记本本","_id":"cjq24le2h000zvcz14aqiebkc"},{"name":"前端 分享","_id":"cjq24le33001bvcz1sppft8ah"}]}}